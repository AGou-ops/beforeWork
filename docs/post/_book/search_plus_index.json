{"./":{"url":"./","title":"关于我","keywords":"","body":"1. Welcome to myStudyNote2. This is AGou-ops's Gitbook.1. Welcome to myStudyNote 2. This is AGou-ops's Gitbook. Gitbook地址：https://agou-ops.github.io/myStudyNote/ GitHub地址：https://github.com/AGou-ops Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2020-03-08 20:59:09 "},"Program_lang/":{"url":"Program_lang/","title":"编程语言","keywords":"","body":"1. 编程语言-目录1.1. Java1.2. Python1.3. Splash_Lua1.4. PHP1. 编程语言-目录 1.1. Java 1.2. Python 1.3. Splash_Lua 1.4. PHP Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-25 19:01:37 "},"Program_lang/Python.html":{"url":"Program_lang/Python.html","title":"Python","keywords":"","body":" This is Python StudyNote. klipse(在线测试模块) # 在这里可以直接编辑 print [x + 1 for x in range(10)] Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Program_lang/Java.html":{"url":"Program_lang/Java.html","title":"Java","keywords":"","body":" This is Java StudyNote. Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Program_lang/Splash_Lua.html":{"url":"Program_lang/Splash_Lua.html","title":"Splash_Lua","keywords":"","body":"1. Splash_Lua脚本1.1. 在docker中启动Splash1.2. Demo11.3. Demo21. Splash_Lua脚本 1.1. 在docker中启动Splash docker run -p 8050:8050 scrapinghub/splash 1.2. Demo1 function main(splash,args) splash:go(\"https://www.baidu.com\") input=splash:select(\"#kw\") input:send_text(\"Splash\") submit=splash:select(\"#su\") submit.mouse_click() splash:wait(3) return splash:png() end 1.3. Demo2 function main(splash,args) local treat=require('treat') assert(splash:go(\"http://quotes.toscrape.com/\")) assert(splash:wait(0.5)) local texts=splash:select_all(\".quote .text\") local results={} for index,text in ipairs(texts) do results[index] = text.node.innerHTML end return treat.as_array(results),splash:png() end Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Database/":{"url":"Database/","title":"数据库","keywords":"","body":"1. 数据库-目录1.1. MongoDB1.2. Mysql、MariaDB1.3. Redis1. 数据库-目录 1.1. MongoDB 1.2. Mysql、MariaDB 1.3. Redis Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-04 09:13:03 "},"Database/Mysql、MariaDB/MySQL、MariaDB基础.html":{"url":"Database/Mysql、MariaDB/MySQL、MariaDB基础.html","title":"MySQL/MariaDB基础","keywords":"","body":"1. MySQL1.1. 安装与简单使用1.2. 用户管理1.3. 查询数据1.4. 修改数据1.5. php连接使用mysql2. MariaDB2.1. MariaDB安装与简单使用3. 简单管理工具：phpMyAdmin4. 其他4.1. Mysql重置密码4.2. MySQL命令行神器MyCLI4.2.1. 安装4.2.2. 使用4.3. SQL在线练习网站 This is Mysql、MariaDB基础 StudyNote. 1. MySQL MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。 官方站点：https://www.mysql.com/ 1.1. 安装与简单使用 安装启动与简单设置 # 获取官网RPM文件 wget http://repo.mysql.com/[mysql80-community-release-el7-3.noarch.rpm] # 校验rpm文件 rpm -ivh mysql-community-release-el7-5.noarch.rpm # 更新下载 yum update # 安装MySQL服务 yum install mysql-server # 权限设置 chown mysql:mysql -R /var/lib/mysql # 初始化Mysql mysqld --initialize # 启动mysql服务 systemctl start mysqld # 关闭mysql服务 systemctl stop mysqld # 或者 mysqladmin -uroot -p shutdown 验证安装及简单使用 #　查看mysql版本 mysqladmin --version # 创建root默认密码 mysqladmin -u root password \"your_new_passwd\"; # 使用 mysql -uroot -p 1.2. 用户管理 添加用户实例，用户名为suofeiya指定其密码为suofeiya，并授予其SELECT权限： # 方式一： mysql> use mysql; mysql> INSERT INTO user (host, user, password, select_priv) VALUES ('localhost', 'suofeiya', PASSWORD('suofeiya'), 'Y', 'Y', 'Y'); # 重载授权表 mysql> FLUSH PRIVILEGES; # 查看 mysql> SELECT host, user, password FROM user WHERE user = 'suofeiya'; * 需要注意的是，`password()`加密函数在mysql8中已被移除，可以使用`MD5()`函数来代替 # 方式二（MySQL8.0之后）： mysql> CREATE USER 'suofeiya'@'%' IDENTIFIED BY 'suofeiya'; # 授予部分权限 mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON *.* TO 'suofeiya'@'%'; # 授予所有权限 mysql> GRANT ALL PRIVILEGES ON *.* TO 'suofeiya'@'%'; mysql> FLUSH PRIVILEGES; # 查看用户权限 mysql> SHOW GRANTS FOR 'suofeiya'@'%'; 1.3. 查询数据 1.4. 修改数据 1.5. php连接使用mysql php-mysql 2. MariaDB MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。 官方站点：https://mariadb.org/ 2.1. MariaDB安装与简单使用 yum install -y mariadb-server # 使用 mysql -uroot -p MariaDB主要由两类程序文件： Client：mysql、mysqldump、mysqladmin Server：mysqld、mysqld_safe、mysqld_multi 3. 简单管理工具：phpMyAdmin phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。 官方站点：https://www.phpmyadmin.net/ 为了安全，做些许修改 # 复制配置文件模板 cp config.sample.inc.php config.inc.php # 修改模板 vim config.inc.php # 修改并随意给出字符串即可 $cfg['blowfish_secret'] = 'fGCXVdsf3423432dfds'; /* YOU MUST FILL IN THIS FOR COOKIE AUTH! */ 4. 其他 4.1. Mysql重置密码 如果忘记密码，可以在/etc/my.cnf配置文件中加入skip-grant-tables来重置密码，步骤如下： 修改配置文件 vim /etc/my.cnf #### ... [mysqld] skip-grant-tables port=3306 ... #### 重启mysql服务systemctl restart mysql 登录mysql，并修改root密码 mysql -uroot -p # 此时登录无需输入密码，可直接登录成功 # 修改root密码 mysql > use mysql; mysql> update user set authentication_string=password(\"newpasswd\") where user='root'; mysql> flush privileges; * 如果还是未修改成功，在password之后加入`,plugin='mysql_native_password'`试试 按照此种方法，可以先关闭mysql服务，然后找到mysql的主程序文件，加入--skip-grant-tables参数来修改密码，如./mysqld_safe --skip-grant-tables &，然后再登录mysql账户修改密码即可 4.2. MySQL命令行神器MyCLI 官方站点：https://www.mycli.net/ 4.2.1. 安装 在RHEL/CentOS上安装： sudo yum install python-pip python-devel -y sudo pip install mycli 在Debian/Ubuntu上安装： sudo apt update sudo apt install -y mycli 4.2.2. 使用 在终端输入mycli指令外加与mysql连接工具相类似的参数即可，可以使用mycli --help来查看帮助. 4.3. SQL在线练习网站 http://sqlfiddle.com/ Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-12 09:38:39 "},"Database/Mysql、MariaDB/php-mysql.html":{"url":"Database/Mysql、MariaDB/php-mysql.html","title":"php-mysql","keywords":"","body":"1. MySQLi1.1. MySQLi的安装1.2. php连接Mysqli1.3. 创建数据库1.4. 创建数据表1.5. 插入数据2. PDO2.1. PDO的安装2.2. php连接PDO2.3. 创建数据库2.4. 创建数据表2.5. 插入数据 PHP 5 及以上版本建议使用以下方式连接 MySQL : MySQLi extension （\"i\" 意为 improved） PDO (PHP Data Objects)（支持多种数据库） 1. MySQLi 1.1. MySQLi的安装 安装完php-mysql包时会默认安装mysqli扩展，因此确保系统安装好该包即可 yum install- y php-mysql 1.2. php连接Mysqli 1.3. 创建数据库 1.4. 创建数据表 1.5. 插入数据 \" . mysqli_error($conn); } mysqli_close($conn); ?> 2. PDO 2.1. PDO的安装 编译包进行安装： 参考：https://www.php.net/manual/en/pdo.installation.php#114683 使用yum仓库进行安装： yum install php-pdo 2.2. php连接PDO getMessage(); } ?> 2.3. 创建数据库 setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); $sql = \"CREATE DATABASE myDBPDO\"; // 使用 exec() ，因为没有结果返回 $conn->exec($sql); echo \"数据库创建成功\"; } catch(PDOException $e) { echo $sql . \"\" . $e->getMessage(); } $conn = null; ?> 2.4. 创建数据表 setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // 使用 sql 创建数据表 $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP )\"; // 使用 exec() ，没有结果返回 $conn->exec($sql); echo \"数据表 MyGuests 创建成功\"; } catch(PDOException $e) { echo $sql . \"\" . $e->getMessage(); } $conn = null; ?> 2.5. 插入数据 setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // 开始事务 $conn->beginTransaction(); // SQL 语句 $conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\"); $conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com')\"); $conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\"); // 提交事务 $conn->commit(); echo \"新记录插入成功\"; } catch(PDOException $e) { // 如果执行失败回滚 $conn->rollback(); echo $sql . \"\" . $e->getMessage(); } $conn = null; ?> Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-04 18:25:59 "},"Database/MongoDB.html":{"url":"Database/MongoDB.html","title":"MongoDB","keywords":"","body":"1. MongoDB安装（CenOS） This is MongoDB StudyNote. 1. MongoDB安装（CenOS） #　MonogoDB官网https://www.mongodb.com/download-center#community # 下载到本地 curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz #　解压 tar -zxvf mongodb-linux-x86_64-3.0.6.tg # 拷贝解压包到指定文件夹 mv mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb # 在/etc/profile中添加环境变量 export PATH=/bin:$PATH # 使环境变量生效 source /etc/profile # mongoDB 配置文件 [root@centos mongodb]# cat mongodb.conf port=27017 #端口 dbpath= /data/db #数据库存文件存放目录 logpath= /usr/local/mongodb/log/mongodb.log #日志文件存放路径 logappend=true #使用追加的方式写日志 fork=true #以守护进程的方式运行，创建服务器进程 maxConns=100 #最大同时连接数 noauth=true #不启用验证 journal=true #每次写入会记录一条操作日志（通过journal可以重新构造出写入的数据）。 #即使宕机，启动时wiredtiger会先将数据恢复到最近一次的checkpoint点，然后重放后续的journal日志来恢复。 storageEngine=wiredTiger #存储引擎有mmapv1、wiretiger、mongorocks bind_ip = 0.0.0.0 #这样就可外部访问了，例如从win10中去连虚拟机中的MongoDB # 为MonogoDB创建后台服务 sudo vim /etc/systemd/system/mongdb.service [Unit] Description=High-performance, schema-free document-oriented database After=network.target [Service] User=mongodb ExecStart=/usr/bin/mongod --quiet --config /etc/mongod.conf [Install] WantedBy=multi-user.target mongoDB中的数据表称为collection 一行数据称为table 数据字段称为field mongoDB不支持join表连接 use 数据库名称,可以用来创建数据库 db.集合名称.insert({\"username\"：\"suofeiya\",\"age\":\"21\"}) db.dropDatabase() db.集合名称.deleteOne({}) db.集合名称.deleteMany({}) Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Database/Redis.html":{"url":"Database/Redis.html","title":"Redis","keywords":"","body":"1. Ubuntu下安装使用Redis This is Redis StudyNote. 1. Ubuntu下安装使用Redis sudo apt-get update sudo apt-get install redis-server 启动Redis redis-server 查看Redis是否启动 redis-cli 出现以下则证明redis已成功启动 ┬─[suofeiya@suofeiya-PC:~]─[19时11分00秒] ╰─>$ redis-cli 127.0.0.1:6379> ping PONG 通过以下命令可以避免出现中文乱码 redis-cli --raw Redis 的配置文件在/etc/redis.conf，为Redis添加密码 requirepass yourpassword Redis-dump查看Redis中的数据 suofeiya@suofeiya-PC:~$ redis-dump -u :123@localhost:6379 /var/lib/gems/2.5.0/gems/redis-dump-0.4.0/lib/redis/dump.rb:32: warning: Insecure world writable dir /usr/local/bin in PATH, mode 042777 {\"db\":0,\"key\":\"name_1\",\"ttl\":-1,\"type\":\"string\",\"value\":\"suofeiya\",\"size\":8} {\"db\":0,\"key\":\"name\",\"ttl\":-1,\"type\":\"string\",\"value\":\"suofeiya\",\"size\":8} Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Linux/":{"url":"Linux/","title":"Linux","keywords":"","body":"1. Linux-目录1.1. Linux基础1.2. Linux服务器1.3. Linux其他1.4. Linux Shell1.5. shell_awk1.6. Linux配置文件 1. Linux-目录 1.1. Linux基础 1.2. Linux服务器 1.3. Linux其他 1.4. Linux Shell 1.5. shell_awk 1.6. Linux配置文件 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Linux/Linux基础.html":{"url":"Linux/Linux基础.html","title":"Linux基础","keywords":"","body":"1. 基础命令使用2. 从远处复制文件到本地目录3. 上传本地文件到远程机器指定目录4. 指定端口 22225. 上传本地目录到远程机器指定目录6. 更新yum源(CentOS 6/7)6.1. RHEL系后端包管理工具rpm的使用 This is Linux基础 StudyNote. 1. 基础命令使用 nohup将命令放于后台执行，常用于脚本类，例如：nohup sh test.sh &，执行命令的同时，在家目录会生成一个nohup.out的文件来接收返回结果，所以可以使用tail -f nohup.out来实时查看输出内容 screen命令： （1）打开screen：screen （2）拆除分解screen：使用快捷键Ctrl+a，d （3）列出当前正在运行的screen：screen -ls （4）连接至screen：screen -r SCREEN_ID （5）关闭当前screen：exit 解压缩 1、*.tar 用 tar –xvf 解压 2、*.gz 用 gzip -d或者gunzip 解压 3、.tar.gz和.tgz 用 tar –xzf 解压 4、*.bz2 用 bzip2 -d或者用bunzip2 解压 5、*.tar.bz2用tar –xjf 解压 6、*.Z 用 uncompress 解压 7、*.tar.Z 用tar –xZf 解压 scp命令：加密传输-本地主机-远程主机(具体参见https://wangchujiang.com/linux-command/c/scp.html或者man pages) ```bash2. 从远处复制文件到本地目录 scp root@centos:/root/anaconda-ks.cfg . 3. 上传本地文件到远程机器指定目录 scp /home/suofeiya/Shell_Study/control_progress_status/prepare.txt root@centps:/root 4. 指定端口 2222 scp -rp -P 2222 /home/suofeiya/Shell_Study/control_progress_status/prepare.txt root@centps:/root 5. 上传本地目录到远程机器指定目录 scp -r /home/suofeiya/Shell_Study/control_progress_status/test root@centos:/root/test ``` find实用命令 find ./ -perm /002 -exec mv {} {}.bak \\; # 查找没有属组属主的文件，并一个个询问是否要更改权限 find ./ -nouser -a -nogroup -ok chmod root:root {} \\; rename重命名 rename cat命令的特殊使用 cat anacron定时任务 chroot切换root目录 hash命令 * ```bash # 说明： # linux系统下会有一个hash表，当你刚开机时这个hash表为空，每当你执行过一条命令时，hash表会记录下这条命令的路径，就相当于缓存一样。第一次执行命令shell解释器默认的会从PATH路径下寻找该命令的路径，当你第二次使用该命令时，shell解释器首先会查看hash表，没有该命令才会去PATH路径下寻找 # hash表的作用： 大大提高命令的调用速率 -l # 显示hash表内容 -r # 清除hash表 -d openssl #删除表中某一条（删除openssl） -t openssl # 查看openssl命令路径（hash表中没有的话，可以调用which命令） -p /usr/bin/openssl aliesopenssl # 往hash表中添加一条，执行aliesopenssl即执行openssl命令（起别名） * 注意：hash命令默认在centos中有，Ubuntu没有 ``` 打开关闭交换空间，swapon swapoff 挂载卸载设备 # 查看当前已挂载的设备 mount cat /etc/mtab cat /proc/mounts # 挂载设备 mount -o loop /PATH/TO/DIR MOUNT_POINT # 挂在本地回环设备，-o指定挂载选项，其中有sync、nosync、atime、noatime、diratime、nodiratime、remont(常用，无需卸载) mount -r /dev/cdrom MOUNT_POINT # 挂载只读光盘文件 # 将一个目录绑定至另一个目录 mount -bind SOURCE_DIR DISTIN_DIR # 卸载设备 # 查看设备被那些进程所占用 lsof MOUNT_POINT fuser -v MOUNT_POINT fuser -km MOUNT_POINT # 强行终止正在访问某挂载点的进程 systemctl命令 systemctl try-restart NAME.service # CentOS7条件式重启服务（即当服务运行的时候才会执行重启操作，否则不执行），在CentOS6使用condrestart systemctl reload-or-restart NAME.service # 重载或者重启服务 systemctl reload-or-try-restart NAME.service # 重载或者条件式重启服务 systemctl is-active NAME.service # 查看某服务是否激活与否 systemctl list-units --type service # 查看所有已激活的服务 systemctl list-units -t service -all # 查看系统上所有的服务，在CentOS6上使用的是chkconfig --list systemctl mask|unmask NAME.service # 允许或者禁止某服务开机启动 6. 更新yum源(CentOS 6/7) # 下载repo源，建议选择国内源(163，aliyun) wget .../*.repo # 备份原来的基础源 mv /etc/yum.repo.d/*.Base.repo *.bak # 替换源 mv ... # 执行yum源的更新 yum clean all # 清除yum缓存 yum makeclean # 重建yum缓存 yum update # 增加epel源 wget https://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -ivh ... # 安装rpm # 安装yum-priorities源优先级工具 yum install yum-priorities 6.1. RHEL系后端包管理工具rpm的使用 安装： ​ rpm -ivh(-i 安装包 -v verbose详细信息 -h hash值来表示进度条每一个#代表2%)PackageName ​ --nodeps 忽略依赖性检查 --replacepkgs 重新安装 卸载： ​ rpm -e(erase) PackageName ​ --nodeps 升级： ​ rpm -Uvh、-Fvh 前者如果之前未安装过则会直接安装该包，后者则不会 查询： ​ rpm -qa 、-qf、-qi、-qc、-q --scripts(安装之前preinstall安装之后postinstall卸载之前preuninstall卸载之后postuninstall的脚本信息)、-q provides(该包安装后会提供那些服务或者工具)、-q --requires(查询包安装依赖) 校验： ​ rpm -V 导入GPG秘钥文件：rpm --import GPG秘钥文件 rpm -K 用于手动检查包的来源安全性和文件完成性信息，可选选项--nodigest(不检查完整性)--nosignature(不检查来源安全性签名) 数据库重建： ​ rpm --initdb、--rebuilddb ntsysv命令：图形化显示所要启动的服务，RHEL系 修改/etc/init/start-ttys.conf关闭不必要的tty，修改这个位置，即可关闭不必要的tty env ACTIVE_CONSOLES=/dev/tty[1-6] echo \"net.ipv4.tcp_syncookies = 1\" >> /etc/sysctl.conf可以加强对抗syn flood的能力，使用sysctl -p生效 修改history的记录数量，使用source /etc/profile即可生效 安装ntp ，为用户加入crontab (-e)计划/usr/sbin/ntpdate ntp.api.bz，可以使用dig ntp.api.bz来查看(dig在centos中所属bind-tools包) Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-16 16:13:52 "},"Linux/Linux启动流程、内核、grub、模块、内核的编译、anaconda自动化.html":{"url":"Linux/Linux启动流程、内核、grub、模块、内核的编译、anaconda自动化.html","title":"Linux启动流程、内核、grub、模块等","keywords":"","body":"1. Linux启动流程2. Linux内核3. anaconda自动化安装脚本4. 小练习1. Linux启动流程 POST --> Boot Sequence --> bootloader(MBR) --> Kernel --> 加载rootfs --> switchroot --> /sbin/init --> (配置文件：/etc/inittab, /etc/init/*.conf) --> 根据init配置文件设置默认运行级别 --> 运行系统初始化脚本/etc/rc.d/rc.sysinit，完成系统初始化 --> 开启或关闭用户选定的对应运行级别下所对应的服务 --> 启动终端，打印登录提示符 POST：检测各个硬件设备是否存在而且能够正常运行起来，实现这一自检功能的是主板上 CMOS芯片上的BIOS，主要机器一通电，CPU就会自动加载该系统，从而实现硬件的初始化. Boot Sequence：选择要启动的硬件设备以加载MBR，然后读取该设备MBR里的bootloader，该顺序可以在BIOS中的boot选项卡中设置. bootloader(MBR)：提供一个可视化菜单给用户，让用户去选择要启动的系统或不同的系统内核版本，然后把用户选择的内核版本加载至RAM中的特定空间，接着在RAM中解压、展开，而后把系统控制权移交给内核. grub是bootloader中的一种，此外还有LILO，此处将对grub进行说明 grub 0.x又称为grub legacy，而grub 1.x被称为grub2. 为了打破MBR中只有446Bytes用于存放bootloader这一限制，grub是通过三个阶段来实现加载内核的. stage1：存放于MBR的前446Bytes，用于加载stage1.5阶段，目的是为了识别并驱动stage2(或者/boot)所在分区的文件系统； stage1.5：存放于MBR之后的扇区，加载stage2所在分区的文件系统驱动，让stage1中的bootloader能识别stage2所在分区的文件系统； stage2：存放于磁盘分区之上，具体存放于/boot/grub目录之下，主要用于加载内核文件(vmlinuz-VERSION-RELEASE)以及ramdisk这个临时根文件系统(centos5,6中的initrd-VERSION-RELEASE.img或centos7中的initramfs-VERSION-RELEASE.img). grub功能及用途 （1）提供菜单并提供交互式接口 ​ e：编辑模式 c：命令行模式（cli） （2）加载用户选择的操作系统或者内核，允许传递参数给内核，允许隐藏菜单 （3）为菜单提供保护机制，为编辑菜单提供保护机制，为启用内核或者操作系统提供认证 grub的配置文件目录/boot/grub/grub.conf链接文件/etc/grub.conf -> ../boot/grub/grub.conf 配置项参数： ​ default=[index]：设定默认启动的菜单项，菜单项从0开始编号 ​ timeout=[num]：设定菜单项等待选择的时间，单位为秒 ​ splashimage=(hd0,0)/grub/splash.xpm.gz：设定菜单的背景图片，格式较为特殊 ​ hiddenmenu：隐藏菜单 ​ password [--md5] STRING：菜单编辑认证 ​ 该md5值可以使用grub-md5-crypt命令生成 ​ title TITLE：自定义菜单项的标题 ​ root (hd#,#)：grub查找stage2以及Kernel文件所在的设备分区 ​ kernel /PATH/TO/VMLINUXZ [parameters]：所要启动的内核 ​ 常用参数：ro（只读方式），root=UUID=xxx（指明/sbin/init所在分区信息），quite ​ initrd /PATH/TO/INITRAMFS：内核所匹配的ramfs文件 ​ password [--md5] STRIN：为所要启动的系统或者内核提供认证 手动在grub命令行接口启动服务： ​ grub > root (hd#,#) ​ grub > kernel /vmlinuz-VERSION-release ro root=/dev/DEVICE ​ grub > initrf /initramfs-VERSION-relaese.img ​ grub > boot grub其他 进入单用户模式： （1）编辑grub菜单（选定要编辑的菜单，然后使用e命令） （2）选定Kernel后附加 1，s，S或者single都可以 （3）最后在Kernel所在行，使用b命令 * grub的安装/修复： （1）grub-install，grub-install --root-directory=ROOT /dev/DISK （2）grub命令行(按下ESC键进入)： ​ grub > root (hd#,#) ​ grub > setup (hd#) （3）载入安装光盘，进入救援模式（boot: linux rescue）或者直接选定，类似于winpe # 切换根 chroot /mnt/sysimage # 执行grub-install命令 grub-install --root-directory=/ /dev/sda # 退出重启即可 练习时破坏bootloader分区使用的命令：dd if=/dev/zero of=/dev/sda bs=200 count=1,sync ramdisk：ramdisk是用于实现系统初始化的、基于内存的磁盘设备，即加载至内存的某一段空间后把内存当磁盘使用，并在内存中作为临时根文件系统提供给内核使用，帮助内核挂载真正的根文件系统。而之所以能够帮助内核挂载根文件系统是因为在ramdisk这个临时文件系统的/lib/modules目录下有真正的根文件系统所在设备的驱动程序. ramdisk文件的管理 （1）mkinitrd命令，为当前内核重新制作remdisk文件 options： [--preload ] # initramfs所提供要预先装载的模块. [--with=] # 除了默认的模块还需要装载的模块. 例子：mkinitrd /boot/initramfs-${uname -r }.img ${uname -r} （2）dracut命令 例子：dracut /boot/initramfs-${uname -r}.img ${uname -r} Kernel：Kernel自身初始化，其主要作用有： 探测可识别到的所有硬件设备**bootloader将系统控制权移交给内核，探测bootloader留下的资源等 加载硬件驱动程序，即加载真正的根文件系统所在设备的驱动程序（有可能会借助于ramdisk加载驱动）**内核探测出各项资源后，开启或关闭一些进程 以只读方式挂载根文件系统；**如果有借助于ramdisk这个临时文件系统（虚根），则在这一步之后会执行根切换，否则不执行根切换 运行用户空间的第一个应用程序：/sbin/init.**到这里内核空间的的启动流程就结束了，而接下来是用户空间完成后续的系统启动流程 /sbin/init(用户空间的第一个程序)：虽然CentOS 5、CentOS 6以及CentOS 7的init配置 文件各不相同，一般配置文件：/etc/inittab, /etc/init/*.conf) ，但总体的启动流程是不变的. 根据init的配置文件设置默认运行级别 CentOS 5：初始化程序init是SysV init，其配置文件为：/etc/inittab CentOS 6：初始化程序init是upstart（模仿Ubuntu启动程序），其配置文件为：/etc/inittab， /etc/init/*.conf，也就是upstart将配置文件拆分成多个，在/etc/init/目录下以conf结尾的都是upstart风格的配置文件，而/etc/inittab仅用于设置默认运行级别 ​ *.conf文件为upstart风格的配置文件，rcS.conf,rc.conf,start.ttys.conf CentOS 7：初始化程序init是systemd，其配置文件为：/usr/lib/system/systemd/, /etc/systemd/system/* 运行级别（0-6） ​ 0：关机模式，shutdown，对应poweroff.target ​ 1：单用户模式(single user)：不需要通过认证，登录进去之后为root用户身份，属于维护模式，对应rescue.target ​ 2：多用户模式(multi user)：会启动网络功能，但不会启动NFS，是维护模式，对应multi-user.target ​ 3：多用户模式(multi user)：为完全功能模式，提供文本界面（minimal install default），对应multi-user.target ​ 4：预留级别，目前无特别使用目的，但习惯上以同3级别功能来使用，对应multi-user.target ​ 5：多用户模式(multi user)：为完全功能模式，提供图形界面，对应graphical.target ​ 6：重启模式，reboot，对应reboot.target 获取当前运行级别：runlevel或者who -r 级别之间的切换：systemctl isolate TYPE.target或者init RUNLEVEL 查看当前系统所有运行级别：systemctl list-units -t target -a 获取系统默认运行级别：systemctl get-default 修改当前系统默认运行级别：systemctl set-default TYPE.target 切换紧急救援模式：systemctl rescue 切换emergency模式：systemctl emergency 其他常用命令： ​ 关机：systemctl poweroff或者systemctl halt ​ 挂起：systemctl suspend ​ 快照：systemctl hibernate ​ 挂起并快照：systemctl hybrid-sleep 补充 /etc/inittab文件 对于CentOS5/6： 每行定义一种action以及与之对应的process： 格式：id:runlevel:action:process 各字段解释： id：一个任务的标识符； runlevel：在哪些级别下启动该任务；格式可以是#,###,也可以为空(表示所有级别)； action：在什么条件下启动该任务； process：任务command； action种类： wait：等待切换至该任务所在的级别时执行一次； respawn：一旦该任务终止，就会重新启动这个任务； initdefault：设定默认运行级别；此时process是省略掉的； sysinit：设定系统初始化方式，这里一般指定为/etc/rc.d/rc.sysinit脚本文件； 例如： id:3:initdefault://设置默认运行级别，此处设置为3； 注意： CentOS 7使用target代替了runlevel，也就是在CentOS 7系列已经没有了运行等级这一概念了。而如果需要设置target则可参考该文件的后两行注释，详情见/etc/inittab文件 运行系统初始化脚本/etc/rc.d/rc.sysinit，完成系统初始化 CentOS5/6 ​ ①设置主机名； ​ ②设置欢迎信息； ​ ③激活udev和selinux； ​ ④挂载/etc/fstab文件中定义的所有文件系统； ​ ⑤检测根文件系统，以读写方式重新挂载根文件系统； ​ ⑥设置系统时钟； ​ ⑦根据/etc/sysctl.conf文件来设置内核参数； ​ ⑧激活lvm及软raid设备； ​ ⑨激活swap设备； ​ ⑩加载额外设备的驱动程序（因为内核只加载根文件系统所在分区的驱动程序）； ​ ⑪清理操作； 注意： CentOS7中无，欢迎信息文件为/etc/issue，文件内容详解https://www.cnblogs.com/cnjavahome/p/8476462.html 2. Linux内核 内核设计体系：单内核和微内核 linux采用的是单内核设计，但其充分借鉴了微内核体系设计的优点，为内核引入了模块化机制. ​ 内核的组成部分： ​ Kernel：内核核心部分，一般为bzimage压缩镜像格式，位于/boot目录，其名称为vmlinuz-VERSION-release ​ Kernel object(*.ko文件)：内核对象，即内核模块，一般位于/lib/modules/VERSION-release ​ ramdisk文件：CentOS5：/boot/initrd-VERSION-release，CentOS6：/boot/initramfs-VERSION-release ​ 编译内核所用到的标识： ​ [ ]：N ​ ：Module ​ [*]：Y 编译进内核 内核信息的获取，使用命令uname -r 内核模块查看命令：lsmod（显示信息来源于/proc/module），modinfo（例：modinfo [-F] [-n] ipt_REJECT） 内核模块的动态装卸载： modprobe [-r] module_name，选项-r代表卸载模块 insmod [filename] [module options]...，filename表示模块文件的路径；rmmod [module_name]，卸载. ldd命令：ldd [OPTION]... FILE... 打印二进制程序文件的依赖模块 使用ldd [二进制可运行文件绝对路径] | grep -o \"/lib[^[:space:]]*\"可以快速查看依赖模块的路径 内核的简单编译流程： （1）获取目标主机上硬件设备的相关信息 # CPU有关信息 cat /proc/info lscpu x86info -a # 详细 # PCI设备 lspci lsusb lsblk # 获取所有硬件设备信息 hal-device （2）根据平台去官网https://www.kernel.org/下载适合的内核 （3）准备编译环境，所需包组Development Tools，Server Platform Development，可能还需要ncurses-devel，如需使用窗口界面进行内核编译，还需要Desktop Platform Development包组 （4）解压内核至/usr/src目录，并创建一个软连接ln -sv linux （5）配置内核选项，使用tui来配置make menuconfig （6）编译，make [-j #]，其中#代表线程数，设置该参数可以进行多线程编译 几种编译模式： 支持以更新模式进行配置：在已有的.config文件基础上进行修改配置 （a）make config：基于命令行遍历的方式去配置内核中的每个选项 （b）make menuconfig ： 基于cureses的文本配置窗口 （c）make gconfig：基于GTK开发环境的窗口界面，所属包组桌面平台开发 （d）make xcongfig：基于QT开发环境的窗口界面 支持全新配置模式进行配置： （e）make defconfig：基于内核为目标平台提供的默认配置进行配置 （f）make allnoconfig：所有选项均不选中 部分编译： （1）只编译子目录中的相关代码 cd /usr/src/linux make PATH/TO/DIR （2）只编译某个特定的模块 cd /usr/src/linux make PATH/TO/DIR/file.ko （7）make modules_install，安装内核模块 （8）make install，安装内核 内核信息输出的伪文件系统 /proc内核信息和统计信息的输出接口，其配置接口为/proc/sys 在/proc/sys目录中 ​ net/ipv4/ip_forward相当于net.ipv4.ip_forward 参数设置方式： （1）sysctl命令：用于查看/proc/sys目录下的参数的值 ​ 查看所有内核参数：sysctl -a ​ 查看单个内核参数：sysctl VARIABLE ​ 修改：sysctl -w VARIABLE=value （2）使用文件系统相关命令，cat和echo ​ 查看：cat /proc/sys/PATH/TO/FILE ​ 修改：echo \"value\" > /proc/sys/PATH/TO/FILE 注意：以上两种方式均为当前运行内核有效，重启后无效 （3）修改配置文件使其永久有效/etc/sysctl.conf和/etc/sysctl.d/*.conf ​ 立即生效的方式：sysctl -p /PATH/TO/CONF_FILE 3. anaconda自动化安装脚本 CentOS系统安装流程（所使用的安装程序：anaconda）： 概括流程： BootLoader --> kernel(initrd(rootfs)) --> anaconda(有tui和gui配置窗口) MBR：boot.cat文件 Stage2：isolinux/isolinux.bin ​ 配置文件：isolinux/isolinux.cfg 每个对应菜单选项： ​ 加载内核：isolinux/vmlinuz ​ 向内核传递参数：append initrd=initrd.img 装载根文件系统，并启动anaconda 安装阶段： ​ 对目标磁盘进行分区和格式化操作 ​ 将指定的软件包安装至目标位置 ​ 安装bootloader 首次启动： ​ iptables ​ selinux ​ core dump 安装引导选项（1）： text：将以文本方式进行安装 method：手动指定安装的方法 ​ 与网络相关的引导选项：ip，netmask，gateway，dns 例如： linux method ip=192.168.1.43 netmask=255.255.255.0 gateway=192.168.1.1 dns=192.168.1.1 ​ 远程访问功能相关配置：vnc和vncpassword=YOUR_VNC_PASSWORD rescue：启用紧急救援模式 一般使用ISO光盘镜像安装的系统会在用户根目录生成一个名为anaconda-ks.cfg的文件，该文件即为kickstart文件 安装引导选项（2）： ks：指明kickstart文件的位置 ks= ​ DVD drirve：ks=cdrom:/PATH/TO/KICKSART_FILE ​ 此外还支持hard driver，http server，FTP server和nfs server等 kickstart文件的参数及格式（详情参见https://anaconda-installer.readthedocs.io/en/latest/index.html）： （1）命令段：指定各种安装前的配置选项，如键盘类型，语言编码等... （2）程序包段：指明要安装的程序包，包组，和一些不需要安装的程序包 %package # start @group_name # 包组 package # 所要安装的包 -package # 不需要安装的包 %end # end （3）脚本段： ​ %pre：安装前所要运行的脚本 ​ %post：安装后所要运行的脚本 其他参见anaconda-kick部分参数.txt文件 最后使用ksvalidatorfilename来检查语法错误 通过网络http服务器中kickstart文件安装 （1）挂载光盘镜像，开进进入安装界面 （2）按下ESC键进入boot命令行，输入以下命令： linux ip=192.168.1.231 netmask=255.255.255.0 gateway=192.168.1.1 ks=https://192.168.1.1/centos6.x86_64.cfg 即可 通过光盘镜像进行引导安装 （1）挂载光盘，将光盘根目录下的isolinux文件复制出来 （2）将复制出来的isolinux文件夹内的所有文件授予写权限 cd isolinux/ chmod +w * （3）将准备好的anaconda-ks.cfg文件放在与isolinux文件夹同级的目录之下 （4）制作光盘镜像 mkisofs -R -J -T -v --no-emul-boot --boot-load-size 4 --boot-info-table -V \"CentOS 6 x86_64 boot\" -c isolinux/boot.cat -b isolinux/isolinux.bin -o /root/boot.iso myboot/ # 输出文件boot.iso，isolinux和ks文件置于myboot目录下 （5）打开目标机器并挂载上一步输出的boot.iso文件，按下tab键输入以下内容： vmlinuz initrd=initrd.img ks=cdrom:/anaconda-ks.cfg ip=YOUR_IP netmask=YOUR_NETMASK 或者直接修改isolinux目录下的isolinux.cfg文件，避免手动输入ks仓库地址 append initrd=initrd.img ks=cdrom:/anaconda-ks.cfg 然后重新使用第四步中的命令重新生成iso镜像文件即可 4. 小练习 自行创建一个Linux引导系统，并且能够使用 （1）增加一块目标硬盘(虚拟硬盘) （2）进行分区和格式化操作 fdisk /dev/sdb # 创建三个分区，依次是boot，swap和根分区 kpartx /dev/sdb # 强制让内核重读分区 # 格式化分区 mke2fs -t ext4 /dev/sdb1 # 同理/dev/sdb3 mkswap /dev/sdb2 # 格式化swap分区 （3）分别挂载sdb1和sdb3至/mnt/boot和/mnt/sysroot （4）在boot目录下安装grub grub-install --root-directory=/mnt /dev/sdb （5）拷贝vmlinuxz文件和initramfs文件到boot目录 cp /boot/vmlinuz-2.6.32-754.el6.x86_64 ../vmlinuz cp /boot/initramfs-2.6.32-754.el6.x86_64.img initramfs.img （6）编辑/grub/grub.conf文件，内容如下： default=0 timeout=5 title CentOS6_TEST root (hd0,0) kernel /vmlinuz ro root=/dev/sda3 selinux=0 init=/bin/bash # 原内核中的seLinux应该先取消 initrd /initramfs.img （7）为sysroot创建linux文件目录 mkdir -pv etc bin sbin lib lib64 dev proc tmp var usr home root sys media mnt （8）使用ldd命令放入必要二进制文件 ldd /bin/bash | grep -o \"/lib[^[:space:]]*\" cp ××× {相应目录下} # 使用chroot测试 （9）重新装载到目标机器即可使用 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-28 09:40:30 "},"Linux/Linux服务器.html":{"url":"Linux/Linux服务器.html","title":"Linux服务器","keywords":"","body":"1. 查看服务器端口(端口占用检测.md)2. 使用ssh无密码登录其他远程主机3. CentOS最小化安装中使用gnome桌面以及配置VNC进行远程桌面连接（其他桌面环境）4. nginx安装与使用(环境CentOS7)4.1. 使用源码安装4.2. 使用YUM安装4.3. 基础用法4.4. 其他设置4.4.1. 开机自启动4.5. 添加为系统服务5. Apache安装与使用（安装环境CentOS7）5.1. 使用YUM安装5.2. 配置文件详情5.3. Apache的使用6. DHCP服务 This is Linux服务器 StudyNote. 1. 查看服务器端口(端口占用检测.md) netstat -tunlp|grep [服务] # t:tcp u:udp n:仅显示地址,而不显示主机名,可加速查询速度 l:Listen p:显示建立相关链接的程序名 nmap localhost # 扫描本机所启用的端口,默认只扫描TCP nmap -sTU localhost # s:scan T:tcp u:udp 其他参数:-sP:以ping方式扫描 -sO:以ip协议进行扫描 -PT:使用TCP里面的ping -PI:使用ping(带有ICMP数据包)来进行扫描 netcat命令 lsof -i:[端口号port] # 查看当前用户的端口所对应的相关信息,不加:扫描全部 2. 使用ssh无密码登录其他远程主机 使用ssh-keygen命令来生成私钥和公钥 ssh-keygen (-t rsa/dsa) 默认为rsa加密方式 # 生成的公钥私钥放置于家目录的.ssh目录当中 将生成的公钥文件上传并附加到远程服务器的信任文件当中去 # Ubuntu 系统下是known_hosts cat id_rsa.pub >> known_hosts # 然而在CentOS系统下文件是authorized_keys cat id_rsa.pub >> authorized_keys 使用scp上床到远程服务器上，或者使用ssh-copy-id -i /root/.ssh/id_rsa.pub centos自动上传到远程服务器的相应文件当中去 3. CentOS最小化安装中使用gnome桌面以及配置VNC进行远程桌面连接（其他桌面环境） # 获取当前默认选项 systemctl get-default # 如果返回值为:multi-user.target 命令行输入下面指令切入到图形界面: systemctl set-default graphical.target # 如果需要改回命令行模式,输入如下指令 systemctl set-default multi-user.target # 或者设置防火墙规则，这里为了方便起见 systemctl stop firewalld yum update yum groupinstall \"GNOME Desktop\" \"X Window System\" \"Desktop\" yum install tigervnc-server tigervnc vnc vnc-server # 拷贝配置文件到相应目录。并按照配置文件说明修改相关内容 cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service vncpasswd # 对当前用户的vnc设置密码，或者第一次运行vncserver :1 vim /etc/libvirt/qemu.conf # 修改配置文件 # 去掉以下两行的注释 vnc_password = \"123456\" vnc_listen = \"0.0.0.0\" # 重新加载systemd systemctl daemon-reload # 启用vnc到指定接口 vncserver :1 # 最后使用vnc viewer客户端进行连接即可 4. nginx安装与使用(环境CentOS7) 4.1. 使用源码安装 ​ 安装编译工具及库文件 yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel 编译安装PCRE库 cd /usr/local/src wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.43.tar.gz tar -zxvf pcre-8.37.tar.gz cd pcre-8.43 ./configure make make install 安装zlib库 cd /usr/local/src wget http://zlib.net/zlib-1.2.11.tar.gz tar -zxvf zlib-1.2.11.tar.gz cd zlib-1.2.8 ./configure make make install 安装ssl cd /usr/local/src wget https://www.openssl.org/source/openssl-1.0.2s.tar.gz tar -zxvf openssl-1.0.2s.tar.gz 安装nginx cd /usr/local/src wget http://nginx.org/download/nginx-1.9.9.tar.gz tar -zxvf nginx-1.9.9.tar.gz cd nginx-1.9.9.tar.gz ./configure --sbin-path=/usr/local/nginx/sbin \\ --with-http_stub_status_module \\ --conf-path=/usr/local/nginx/nginx.conf \\ --pid-path=/usr/local/nginx/nginx.pid \\ --with-http_ssl_module \\ --with-pcre=/usr/local/src/pcre-8.43 \\ --with-zlib=/usr/local/src/zlib-1.2.11 \\ --with-openssl=/usr/local/src/openssl-1.0.2s \\ --prefix=/usr/local/webserver/nginx # --with-pcre=/usr/src/pcre-8.34 指的是pcre-8.34 的源码路径。 # --with-zlib=/usr/src/zlib-1.2.7 指的是zlib-1.2.7 的源码路径。 # --prefix指定nginx安装目录 make make install Nginx配置及文件 * ```bash [root@localhost conf]\\# /usr/sbin/groupadd www [root@localhost conf]\\# /usr/sbin/useradd -g www www # /usr/local/webserver/nginx/conf/nginx.conf文件内容： user www www; worker_processes 2; #设置值和CPU核心数一致 error_log /usr/local/webserver/nginx/logs/nginx_error.log crit; #日志位置和日志级别 pid /usr/local/webserver/nginx/nginx.pid; #Specifies the value for maximum file descriptors that can be opened by this process. worker_rlimit_nofile 65535; events { use epoll; worker_connections 65535; } http { include mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" $http_x_forwarded_for'; #charset gb2312; server_names_hash_bucket_size 128; client_header_buffer_size 32k; large_client_header_buffers 4 32k; client_max_body_size 8m; sendfile on; tcp_nopush on; keepalive_timeout 60; tcp_nodelay on; fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 128k; gzip on; gzip_min_length 1k; gzip_buffers 4 16k; gzip_http_version 1.0; gzip_comp_level 2; gzip_types text/plain application/x-javascript text/css application/xml; gzip_vary on; #limit_zone crawler $binary_remote_addr 10m; #下面是server虚拟主机的配置 server { listen 80;#监听端口 server_name localhost;#域名 index index.html index.htm index.php; root /usr/local/webserver/nginx/html;#站点目录 location ~ .*\\.(php|php5)?$ { #fastcgi_pass unix:/tmp/php-cgi.sock; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; } location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|ico)$ { expires 30d; # access_log off; } location ~ .*\\.(js|css)?$ { expires 15d; # access_log off; } access_log off; } } ``` 启动过程中遇到的问题 # 在虚拟机centos7上安装nginx之后虚拟机内能访问，真机不能访问，修改iptables配置也不起作用，最后上网查找了资料后才发现centos的防火墙改成了firewall,不再叫iptables,开放端口的方法如下： firewall-cmd --zone=public --add-port=80/tcp --permanent # 重启防火墙 systemctl stop firewalld.service systemctl start firewalld.service #　解决CentOS7出现的”Failed to start firewalld.service”问题 systemctl unmask firewalld.servic #　然后再启动”systemctl start firewalld.service”即可解决问题没有报错。 4.2. 使用YUM安装 # 安装gcc环境 yum install gcc-c++ # 分别安装pcre，zlib，openssl yum install -y pcre pcre-devel yum install -y zlib zlib-devel yum install -y openssl openssl-devel # 安装nginx服务，从官网下载源码进行安装， 4.3. 基础用法 启动：./nginx 停止： ./nginx -s quit:此方式停止步骤是待nginx进程处理任务完毕进行停止 ./nginx -s stop:此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程 重启./nginx -s quit ./nginx 4.4. 其他设置 4.4.1. 开机自启动 即在rc.local增加启动代码就可以了。 vi /etc/rc.local 增加一行 /usr/local/nginx/sbin/nginx 设置执行权限： chmod 755 rc.local 第二种方法（基于系统服务，所以要先进行下面那个步骤）： chkconfig nginx on 4.5. 添加为系统服务 vi /etc/init.d/nginx 插入以下内容： #! /bin/bash # chkconfig: - 85 15 PATH=/usr/local/nginx DESC=\"nginx daemon\" NAME=nginx DAEMON=$PATH/sbin/$NAME CONFIGFILE=$PATH/conf/$NAME.conf PIDFILE=$PATH/logs/$NAME.pid SCRIPTNAME=/etc/init.d/$NAME set -e [ -x \"$DAEMON\" ] || exit 0 do_start() { $DAEMON -c $CONFIGFILE || echo -n \"nginx already running\" } do_stop() { $DAEMON -s stop || echo -n \"nginx not running\" } do_reload() { $DAEMON -s reload || echo -n \"nginx can't reload\" } case \"$1\" in start) echo -n \"Starting $DESC: $NAME\" do_start echo \".\" ;; stop) echo -n \"Stopping $DESC: $NAME\" do_stop echo \".\" ;; reload|graceful) echo -n \"Reloading $DESC configuration...\" do_reload echo \".\" ;; restart) echo -n \"Restarting $DESC: $NAME\" do_stop do_start echo \".\" ;; *) echo \"Usage: $SCRIPTNAME {start|stop|reload|restart}\" >&2 exit 3 ;; esac exit 0 设置执行权限 chmod a+x /etc/init.d/nginx 注册成服务 chkconfig --add nginx 5. Apache安装与使用（安装环境CentOS7） 5.1. 使用YUM安装 安装httpd(apache服务的软件叫做httpd) yum install -y httpd 将Apache服务添加到 开机自启中 # 打开apache服务 systemctl start httpd # 设置开机自启 systemctl enable httpd 5.2. 配置文件详情 文件存放目录 服务目录 /etc/httpd 主配置文件 /etc/httpd/conf/httpd.conf 网站数据目录 /var/www/html 访问日志 /var/log/httpd/access_log 错误日志 /var/log/httpd/error_log httpd.conf中的有用设置 #服务器根目录 ServerRoot \"/etc/httpd\" #端口 #Listen 12.34.56.78:80 Listen 80 #域名+端口来标识服务器，没有域名用ip也可以 #ServerName www.example.com:80 #不许访问根目录 AllowOverride none Require all denied # 文档目录 DocumentRoot \"/var/www/html\" # 对 /var/www目录访问限制 AllowOverride None # Allow open access: Require all granted # 对/var/www/html目录访问限制 　　 Options Indexes FollowSymLinks 　　 AllowOverride None 　　Require all granted # 默认编码 AddDefaultCharset UTF-8 #EnableMMAP off EnableSendfile on # include进来其它配置文件 IncludeOptional conf.d/*.conf 5.3. Apache的使用 使用systemctl [option] httpd来停止，重启，开启服务 修改 网站数据的主目录 # 设置网站数据的主目录 mkdir /wwwroot/www echo \"hello suofeiya from new DIR\" > /wwwroot/www/index.html # 修改DocumentRoot地址为自定义地址 6. DHCP服务 期配置文件结尾以分号“;”分开（除{}），注意！ Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Linux/Linux状态信息.html":{"url":"Linux/Linux状态信息.html","title":"Linux状态信息","keywords":"","body":"1. 进程信息查看1.1. ps命令1.2. pgrep和pkill命令()1.3. kill和killall命令1.4. top命令1.5. pmap命令1.6. dstat命令 This is Linux状态信息 StudyNote. 1. 进程信息查看 1.1. ps命令 常用选项： aux： 参数a为所有与终端相关的进程，x为终端无关的进程，u为以用户为中心组织进程状态信息查看 结果列选项参数说明： ​ VSZ：虚拟内存集 ​ RSS：常驻内存集 ​ STAT ​ R：running ​ S：可中断进程 ​ D：不可终端进程 ​ T：stop ​ Z：zombie ​ +：前台进程 ​ I：多线程进程 ​ N：低优先级进程 ​ ：高优先级进程 ​ s：session loader -ef 参数-e表示显示所有进程，-f表示显示详细进程信息 -eFH 参数-F显示完整格式的进程信息（比-f选项多了C(CPU利用率)和PSR(进程运行于那个CPU之上)），-H以层级结构显示 -eo 参数-o可以自定义要显示的字段列表，以逗号分隔 1.2. pgrep和pkill命令() 语法：pgrep [options] pattern 参数： -u UID：有效的用户，列出指定用户UID下的进程pid -t TERMINAL：与指定终端相关的进程pid -l：显示出进程名称 -a：显示出完整的进程名称 -P：显示进程的子进程 pkill：根据进程名，取其pid 1.3. kill和killall命令 语法：kill [-s signal|-p] [-q sigval] [-a] [--] pid... 常用信号及代码： ​ 1）SIGHUP：无需关闭进程而重读配置文件 ​ 2）SIGINT：终止正在运行的程序，相当于Ctrl+C ​ 9）SIGKILL：杀死运行中的进程（强制，是操作系统从内核级别强制杀死一个进程） ​ 15）SIGTERM：（操作系统发送一个通知告诉应用主动关闭） ​ 18）SIGCONT：继续 ​ 19）SIGSTOP：停止 常用参数： ​ -l：列出当前系统上可用的信号 ​ -s：可以使用信号名称来终止程序，允许简写和全称 killall：kill processes by name 语法：killall [-s, --signal signal] name 1.4. top命令 排序规则 P：以CPU的占用率来排序 M：以内存的占用率来排序 T：以积累占用CPU的时间来排序 首部信息 l：显示或隐藏启动时间（uptime）和load average（显示过去1min，5min，15min的平均负载） t：显示或隐藏task和cpu的信息 m：显示或者隐藏内存有关信息 其他命令 s：修改刷新时间间隔 k：终止指定进程 启动选项 -d：指定刷新间隔，默认为3秒 -b：以批次方式显示 -n #：显示多少批次 h：显示详细帮助 其他类似命令：glances（可以远程查看），htop（top的升级版本） 1.5. pmap命令 语法：pmap [options] PID [PID ...] report memory map of a process 常用参数： ​ -x：以详细信息方式查看 补充：另外一种查看方式：cat /proc/PID/maps 1.6. dstat命令 dstat命令是一个用来替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具，是一个全能系统信息统计工具 常用选项： -c：显示CPU系统占用，用户占用，空闲，等待，中断，软件中断等信息 -C：当有多个CPU时候，此参数可按需分别显示cpu状态，例：-C 0,1 是显示cpu0和cpu1的信息 -d：显示磁盘读写数据大小 -D hda,total：include hda and total -n：显示网络状态 -N eth1,total：有多块网卡时，指定要显示的网卡 -l：显示系统负载情况 -m：显示内存使用情况 -g：显示页面使用情况 -p：显示进程状态 -s：显示交换分区使用情况 -S：类似D/N -r：I/O请求情况 -y：系统状态 --ipc：显示ipc消息队列，信号等信息 --socket：用来显示tcp udp端口状态 -a：此为默认选项，等同于-cdngy -v：等同于 -pmgdsc -D total --output 文件：此选项也比较有用，可以把状态信息以csv的格式重定向到指定的文件中，以便日后查看例：dstat --output /root/dstat.csv & 此时让程序默默的在后台运行并把结果输出到/root/dstat.csv文件中 较为详细信息参见：https://blog.csdn.net/sinat_34789167/article/details/80986709 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-04 19:01:10 "},"Linux/Linux网络客户端工具.html":{"url":"Linux/Linux网络客户端工具.html","title":"Linux网络客户端工具","keywords":"","body":" This is Linux网络客户端工具 StudyNote. wget命令 wget -o example.html https://www.example.com # 将网页保存为本地网页文件 wget -O https://www.example.com/index.html # 将网页保存为本地网页文件，并将 URL 的最后部分当作文件名 # 其他选项 -b # 启用后台下载 -q # 启用静默下载 -c # 启用续传 --limit-rate SPEED # 限速 # 常用选项 wget -O - -q URL # 不下载文件，只将其打印在终端 详情参见：http://www.ruanyifeng.com/blog/2019/09/curl-reference.html curl命令 curl -o [local_dir] remote_url # 指定远端文件目录和本地文件目录 curl \"https://www.{baidu,douban}.com\" -o \"site_#1.txt\" # 后面的#1代表前面的参数 # FTP文件上传 curl -T local_files ftp://user:passwd@remote_ip:port/data # 或者使用curl -T local_files user:passwd ftp://remote_ip:port/data # 其他选项 -A/--user-agent # 设置用户代理标识 --basic # 使用HTTP基本认证 --tcp-nodelay # 使用TCP_NODELAY选项 -e/--referer # 设置来源网站 --cacert # 设置ssl证书 --compressed # 要求返回压缩格式 -H/--header # 设置首部信息 --limit-rate # 限速 -u/--user # 设置传输服务器的账号和密码 -0 # 使用HTTP1.0协议 详情参见：http://www.ruanyifeng.com/blog/2019/09/curl-reference.html ping命令 # ping - send ICMP ECHO_REQUEST to network hosts # ICMP: Internet Control Message Protocol # 参数： -c \\# # 发送的ping包个数 -w \\# # ping命令超时时长 -W \\# # 一次ping操作中，等待对方响应的超时时长 -s \\# # 指明ping包报文大小 hping命令 # 常用参数： --fast --faster --flood 详情参见：https://github.com/antirez/hping lftp命令 lftpget命令 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-04 19:17:13 "},"Linux/Linux网络配置.html":{"url":"Linux/Linux网络配置.html","title":"Linux网络配置","keywords":"","body":"1. IP、netmask、gateway、DNSserver配置方式1.1. 1）静态指定1.2. 2）动态分配2. ABC类网络私网地址 This is Linux网络配置 StudyNote. 1. IP、netmask、gateway、DNSserver配置方式 1.1. 1）静态指定 ifcfg 系列： ​ ifconfig：用来配置IP、NETMASK ​ route：配置路由 ​ netstat：网络状态以及统计数据查看 iproute 系列： ​ ip OBJECT： ​ addr：网络地址和子网掩码 ​ link：网络接口 ​ route：路由 ​ ss：网络状态以及统计数据查看 对于CentOS7：nm（Network Manager）系列： ​ nmtui：文本窗口工具 ​ nmcli：命令行工具 ​ 注意： DNS服务指定文件/etc/resolv.conf，本地主机名配置文件/etc/sysconfig/network 1.2. 2）动态分配 DHCP服务器 2. ABC类网络私网地址 私有网络ip范围： 类别 IP范围 网络数量 A 10.x.x.x/8 1 B 172.16-32.x.x/16 16 C 192.168.x.x/24 255 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-03 18:49:33 "},"Linux/Linux时间服务器.html":{"url":"Linux/Linux时间服务器.html","title":"Linux时间服务器","keywords":"","body":"1. Linux时间服务器(chrony)1.1. chrony的安装与配置1.2. 使用1.2.1. 服务器端配置1.2.2. 客户端配置1.3. chronyc命令1.4. 其他1.4.1. 手动修改本机时间1.4.2. 设置本机时区1. Linux时间服务器(chrony) NTP服务器：https://baike.baidu.com/item/NTP%E6%9C%8D%E5%8A%A1%E5%99%A8/8633994?fr=aladdin chrony官方站点：https://chrony.tuxfamily.org/ 与其它时间同步软件的对比：https://chrony.tuxfamily.org/comparison.html chrony 是网络时间协议（NTP）的通用实现. chrony 包含两个程序：chronyd 是一个可以在启动时启动的守护程序;chronyc 是一个命令行界面程序，用于监视 chronyd 的性能并在运行时更改各种操作参数. 1.1. chrony的安装与配置 yum -y install chrony systemctl enable chronyd systemctl start chronyd 默认配置文件 # 使用 pool.ntp.org 项目中的公共服务器。以server开，理论上想添加多少时间服务器都可以。 # Use public servers from the pool.ntp.org project. # Please consider joining the pool (http://www.pool.ntp.org/join.html). server 0.centos.pool.ntp.org iburst server 1.centos.pool.ntp.org iburst server 2.centos.pool.ntp.org iburst server 3.centos.pool.ntp.org iburst # 根据实际时间计算出服务器增减时间的比率，然后记录到一个文件中，在系统重启后为系统做出最佳时间补偿调整。 # Record the rate at which the system clock gains/losses time. driftfile /var/lib/chrony/drift # 如果系统时钟的偏移量大于1秒，则允许系统时钟在前三次更新中步进。 # Allow the system clock to be stepped in the first three updates if its offset is larger than 1 second. makestep 1.0 3 # 启用实时时钟（RTC）的内核同步。 # Enable kernel synchronization of the real-time clock (RTC). rtcsync # 通过使用 hwtimestamp 指令启用硬件时间戳 # Enable hardware timestamping on all interfaces that support it. #hwtimestamp * # Increase the minimum number of selectable sources required to adjust the system clock. #minsources 2 # 指定 NTP 客户端地址，以允许或拒绝连接到扮演时钟服务器的机器 # Allow NTP client access from local network. #allow 192.168.0.0/16 * Serve time even if not synchronized to a time source. server端即使没有从互联网同步到时间，也作为下级的时间服务器 #local stratum 10 # 指定包含 NTP 身份验证密钥的文件。 # Specify file containing keys for NTP authentication. #keyfile /etc/chrony.keys # 指定日志文件的目录。 # Specify directory for log files. logdir /var/log/chrony # 选择日志文件要记录的信息。 # Select which information is logged. #log measurements statistics tracking Aliyun官方ntp镜像及配置：https://developer.aliyun.com/mirror/NTP?spm=a2c6h.13651102.0.0.53322f70KNkgwZ 1.2. 使用 ntp的使用参考：https://www.cnblogs.com/jhxxb/p/10579816.html 1.2.1. 服务器端配置 服务器端配置仅需修改两处即可 # 自定义上级时间服务器地址 server s1a.time.edu.cn iburst server ntp.aliyun.com iburst # 允许NTP客户端可以访问的地址 allow 192.168.8.0/24 重启服务systemctl restart chronyd即可作为服务器端使用 同步： # 查看时间同步状态 timedatectl status # 开启网络时间同步 timedatectl set-ntp true 1.2.2. 客户端配置 客户端配置也只需修改两处即可 server 172.16.122.132 iburst # Allow NTP client access from local network. allow 172.16.122.132 重启服务. 自动同步命令和server端相同 1.3. chronyc命令 可以交互式使用，也可以加参数使用. 查看 # 查看 ntp_servers chronyc sources -v # 查看 ntp_servers 详细状态 chronyc sourcestats -v # 查看 ntp_servers 是否在线 chronyc activity -v # 查看 ntp 详细信息 chronyc tracking -v 1.4. 其他 1.4.1. 手动修改本机时间 使用date手动调节本地时间（存在误差，不推荐使用×） date -s \"2019-12-17 14:34:24\" # 或者使用 timedatectl set-time \"2019-12-17 14:34:24\" # 将时间写入bios，防止重启后修改的时间无效 hwclock -w 使用ntpdate命令同步 # 使用ntpdate命令首先要安装好ntp ntpdate -dv ntp.aliyun.com # -d表示开启debug，-v显示详细信息 1.4.2. 设置本机时区 相关时区知识： GMT(Greenwich Mean Time，格林威治标准时间): 是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。 UTC(Universal Time/Temps Cordonné 世界标准时间) CST(Central Standard Time 國家標準時間，一說中原標準時間); 中国标准时间（China Standard Time） GMT + 8 = UTC + 8 = CST 复制相应的时区文件，替换系统时区文件，或者创建链接文件 # 格式 cp /usr/share/zoneinfo///etc/localtime # 例如：在设置中国时区使用亚洲/上海（+8） cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 使用timedatectl设置 # timedatectl不加任何参数可以查看本机时间，统一时间，时区等有关信息，等同于timedatectl status timedatectl # 查看当前时区 date date -R # -R参数可以查看日期和时间 RFC 2822 格式 # 查看本机所有时区 ls /usr/share/zoneinfo # 或者使用 timedatectl list-timezones # 设置时区 timedatectl set-timezone Asia/Shanghai # 开启或关闭 NTP timedatectl set-ntp true/flase 使用tzselect交互式修改，直接在终端输入即可使用，使其永久生效，方法如下 #### TZ='Asia/Hong_Kong'; export TZ #### * 将以上内容添加到家目录下的`.profile`文件中(bash对应加到`.bash_profile`)，然后重新登出登入即可 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-17 14:59:56 "},"Linux/Linux日志管理系统.html":{"url":"Linux/Linux日志管理系统.html","title":"Linux日志管理系统","keywords":"","body":"1. Linux日志管理系统1.1. 系统常用日志1.2. 日志管理系统rsyslog1.2.1. 配置文件rsyslog.conf1.2.2. 将日志保存到mysql中1.2.3. 图形化web管理(loganalyzer)1. Linux日志管理系统 1.1. 系统常用日志 /var/log/message：系统信息日志，包含错误信息等 /var/log/secure：系统登录日志 /var/log/cron ：定时任务日志 /var/log/maillog：邮件日志 /var/log/boot.log：系统启动日志 日志类型分类（facility）： 标识 说明 auth pam产生的日志 authpriv ssh,ftp等登陆服务的验证信息 cron 时间任务相关 kern 内核 lpr 打印 mail 邮件 mark（syslog)-rsyslog 服务内部的信息，时间标示 news 新闻组 user 用户程序产生的相关信息 uucp unix to unix copy,unix主机之间相关的通讯 local 1～7 自定义的日志设备 日志优先级别（priority）： 级别 说明 debug 有调式信息的，日志信息最多 info 一般信息的日志，最常用 notice 最具有重要性的普通条件信息 warning 警告级别 err 错误级别，组织某个功能或者模块不能正常工作的信息 crit 严重级别，组织整个系统或者整个软件不能正常工作的信息 alert 需要立刻修改的信息 emerg 内核崩溃等严重信息 none 什么都不记录 1.2. 日志管理系统rsyslog 程序相关： 主程序：rsyslogd 主配置文件：/etc/rsyslog.conf，/etc/rsyslog.d/*.conf 服务脚本（centos6）：/etc/rc.d/init.d/rsyslog Unit File（centos7）：/usr/lib/systemd/system/rsyslog.service 1.2.1. 配置文件rsyslog.conf rsyslog的配置文件主要分为三个模块： MODULES：模块加载 GLOBAL DIRECTIVES：定义全局环境，格式模板 RULES：定义了记录日志的设施以及等级等信息 MODULES 加载imtcp和imudp模块，即可将rsyslogd作为日志服务器端 # .../etc/rsyslog.conf # Provides UDP syslog reception $ModLoad imudp $UDPServerRun 514 # Provides TCP syslog reception $ModLoad imtcp $InputTCPServerRun 514 # ... 保存退出，重启rsyslog服务systemctl resart rsyslog即可 RULES 定义格式：facility.priority Target Target可以保存至： 文件：记录日志事件于指定的文件中;通常应该位于/var/log目录下;文件路径之前的\"-\"表示异步写入; 用户：将日志事件通知给指定的用户;是通过将信息发送给登录到系统上的用户的终端进行的; 日志服务器：@host,把日志送往指定的服务器主机; host ：即日志服务器地址,监听在tcp或udp协议的514端口以提供服务; 管道： | COMMAND 例子： # Log all the mail messages in one place. mail.* -/var/log/maillog 将mail的所有级别日志级别异步存储到/var/log/maillog中去 # Everybody gets emergency messages *.emerg :omusrmsg:* 将所有软件产生的emerg级别的信息显示给用户，om表示输出模块，usrmsg表示用户信息，*代表所有用户 *.info;mail.none;authpriv.none;cron.none @172.16.122.132 将日志存储于远程主机172.16.122.132中，而不保存到本地日志文件中 1.2.2. 将日志保存到mysql中 安装rsyslog-mysql包 yum install -y rsyslog-mysql [root@localhost ~]\\# rpm -ql rsyslog-mysql /usr/lib64/rsyslog/ommysql.so /usr/share/doc/rsyslog-8.24.0/mysql-createDB.sql 使用rpm查询包产生的文件信息可以看出，一个是输出mysql模块文件，另一个是用于创建数据库表的数据库文件 导入数据库脚本 mysql 查看数据库表结构 mysql> use Syslog; mysql> SHOW TABLES; +------------------------+ | Tables_in_Syslog | +------------------------+ | SystemEvents | | SystemEventsProperties | +------------------------+ # 查看SystemEvents表结构 mysql> DESC SystemEvents; mysql> DESC SystemEventsProperties; 授予用户权限 mysql> GRANT ALL ON Syslog.* TO 'rsyslog'@'172.16.122.%' IDENTIFIED BY 'rsyslog'; mysql> FLUSH PRIVILEGES; 编辑rsyslog配置文件 #### # 启用模块 $ModLoad ommysql # 编辑规则 *.info;mail.none;authpriv.none;cron.none :ommysql:172.16.122.132,Syslog,rsyslog,rsyslog # 从左往右代表的是所使用的模块，主机地址，数据库名，用户名，密码 #### 重启mysql即可 1.2.3. 图形化web管理(loganalyzer) 官方站点：https://loganalyzer.adiscon.com/ 安装LNMP yum install -y httpd php php-mysql php-gd 将loganalyzer上传或者下载到服务器目录中 mkdir /var/www/html/loganalyzer wget http://download.adiscon.com/loganalyzer/loganalyzer-4.1.8.tar.gz tar xf loganalyzer-4.1.8.tar.gz cp -r loganalyzer-4.1.8/src /var/www/html/loganalyzer cd /var/www/html/loganalyzer chmod +x *.sh ./configure.sh # 脚本很简单（下面的secure.sh也是如此），手动执行也可以 使用浏览器进行安装操作：http://localhost/loganalyzer web安装完之后执行./secure.sh即可 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-17 11:23:18 "},"Linux/sudo详解.html":{"url":"Linux/sudo详解.html","title":"sudo详解","keywords":"","body":"1. sudo详解1.1. su用户切换1.2. sudo授权1.2.1. 简单配置1.2.2. 使用别名1. sudo详解 1.1. su用户切换 基本语法 su [options...] [-] [user [args...]] # 直接执行su或者su - 不加其他参数，即表示切换用户至root 常用组合： su -l USER_NAME：其中-l(可以使用-或者--login代替使用)参数表示以登录的方式切换用户，也就是切换用户时会一并切换家目录环境变量等 su - USER_NAME -c \"COMMAND\"：以该用户单次执行某一个命令 1.2. sudo授权 能够让获得授权的用户以另外一个用户的身份运行指定的命令. 配置文件：/etc/sudoers，不建议直接编辑，推荐使用带有语法检测的visudo命令来编辑. 错误日志文件：/var/log/secure sudo常用参数： -l：查看当前用户可以使用的权限 -k：清除先前保存的密码 -b：将所要执行的命令放在后台执行，但将输出结果打印到当前终端上 -u：后面加username或者uid，表示以该用户的身份运行 1.2.1. 简单配置 让指定用户使用sudo运行指定命令 # 在配置文件中添加以下内容 #### suofeiya ALL=(ALL) /usr/sbin/visudo #### 让指定用户组使用sudo运行指定命令 # 将用户添加到指定用户组 usermod -a -G test suofeiya # -a(append)表示添加用户到组且不必离开以前的群组，不加-a参数则会使用户离开当前组，仅加入指定组 # 编辑配置文件 #### %test ALL=(ALL) ALL #### 注意事项：如果这样设置，则普通用户就可以通过sudo su root直接切换到root用户而无需输入root密码，所以需要如下设置来避免这种情况. 让用户组或用户无法切换、修改root密码 # 编辑配置文件 #### %test ALL=(ALL) ALL, !/bin/su, !/usr/bin/passwd root centos ALL=(root) /usr/bin/passwd [a-zA-Z]*,!/usr/bin/passwd root # centos用户可以root的身份更改密码，但禁止更改root的密码 #### 让用户无需密码使用指定命令 # 编辑配置文件 #### suofeiya ALL=(ALL) NOPASSWD: /usr/sbin/useradd, PASSWD: /bin/su #### 让普通用户suofeiya具有/etc/init.d/network脚本重启的权限 # 编辑配置文件 #### suofeiya ALL=NOPASSWD:/etc/init.d/network restart #### 让普通用户suofeiya具有/etc/init.d/mysqld和root家目录test.sh脚本的所有权限 # 编辑配置文件 #### suofeiya ALL=(ALL) /etc/init.d/mysqld, /root/test.sh #### 1.2.2. 使用别名 # 编辑配置文件 #### User_Alias USERADMIN=suofeiya, %wheel # 添加用户别名，该别名用于用户管理员组，用户可以指定多个，别名也可以指定多个 Cmnd_Alias USERCMD=/usr/sbin/visudo, /usr/bin/useradd # 角色别名 Runas_Alias ROLE = root USERADMIN ALL=(ROLE) USERCMD #### Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-16 20:23:22 "},"Linux/SElinux.html":{"url":"Linux/SElinux.html","title":"SELinux","keywords":"","body":"1. selinux状态查看与配置2. 查看文件安全上下文以及相关命令3. SElinux日志查看及相关工具4. 解决SElinux资源类别错误导致文件无法访问(httpd)5. 查看修改有哪些SElinux布尔值 This is SElinux StudyNote. selinux 的全称是Security Enhance Linux，即为安全加强的Linux 1. selinux状态查看与配置 selinux的配置文件位置：/etc/selinux/config,它还有个链接在`/etc/sysconfig/selinux selinux三种状态： enforcing-是强制模式系统，它受selinux保护。就是违反了策略你就无法继续操作下去。 permissive-是提示模式系统不会受到selinux保护，只是收到警告信息。permissive就是selinux有效，但是即使你违反了策略的话它让你继续操作，但是把你违反的内容记录下来（警告信息） disabled-禁用selinux 查询selinux工作状态：①sestatus显示有关详细信息②根据selinuxenabled命令回传值判断是否开启，0表示开启，1表示关闭（可以使用echo $?）③使用getenforce查看 变更selinux工作状态（临时）：setenforce命令设定selinux运行状态，1开启（Enforce），0关闭（Permissive），同时可以使用getenforce查看已修改的状态信息 2. 查看文件安全上下文以及相关命令 查看文件上下文：ls -lZ FILENAME 查看进程上下文：ps auxZ | grep PROGRESS 查看用户上下文：id -Z 3. SElinux日志查看及相关工具 selinux的日志文件位置：/var/log/audit/audit.log 查看工具： audit2why和audit2allow：所属软件包为policycoreutils-python.x86_64 使用方法：audit2why setroubleshoot：所属软件包为setroubleshoot-server.x86_64 使用方法：tail /var/log/messages | grep setroubleshoot 4. 解决SElinux资源类别错误导致文件无法访问(httpd) 根据日志记录的错误可以使用sealert -l ERR_CODE来查看详情 可以用sesearch【--allow】【-s 主体类别】【-t 目标类别】【-b】查询详细规则 sesearch命令由下列软件包提供setools-console.x86_64 找出目标资源类别为httpd_sys_content_t的相关信息：sesearch --allow -t httpd_sys_content_t 找出主体类别为httpd_t可以访问的那些资源相关信息：sesearch -s httpd_t --allow 修改文件上下文 一种是通过restorerecon（ restore context) 修复继承当前目录默认的上下文；一种是通过chcon(change context) 修改当前的上下文 （1）使用restorerecon（ restore context) 修复继承当前目录默认的上下文 分两步实现: ​ 首先为/var/www/html 这个目录下的所有文件添加默认标签类型： semanage fcontext -a -thttpd_sys_content_t '/var/www/html(/.*)?' 因为html目录的默认标签类型就是httpd_sys_content_t，所以此步可以省略 ​ 然后用新的标签类型标注已有文件： restorecon -Rv /var/www/html/， 之后httpd就可以访问该目录下的文件了 （2）使用chcon (change context) 修改当前的上下文 chcon -t httpd_sys_content_t /var/html/index.html 其他chcon参数： -t type 类型 -R recursive 递归 -u user 用户 -r role 角色 或者使用chcon --reference /var/html/hello.html /var/html/index.html 5. 查看修改有哪些SElinux布尔值 查看当前系统所有的布尔值：getsebool -a 修改某一个布尔值：setsebool [-P] value on|off，其中-P表示永久有效 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-21 16:39:58 "},"Linux/iptables.html":{"url":"Linux/iptables.html","title":"iptables","keywords":"","body":"1. iptables配置1.1. 防火墙相关知识1.2. iptables基础1.2.1. iptables匹配流程1.2.2. iptables的四表五链1.2.3. 表优先级1.2.4. iptables规则1.3. iptables规则查询1.4. iptables规则管理1.4.1. 链管理相关1.4.2. 规则管理相关1.4.3. target处理动作1.4.4. 清除规则相关1.5. 网络防火墙1.6. NAT路由1.6.1. SNAT1.6.2. MASQUERADE1.6.3. DNAT1.7. iptables实例1. iptables配置 1.1. 防火墙相关知识 从逻辑上讲，防火墙可以大体分为主机防火墙和网络防火墙： 主机防火墙：针对于单个主机进行防护（针对个人） 网络防火墙：往往处于网络入口或边缘，针对于网络入口进行防护，服务于防火墙背后的本地局域网（针对于集体） 从物理上讲，防火墙可以分为硬件防火墙和软件防火墙： 硬件防火墙：在硬件级别实现部分防火墙功能，另一部分功能基于软件实现，性能高，成本高 软件防火墙：应用软件处理逻辑运行于通用硬件平台之上的防火墙，性能低，成本低 1.2. iptables基础 Linux上的iptables实为一个命令行工具，位于用户空间之中，内核空间的netfilter安全框架才是真正的防火墙. iptables并非守护进程，所以并不能算是真正意义上的服务，而应该算是内核提供的功能. 1.2.1. iptables匹配流程 1.2.2. iptables的四表五链 四表 Filter表：过滤数据包，防火墙；内核模块：iptables_filter NAT表：用于网络地址转换(IP、端口)；内核模块：iptable_nat Mangle表：拆解修改重新封装数据包的服务类型、TTL、并且可以配置路由实现QOS；内核模块：iptable_mangle Raw表：关闭nat表上的状态跟踪机制；内核模块：iptable_raw 五链（内置链） INPUT链：进来的数据包应用此规则链中的规则 OUTPUT链：外出的数据包应用此规则链中的规则 FORWARD链：转发数据包时应用此规则链中的规则 PREROUTING链：对数据包作路由选择前应用此链中的规则 POSTROUTING链：对数据包作路由选择后应用此链中的规则 :warning:特别注意：如果想要Linux主机支持转发功能，则需要开启内核的IP_FORWARD功能，临时修改/proc/sys/net/ipv4/ip_forward的值为1（默认为0关闭状态），永久修改则需将其添加到/etc/sysctl.conf文件当中去（通过该文件修改的内核参数不会立即生效,修改完成后，使用sysctl -p命令可以使这些设置立即生效.）。 自定义链：用于内置链的扩展和补充，可实现更灵活的规则管理机制. 由iptables匹配流程图可以得出四表可以被那些链使用(通过\"表\"作为操作入口，对规则进行定义)： raw：PREROUTING，OUTPUT mangle：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING nat ：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，而centos6中没有） filter：INPUT，FORWARD，OUTPUT OUTPUT存在与所有表中 1.2.3. 表优先级 iptables为我们定义了4张\"表\"，当他们处于同一条\"链\"时，执行的优先级如下： 优先级次序（由高而低）：raw --> mangle --> nat --> filter 1.2.4. iptables规则 匹配条件 匹配条件分为基本匹配条件和扩展匹配条件 基本匹配条件：源地址Source IP，目标地址 Destination IP 扩展匹配条件：使用的是扩展模块处理，可以使用rpm -ql iptables | grep *.so$ | less查看支持的模块 常用target ACCEPT：允许数据包通过 DROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应 REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息 SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题 MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上 DNAT：目标地址转换 REDIRECT：在本机做端口映射 LOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配 ACCEPT和DROP属于基本处理动作，其他的都属于扩展处理动作. 1.3. iptables规则查询 查询所有规则（默认为filter表） iptables -vnL --line-number # 参数-v表示显示详细信息，-n表示取消域名反解，-L等同于--list表示列出规则， --line-number表示显示规则行号，便于增删改查 Chain INPUT (policy ACCEPT 220 packets, 21736 bytes) # 以INPUT链为例 pkts bytes target prot opt in out source destination Chain INPUT (policy ACCEPT 220 packets, 21736 bytes)括号中policy，packets和bytes的含义： policy：表示默认策略，ACCEPT表示默认接受通过INPUT关卡的所有请求，即“黑名单机制” packets：表示当前链默认策略匹配到的包的数量 bytes：表示当前链默认策略匹配到的所有包的大小总和 当packets和bytes达到一定大小时，会显示粗略的大小，如果想要详细显示，则需在查询时增加-x选项. 详细信息中各个字段的含义： pkts：对应规则匹配到的报文的个数 bytes：对应匹配到的报文包的大小总和 target：规则对应的target，往往表示规则对应的\"动作\"，即规则匹配成功后需要采取的措施 prot：表示规则对应的协议，是否只针对某些协议应用此规则 opt：表示规则对应的选项 in：表示数据包由哪个接口(网卡)流入，我们可以设置通过哪块网卡流入的报文需要匹配当前规则 out：表示数据包由哪个接口(网卡)流出，我们可以设置通过哪块网卡流出的报文需要匹配当前规则 source：表示规则对应的源头地址，可以是一个IP，也可以是一个网段 destination：表示规则对应的目标地址可以是一个IP，也可以是一个网段 查询某个表中的规则或者某个表的某个链 # 查询nat表所有规则 iptables -t nat -L # -t表示表类型 # 查询nat表的INPUT链 iptables -t nat -L INPUT 1.4. iptables规则管理 1.4.1. 链管理相关 自定义链 增加自定义链 iptables -N diy_chain 删除自定义链（要求自定义链必须是空的，而且没有被引用【引用计数为0】） iptables -X diy_chain 重命名自定义链 iptables -E diy_chain new_chain 修改默认策略 对于filter而言，其默认策略有：ACCEPT、DROP和REJECT # 将FORWARD链的默认策略改为DROP iptables -P FORWARD DROP 特别地，不要将空的filter表的INPUT链设为DROP，否则当前远程连接会被断开. 1.4.2. 规则管理相关 增加规则 ==基本匹配条件== 来自172.16.122.0/24主机的tcp连接到本地主机都接受 iptables -A INPUT -s 172.16.122.0/24 -d 172.16.122.135 -p tcp -j ACCEPT 以上的-s、-d、-p都为基本条件的参数，此外还有-o（数据报文流出的接口，只能应用于数据报文的流出环节，且只能适用于FORWARD、OUTPUT和POSTROUTING链）和-i（数据报文流入的接口，只能应用于数据报文的流入环节，且只能适用于PREROUTING、INPIUT和FORWARD链） ==扩展匹配条件== 隐式扩展 隐式扩展简单使用-1 显式扩展（需要使用-m选项） 帮助文档：man iptables-extensions multiport简单使用 # 开放22/80/445端口的tcp出入连接 iptables -R INPUT 1 -d 172.16.122.135 -p tcp -m multiport --dports 22,80,445 -j ACCEPT iptables -R OUTPUT 1 -s 172.16.122.135 -p tcp -m multiport --sports 22,80,445 -j ACCEPT iprange简单使用 # 允许172.16.122.130-172.16.122.140地址范围内的所有主机访问可以使用本地tcp连接80端口 iptables -I INPUT 2 -d 172.16.122.135 -p tcp --dport 80 -m iprange --src-range 172.16.122.130-172.16.122.140 -j ACCEPT iptables -I OUTPUT 2 -s 172.16.122.135 -p tcp --sport 80 -m iprange --dst-range 172.16.122.130-172.16.122.140 -j ACCEPT time简单使用 # 允许外部主机访问本地的80端口，但只能在指定时间段进行访问（周一至周五早八点到晚八点） iptables -I INPUT 2 -d 172.16.122.135 -p tcp --dport 80 -m time --timestart 8:00:00 -timestop 20:00:00 --weekdays 1,2,3,4,5 --kerneltz -j ACCEPT iptables -I OUPUT 2 -d 172.16.122.135 -p tcp --sport 80 -m time --timestart 8:00:00 -timestop 20:00:00 --weekdays 1,2,3,4,5 --kerneltz -j ACCEPT # kerneltz选项在CentOS 6上无需添加使用，因为CentOS 6 默认会使用内核配置的时区 *除weekdays之外还可以指定一个月中的那几天monthdays --monthdays与 --weekdays可以使用\"!\"取反，其他选项不能取反 string简单使用 # 屏蔽网页内容中的fuck敏感词汇 * 网页内容： hello everyone, my name is fuck.(just kidding~) iptables -I OUTPUT -m string --algo bm --string \"fuck\" -j DROP * --algo：用于指定匹配算法，可选的算法有bm与kmp，此选项为必须选项，我们不用纠结于选择哪个算法，但是我们必须指定一个，--string：用于指定需要匹配的字符串 注意：只能对明文编码的字符串进行使用 connlimit简单实用 # 限制mysql并发连接数量 # 限制单个IP的连接数，连接数大于三个则拒绝访问 iptables -A INPUT 2 -d 172.16.122.135 -s 172.16.122.0/24 -p tcp --dport 3306 -m connlimit --connlimit-upto 2 -j ACCEPT limit简单使用 # 限制ping请求包的速率，每3秒钟响应一次，并且其阈值为5，简单来说就是前4个icmp包响应正常，到第5个包开始就要每3秒钟响应一次 iptables -A INPUT -d 172.16.122.135 -p icmp --icmp-type 8 -m limit --limit-burst 5 --limit 20/minute -j ACCEPT iptable -A OUTPUT -s 172.16.122.135 -p icmp --icmp-type 0 -j ACCEPT state简单使用 # 放行指定端口并且指定包类型为NEW的包可以通过 iptables -A INPUT -d 172.16.122.136 -p tcp -m multiport --sports 22,3306,443,80 -m state --state NEW -j ACCEPT iptables -I INPUT -d 172.16.122.136 -m state --state ESTABLISHED -j ACCEPT iptables -I OUTPUT -s 172.16.122.136 -m state --state ESTABLISHED -j ACCEPT # 自定义默认规则设为DROP iptables -A INPUT -d 172.16.122.136 -j REJECT iptables -A OUTPUT -s 172.16.122.136 -j REJECT 1.4.3. target处理动作 target处理动作 自定义处理动作链： # 简单使用 # 创建自定义链 iptables -N diy_rules iptables -A diy_rules -d 172.16.122.136 -p icmp --icmp-type 8 -j ACCEPT iptables -I diy_rules -d 172.16.122.136 -s 172.16.122.137 -p icmp -j DROP # 使用自定义链 iptables - A INPUT -d 172.16.122.136 -p icmp -j diy_rules REJECT REJECT动作的常用选项为--reject-with，使用--reject-with选项，可以设置提示信息，当对方被拒绝时，会提示对方为什么被拒绝. 可用值如下： icmp-net-unreachable、icmp-host-unreachable、icmp-port-unreachable（default默认值）、icmp-proto-unreachable、icmp-net-prohibited、icmp-host-pro-hibited、icmp-admin-prohibited # 将拒绝报文默认的的“端口不可达”，改为“主机不可达” iptables -A INPUT -j REJECT --reject-with icmp-host-unreachable LOG LOG动作只负责记录匹配到的报文的相关信息，不负责对报文的其他处理，如果想要对报文进行进一步的处理，可以在之后设置具体规则，进行进一步的处理. LOG可用选项： --log-level：可以指定记录日志的日志级别，可用级别有emerg，alert，crit，error，warning，notice，info，debug（级别由高到低） --log-prefix：可以给记录到的相关信息添加\"标签\"之类的信息，以便区分各种记录到的报文信息，方便在分析时进行过滤 注：--log-prefix对应的值不能超过29个字符 iptable -A INPUT -p tcp --dport 80 -m state --state NEW -j LOG --log-prefix \"someone visit our web\" SNAT和DNAT和MASQUERADE 见NAT路由 REDIRECT 可以用作端口映射 # 当别的机器访问本机的80端口时，报文会被重定向到本机的8080端口上 iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080 1.4.4. 清除规则相关 格式：iptables [-t tables] [-FXZ] 选项与参数： -F：清除所有制订的规则 -X：清除所有用户“自定义”的chain -Z：将所有chain的计数与流量统计都归零 -D：删除规则 # 清除filter表所有规则 iptables -t filter -F # 清除filter表的第一条INPUT链流量统计 iptables -Z INPUT 1 # 删除filter表的第一条INPUT链规则 iptables -D INPUT 1 :warning:需要特别注意的是：直接使用-F清空规则时，如果已经配置过默认规则为deny的环境，此步骤将使系统的所有网络访问中断，所以清空之前应当先执行iptables -P INPUT ACCEPT再执行-F操作。此外，清空规则不可逆转，除非你知道你在做什么，清空之前都应当先备份一份，步骤如下： iptables-save和iptables-restore的使用： # 将所有规则追加到一个文件 iptables-save -c -t filter > /root/iptables.bak # 参数-c/--counters表示在输出中包含所有报文和字节计数的当前值，-t/--table 限制只输出特定表，如果不指定，会输出所有可能的表 # 重载iptables备份文件 iptables-restore 1.5. 网络防火墙 假设有三台主机，一台内网主机，一台作为路由，另一台作为外网主机，关系如下（图有点辣鸡...）： 实现访问控制（内网访问外网） # 关闭内网主机访问外网主机 iptables -A FORWARD -j REJECT # 允许内网主机对外网发出请求报文 iptables -I FORWARD -s 10.19.194.0/24 -p tcp --dport 80 -j ACCEPT # 允许内网主机对外网接收请求报文 iptables -I 2 FORWARD -s 172.16.122.0/24 -p tcp --sport 80 -j ACCEPT 1.6. NAT路由 以下简单示例借助于网络防火墙的拓扑结构. 1.6.1. SNAT This target is only valid in the nat table, in the POSTROUTING and INPUT chains, and user-defined chains which are only called from those chains. 使用SNAT内网访问外网实现隐藏内网主机地址 iptables - t nat -A POSTROUTING -s 10.19.194.0/24 -j SNAT --to-source 172.16.122.138 1.6.2. MASQUERADE This target is only valid in the nat table, in the POSTROUTING chain. It should only be used with dynamically assigned IP (dialup) connections: if you have a static IP address, you should use the SNAT target. 可以把MASQUERADE理解为动态的、自动化的SNAT，如果没有动态SNAT的需求，没有必要使用MASQUERADE，因为SNAT更加高效 # 固定网卡 iptables -t nat -I POSTROUTING -s 10.19.194.0/24 -o ens37 -j MASQUERADE 1.6.3. DNAT This target is only valid in the nat table, in the PREROUTING and OUTPUTchains, and user-defined chains which are only called from those chains. 让外网主机能够访问内网主机106的web服务 iptables - t nat -A PREROUTING -d 10.19.194.0/24 -p tcp --dport 80 -j SNAT --to-destination 10.19.194.106 1.7. iptables实例 仅允许一部分主机ping当前主机 # 前提是filter表的INPUT链和OUTPUT链默认策略为DROP # INPUT链 iptables -A INPUT -s 172.16.122.0/24 -d 172.16.122.135 -p icmp -j ACCEPT # INPUT链 iptables -A OUTPUT -s 172.16.122.135 -d 172.16.122.0/24 -p icmp -j ACCEPT 扩展：icmp type（常见的0和8） 类型TYPE 用途描述 Description 0 Echo Reply——回显应答（Ping应答） 8 Echo request——回显请求（Ping请求） 因此，我们可以借助icmp type来实现自己可以ping别人，但别人ping不到自己 # 默认规则策略为DROP iptables -I OUTPUT 2 -s 172.16.122.135 -p icmp --icmp-type 8 -j ACCEPT iptables -I INPUT 2 -d 172.16.122.135 -p icmp --icmp-type 0 -j ACCEPT 仅开放本机的ssh服务给指定网络 # 前提是filter表的INPUT链和OUTPUT链默认策略为DROP # INPUT链 iptables -A INPUT -s 172.16.122.0/24 -d 172.16.122.135 -p tcp --dport 22 -j ACCEPT # OUTPUT链 iptables -A OUTPUT -s 172.16.122.135 -d 172.16.122.0/24 -p tcp --sport 22 -j ACCEPT iptables默认策略的优化 如果将filter表的INPUT或OUTPUT链默认策略改为DROP白名单模式的话，某一天你不小心使用了-F这个危险的选项将规则全部清空了，那这时你就无法远程访问到你的主机了，所以为了解决这个问题，可以使用以下方法： # 将INPUT链和OUTPUT链的默认规则改为ACCEPT iptables -P INPUT ACCEPT iptables -P OUTPUT ACCEPT # 将INPUT链和OUTPUT链的最后一条规则改为禁止 iptables -A INPUT -d 172.16.122.135 -j DROP iptables -A OUTPUT -s 172.16.122.135 -j DROP # 如果你的本机有多个ip地址的话，可以使用网卡来写规则 iptables -A INPUT -i ens33 -j DROP iptables -A OUTPUT -o ens33 -j DROP 这样修改的好处有当你不小心清空规则后，还能够连接到远程主机，此外，还可以直接使用本地回环地址而无需新增规则. 参考资料： https://linux.die.net/man/8/iptables http://www.zsythink.net/ Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-19 14:38:16 "},"Linux/Linux_shell.html":{"url":"Linux/Linux_shell.html","title":"Linux Shell","keywords":"","body":"1. Tips2. 调用外部命令3. 使用变量4. echo5. printf6. exec(参考地址)7. read8. let9. locate10. declare & typeset11. string12. 字符串的查找替换13. 字符串的查找和删除14. array15. trap信号捕捉16. 多行注释17. 传递参数18. 重定向19. shell中[]的使用20. shell基本运算符21. test22. 流程控制23. shell函数24. 库文件25. 文件搜索26. 其他27. 文件处理三剑客 This is Linux_shell StudyNote. 1. Tips 使用sh -x test.sh可以查看shell的执行步骤，使用sh -n test.sh可以简单检查shell的语法错误 nohup将命令放于后台执行，例如：nohup sh test.sh &，执行命令的同时，在家目录会生成一个nohup.out的文件来接收返回结果，所以可以使用tail -f nohup.out来实时查看输出内容 2. 调用外部命令 `command`或者使用$(command) # 算数运算 $(( )) # 用于整数运算，包括加减乘除，引用变量时可不加`$`符号 ((num++/--)) # 可以用来进行自增或者自减操作 3. 使用变量 $变量名称 或者使用 ${变量名称} 设置变量为只读readonly 变量名称 一般在shell中变量会被声明成全局变量，使用local关键字可以将变量定义为局部变量，如果函数内外存在同名变量，则函数内部的变量将会覆盖外部变量 4. echo echo可加多个变量参数,如:echo $str1 $str2 原样输出字符串，不进行转义或取变量(用单引号)echo '$name\\\"'==>$name\\\" echo最好使用双引号 echo输出ANSI带颜色或者特效的文字，参考https://www.jianshu.com/p/d1b4f554e6f1 语法格式： echo -e \"\\033[3mSome things you want to print out.\\033[0m\" 3x为表示前景颜色的一组数字，x取值为0到7，分别代表的颜色如下： 30表示黑色 31表示红色 32表示绿色 33表示黄色 34表示蓝色 35表示紫色 36表示浅蓝色 37表示灰色 033[0m为ANSI控制码，表示结束输出有颜色的字符 4x，常用的背景颜色也共8种，x取值为0到7。常用背景色如下： 40表示背景为黑色 41表示背景为红色 42表示背景为绿色 43表示背景为黄色 44表示背景为蓝色 45表示背景为紫色 46表示背景为浅蓝色 47表示背景为灰白色 混合使用示例 echo -e \"\\033[47;31mHELLO\\033[0m\" 其它常用的ANSI控制码 \\033[1m让输出的字符高亮显式 \\033[3m输出斜体字 \\033[4m给输出的字符加上下划线 \\033[5m让输出的字符闪烁显式 \\033[7m设置反显效果，即把背景色和字体颜色反过来显示 5. printf printf \"%-10s %-8s %-4.2f\\n\" 郭靖 男 66.1234 # 输出:郭靖 男 66.12 # 格式替代符 `%-10s`,`-`代表左对齐(没有则是右对齐),`10s`代表10个宽度字符,`.2`代表保留两位小数 `%c`后加字符串(第一个)或者字符 6. exec(参考地址) shell的内建命令exec将并不启动新的shell，而是用要被执行命令替换当前的shell进程，并且将老进程的环境清理掉，而且exec命令后的其它命令将不再执行，不过，要注意一个例外，当exec命令来对文件描述符操作的时候，就不会替换shell，而且操作完成后，还会继续执行接下来的命令。 在shell中的两种用法 1. exec 命令 ;命令代替shell程序，命令退出，shell 退出；比如 exec ls 2. exec 文件重定向，可以将文件的重定向就看为是shell程序的文件重定向 比如 exec 5>/home/suofeiya/test_dir/test; # 位置在/dev/fd中 cat /home/suofeiya/test_dir/test exec 5>&- # 取消设备5 与source的异同点：exec和source都是在父进程中直接执行，但exec这个与source有很大的区别，source是执行shell脚本，而且执行后会返回以前的shell，而exec则是运行完退出当前shell 7. read 可读取多个参数read 变量1 变量2 read -p \"请您五秒内输入您的密码(长度限制6):\" -n 6 -t 5 -s password echo -e \"\\nyour password is $password\" -p 输入提示文字 -n 输入字符长度限制(达到6位，自动结束) -t 输入限时 -s 隐藏输入内容 8. let 除了支持expr中的加减乘除求余外，还支持+=，-=，*=，/=，%= 9. locate 生命变量的作用域，只在函数体内有效，例子：locate name=suofeiya 10. declare & typeset declare参数列表 -r 将变量设置为只读 -i 将变量设置为整数 -a 将变量设置为数组 -A 将变量设置成关联数组 -p 显示变量的值 -f 显示此脚本前定义过的所有函数以及内容 -F 仅显示此脚本前定义的函数名 -x 将变量设置为全局变量 11. string 获取字符串长度${#str} 查找子字符串expr index \"$str\" xy,查找字符x/y的位置 遍历字符串for str in 'This is a string';do echo $str;done; 截取字符串(字符串切片) var=https://suofeiya.pro/mygitbook echo ${var#*//} # `#`为运算符,删除左边开始到`//`结束的字符,suofeiya.pro echo ${var##*/} # 删除最后一个`/`之前字符,mygitbook echo ${var%/*} # `%/*`从右边开始删除`/`右边字符,https://suofeiya.pro echo ${var%%/*} # 删除最后一个`/`之后内容 echo ${var:0:5} # 截取第一个字符之后的五个字符 echo ${var:0} # 从第一个字符开始到结束 echo ${var:0-13:3} # 其中的`0-7`表示右边算起第七个字符开始,截取3个字符,pro # 总结:`#、`## 表示从左边开始删除。一个 # 表示从左边删除到第一个指定的字符；两个 # 表示从左边删除到最后一个指定的字符 # `%`、`%%` 表示从右边开始删除。一个 % 表示从右边删除到第一个指定的字符；两个 % 表示从左边删除到最后一个指定的字符 # 删除包括了指定的字符本身 字符串的查找替换和删除 12. 字符串的查找替换 ${var/PATTERN/SUBSTI} # 查找var所表示的字符串中，第一次被PATTERN所匹配到的字符串，并将其替换为SUBSTI所表示的字符串 ${var//PATTERN/SUBSTI} # 查找所有并替换 ${var/#PATTERN/SUBSTI} # 查找行首为PATTERN所匹配的字符串，并替换 ${var/%PATTERN/SUBSTI} # 行尾... 13. 字符串的查找和删除 ${var/PATTERN} # 查找以PATTERN所匹配的字符串中的第一次匹配，并删除 ${var//PATTERN} # 查找所有... ${var/#PATTERN} # 查找行首 ${var/%PATTERN} # 行尾 字符串变量的特殊赋值 ${var:-VALUE} # 如果var为空或者为赋值，则返回VALUE，否则返回var值 ${var:=VALUE} # 如果var为空或者为赋值，则返回VALUE，并将VALUE赋值给var，否则返回var值 ${var:+VALUE} # 如果var为非空，则返回VALUE，相当于非空时替换 ${var:?ERROR_INFO} # 如果var为空或者未赋值，则返回ERROR_INFO错误提示，否则返回var值 字符大小转换 ${var^^} # 将var变量字符串中的所有小写字符转换成大写 ${var,,} # 将var变量字符串中的所有大写字符转换成大写 字符串比较 `=`,`!=` 两字符串相同,不相同 `-z` 检测字符串长度是否为0，为0返回 true `-n` 与`-z`相反 `$` 检测字符串是否为空，不为空返回 true a=\"abcd\" [ $a ] 返回 true 14. array 数组声明：声明索引数组，declare -a ARRAY_NAME；声明关联数组，declare -A ARRAY_NAME，例如：ARRAY_NAME([index_name1]=\"value1\" [index_name2]=\"value2\") 数组中元素的赋值方式： （1）一次只赋值一个元素： ​ ARRAY_NAME[INDEX]=VALUE （2）一次赋值全部元素： ​ ARRAY_NAME={\"VALUE1\" \"VALUE2\" ...} （3）只赋值特定元素： ​ ARRAY_NAME=([0]=\"VALUE\" [23]=\"VALUE\" ...) 注意：bash支持稀疏格式的数组 （4）使用read从键盘交互式读入 ​ read -a ARRAY_NAME 读取数组 # 按照索引获取，不加下标默认只读取第一个元素 ${array[下标]} # 利用@获取数组所有元素 ${array[@]} # 遍历数组1 for i in ${my_arry[@]};do echo $i done # 遍历数组2 j=0 while [ $j -lt ${#my_arry[@]} ] do echo ${my_arry[$j]} let \"j++\" # 自增,双引号可加可不加,等价于`let j+=1`,还可以`a=$[$a+1]`还可以`j=`expr $j + 1``，还可以使用`((j++))``或者`$((j++))`来实现 done 数组的切片：${var:offset:number}获取字符串的子串，offset表示偏移，number表示偏移量。此外${var: -length}，取字符串最右侧的几个字符，注意：-号前方有空格 数组元素的替换：${array[*]/old/new}，加上双斜杠代表全部替换${array[*]//old/new}，注意：只针对数组全部，而不只针对某一个元素 获取数组长度${#array[@/*]},获取单个元素的长度${#array[下标]} 向非稀疏数组中追加元素ARRAY_NAME[${ARRAY_NAME[*]}] unset清除元素，unset array[index]删除某个元素，unset array删除整个数组，注意：shell中删除某个元素后，会保留原来的元素的index下标 15. trap信号捕捉 参考：https://blog.csdn.net/sinceNow/article/details/86294081 使用格式：trap 'commands' signal-list 信号说明 HUP(1)　　　　挂起，通常因终端掉线或用户退出而引发 INT(2)　　　　中断，通常因按下Ctrl+C组合键而引发 QUIT(3)　　退出，通常因按下Ctrl+组合键而引发 ABRT(6)　　中止，通常因某些严重的执行错误而引发 ALRM(14)　　报警，通常用来处理超时 TERM(15)　　终止，通常在系统关机时发送 示例脚本 # 执行脚本时，使用ctrl+c可以将/tmp/westos下建立的文件都删除掉 #!/bin/bash trap \"find /tmp -type f -name \"westos_*\" | xargs rm -f && exit \" 2 while true do touch /tmp/westos_$(date +%F-%N-%M-%S) sleep 2 ls -l /tmp/westos* done 可以将捕捉的动作定义为函数，例如trap 'mytrap' INT，其中mytrap为函数名称 16. 多行注释 : 17. 传递参数 $#传递到shell的参数个数 $*以单一字符串显示所有传向shell的参数情况以\"$1 $2 ...\"显示 $@与$*相似,但是输出多个字符串,for i in \"$@\";do echo$i done,@/*两者都可以直接获取到 $$shell当前进程ID $!后台运行的最后一个进程ID $-显示Shell使用的当前选项，与set命令功能相同 $?显示命令最后的退出状态,使用perror [返回值]来查看详细退出状态 18. 重定向 n >& m将输出文件 m 和 n 合并 n 将输入文件 m 和 n 合并 将开始标记 tag 和结束标记 tag 之间的内容作为输入 command1 outfile同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。 文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）, 例如:将stderr重定向到file使用command 2 > file,合并stdout和stderr到filecommand > file 2>&1 Here Document wc -l 19. shell中[]的使用 算术比较, 比如一个变量是否为0, [ $var -eq 0 ]。 文件属性测试，比如一个文件是否存在，[ -e $var ], 是否是目录，[ -d $var ]。 字符串比较, 比如两个字符串是否相同， [[ $var1 = $var2 ]]。 20. shell基本运算符 expr运算符 a=10 b=20 `expr $a + $b` # 结果30,;加减除取余类似,乘法需要转义字符`\\*`才能使用 # 可以使用$(expr $a + $b)代替 result=$[a+b] # 注意:不能有空格 `a=$b` # 变量b赋值给a `[ $a == $b ]` 返回 false。 `-ge` 大于等于 [ $a -ge $b ] `-le` 小于等于 [ $a -le $b ] # 布尔运算符 `-o` 或运算,有一个为真则为真 `-a` 与运算,都为真则为真,`[ $a -lt 20 -a $b -gt 100 ]` # 逻辑运算符 `&&` 逻辑`AND` `||` 逻辑`OR` &&、||、 和 > 操作符存在于 [[ ]] 条件判断结构中 [[]] 运算符只是 [] 运算符的扩充。能够支持 >, || && ，不再使用 -a -o。 可以使用((exp1 OP exp2))代替[ exp1 OP exp2 ] bc命令用来进行运算scale=2修改小数精度，用法`echo \"scale=4;50/9\" | bc` 文件测试运算符,来自菜鸟教程文件测试运算符 # 操作符 说明 举例 -b file 检测文件是否是块设备文件，如果是，则返回 true。 [ -b $file ] 返回 false。 -c file 检测文件是否是字符设备文件，如果是，则返回 true。 [ -c $file ] 返回 false 。 -d file 检测文件是否是目录，如果是，则返回 true。 [ -d $file ] 返回 false。 -f file 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 [ -f $file ] 返回 true。 -g file 检测文件是否设置了 SGID 位，如果是，则返回 true。 [ -g $file ] 返回 false。 -k file 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。 [ -k $file ] 返回 false。 -p file 检测文件是否是有名管道，如果是，则返回 true。 [ -p $file ] 返回 false。 -u file 检测文件是否设置了 SUID 位，如果是，则返回 true。 [ -u $file ] 返回 false。 -r file 检测文件是否可读，如果是，则返回 true。 [ -r $file ] 返回 true。 -w file 检测文件是否可写，如果是，则返回 true。 [ -w $file ] 返回 true。 -x file 检测文件是否可执行，如果是，则返回 true。 [ -x $file ] 返回 true。 -s file 检测文件是否为空（文件大小是否大于0），不为空返回 true。 [ -s $file ] 返回 true。 -e file 检测文件（包括目录）是否存在，如果是，则返回 true。 [ -e $file ] 返回 true。 21. test 和if是好搭档,可以用来进行数值,文件,字符串测试 Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：\"!\"最高，\"-a\"次之，\"-o\"最低 if test -e ./notFile -o -e ./bash then echo '至少有一个文件存在!' else echo '两个文件都不存在' fi 22. 流程控制 if语句 if condition1 then command1 command2 ... elif condition2 then command3 else command4 if # 写成一行，适合与terminal终端使用 if [ $(ps -ef | grep -c \"ssh\") -gt 1 ]; then echo \"true\"; fi for语句 for var in item1 item2 ... do command1 command2 ... done # 写成一行，适合与terminal终端使用,注意使用分号分开 for var in item1 item2 ... ; do command1; command2;...;done; for循环的特殊用法： for ((变量初始化;条件判断语句;控制变量的语句)); do # 循环语句 done while语句 int=1 while(( $int while语句的特殊用法： 逐行读取文件信息 while read VARIABLE;do # 循环体 done until语句 # 直到until满足条件 a=0 until [ ! $a -lt 10 ] do echo $a a=`expr $a + 1` done case语句 case value in value1|value2|value3...) command1 command2 ... ;; *) # 其他值执行该分支 command ... ;; esac # 可以配合continue和break使用 # case支持glob风格的通配符 # ？任意单个字符 []范围内任意字符 a|b a或者b 23. shell函数 shell 函数的两种定义方式 1. function_name () 2. function function_name() shell 函数返回值 # 使用return返回，返回0-255的整数 return [0-255] 0代表成功，其他值代表失败 或者使用echo来作为返回值 # 函数的使用和返回值 functionDemo(){ command echo \"第一个参数 $1\" ... return $()... } #调用函数 functionDemo para1 para2 ... # 接收返回值 echo \"$?\" 24. 库文件 库文件名的后缀是任意的，但一般使用.lib 库文件通常没有可执行权限 库文件无需和脚本在同级目录，只需在脚本中制定即可 库文件的第一行通常使用#!/bin/echo，输出警示内容，避免用户执行 库文件的引用 . /home/suofeiya/test/lib/base_function.lib 25. 文件搜索 常见四种文件搜索命令的使用场景 find # find命令参数 -print 打印输出，默认选项 -exec 对搜索结果进一步处理 固定格式为 -exec 'command' {} \\; 逻辑运算符，与或非，-a,-o,-not|! -perm 按照文件权限进行搜索 -prune 排除指定目录，通常与-path一同使用 例子：find . -path dir1/ -prune -o -path dir2/ -prune -o ... -type 按照文件类型进行搜索 find /tmp \\( -type f -o -type d -o -type l \\) # 注意转义部分 -mtime 按照文件时间进行搜索 -mtime +7 寻找七天之前的文件内容，`-`相反 类似还有-amin, -atime, -cmin, -ctime, -mmin locate(不同于find，locate在数据库文件中查找，且属于部分查找) 具体查看man page 手动更新命令，updatedb 用户更新的文件是/var/lib/mlocate/mlocate.db 所使用的配置文件是/etc/updatedb.conf whereis # whereis 参数列表 -b 返回二进制文件 -m 返回帮助文件 -s 返回source文件 which # which 只查找二进制文件 26. 其他 dialog可以实现窗口化变成 27. 文件处理三剑客 grep(文本过滤器,此外还有egrep和fgrep) # 语法规则 grep/egrep [option] [pattern] [file1] [file2] ... stdout | gerp/egerp # grep 常用参数列表 -v 匹配非pattern行信息 -i 忽略大小写 -n 显示行号 -r 递归搜索 -E 支持正则表达式扩展，等同于egrep -F 不按照正则表达式规则匹配，匹配原pattern本身表面意思 -c 只匹配行的总数 -w 匹配整个单词 -x 匹配整行信息 -l 只显示匹配的文件名，而不显示内容 -s 不显示错误信息 例子： grep -v -E \"(^#)|(^$)\" test > test2 # 去除文件中以#开头的行和空白行，并输出为新文件 sed( stream editor流编辑器) # 语法规则，来自man page sed [OPTION]... {script-only-if-no-other-script} [input-file]... # 注意使用单引号 # sed 常用pattern模式 9command 只匹配第九行内容 8,9command 匹配第八行到第九行的内容 9,+5command 匹配第九行到第十五行之间的内容 /pattern1/command 匹配到pattern1的内容 /pattern1/,/pattern2/command 9,/pattern1/command /pattern1/,9command # sed 编辑命令，与匹配模式巧妙使用 p 打印（注意：-n选项和p命令一起使用表示只打印那些发生替换的行） a,i 分别表示行后（append）行前（insert）追加（每一行都进行添加） r,w 前置表示从外部文件读入，并且在其行后追加，后者代表将匹配的行写入到外部文件当中 d 删除 c 把匹配到的行替换为所要替换的文本 s/old/new/g 修改所有 s/old/new 修改第一个 s/old/new/2g 修改第二个 s/old/new/ig 修改所有并且忽略大小写 # sed 选项 -n 只打印模式匹配行* -e 直接在命令行中进行sed编辑，默认选项 sed -n -e '/pattern1/p' -e '/pattern2/p' test.txt（多个条件） -f 或--file= 以选项中指定的script文件来处理输入的文本文件 -r 支持扩展正则表达式 -i 直接修改文件内容 例子： sed -n '/hello/a sed' test # 查找hello字符串并在其后面一行添加sed字符串 sed '5,8c changed' test # 使用扩展正则表达式 sed -n -r 's/(HELLO=)java/\\1sed' test # 使用正则将前面HELLO=匹配到后面的字符串替换为sed awk awk其实不仅仅是工具软件，还是一种编程语言，所以单独笔记，见shell_awk.md Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-19 12:31:10 "},"Linux/shell_awk.html":{"url":"Linux/shell_awk.html","title":"shell_awk","keywords":"","body":"1. 基本格式2. 模式匹配3. 变量4. array5. 格式化输出printf6. 函数7. 条件8. if语句9. 选项10. 其他11. 例子12. 参考链接 This is shell_awk StudyNote. 1. 基本格式 awk 动作 文件名 awk 'BEGIN{}/pattern(REGEX)/{commmand}END{}' # 示例1 awk '{print $0}' test # $0代表当前行，因此上面命令的执行结果，就是把每一行原样打印出来 # 示例2 echo 'this is a test' | awk '{print $0}' # 使用标准输出 # 示例3 awk 'BEGIN{NF=\":\"}{print $2}' filename # 使用BEGIN对文件进行预处理 $1、$2、$3代表第一个字段、第二个字段、第三个字段等等，其默认分隔符为空格或者是TAB awk -F ':' '{ print $1,$2 }' # 使用-F 选项可以自定义分隔符 # 多个字段之间使用逗号分开或者空格分开，效果不一样。 2. 模式匹配 # 两种模式匹配方式 # 第一种，使用正则表达式 awk '/[REGEX]/{print $0}' test # 第二种，使用关系运算符，>,=,==,~(匹配regex),!~(不匹配regex的行信息) # 逻辑运算符，与或非，&&,||,! awk '$3>50{print $0}' test # 输出第三个字段长度大于50的所有行信息 awk '$3==\"test\"{print $0}' test # 输出第三个字段和test相同的所有行信息 awk '$3~/[0-9]{3}/{print $0}' test # 输出第三个字段符合正则的所有行信息 awk '$3213{print $0}' test 3. 变量 $ + 数字表示某个字段，变量NF表示当前行有多少个字段，因此$NF(Number Field)就代表最后一个字段 awk '{print NF, $(NF-1)}' test 3 java 3 python 4 feiya 变量NR(Number row)表示当前处理的是第几行，类似还有FNR awk -F/FS ':' '{print NR \") \" $1}' test # 若要将字符原样输出需要加入双引号 1) 001 hello ja提供了一些内置函数，方便对原始数据的处理。 2) 004 hello suo feiya 其他内置变量 FNR(file number field): 单独输出每个文件的行号 FILENAME：当前文件名 awk '{print FILENAME}' FS(field separator)：字段分隔符，默认是空格和制表符，也可以是空格和tab的混合。 RS(row sepatator)：行分隔符，用于分割每一行，默认是换行符。 awk 'BEGIN{RS=\"---\"}{print $0}' FILENAME OFS(output FS)：输出字段的分隔符，用于打印时分隔字段，默认为空格。 ORS(output RS)：输出记录的分隔符，用于打印时分隔记录，默认为换行符。 OFMT：数字输出的格式，默认为％.6g。 ARGC:命令行参数个数 ARGV:命令行参数数组 4. array awk 中的数组与shell中的数组有些许不同 awk数组写法 # awk中的数组元素可以不连续 awk 'BEGIN{array[0]=\"suofeiya\";array[1]=\"hello\";array[2]=\"world\";print array[0]}' # awk数组可以使用键值对 awk 'BEGIN{array[\"hello\"]=\"suofeiya\";print array[\"hello\"]}' # 遍历数组 for(a in array) print array[a] 可以使用if index in array[index]来判断是否存在相应的元素 5. 格式化输出printf # 格式符 %f 浮点数 %x 16进制数字 %o 8进制数 %e 使用科学计数法 %c 打印单个字符的ASCII码 # 左右对齐 - 左对齐 + 右对齐 \\# 显示在八进制前面加上0，十六进制前面加上0x # 基本使用方法 awk '{printf \"%-10s %-20s\\n\",$1,$3}' test awk '{printf \"%#x\",$1}' test 6. 函数 简单举例 # 使用awk内置函数toupper()将内容转换为大写 awk '{print toupper($0 }' test 其他内置函数 tolower()：字符转为小写 length()：返回字符串长度 substr()：返回子字符串 sin()：正弦 cos()：余弦 sqrt()：平方根 rand()：返回一个0-1之间的随机数 完整函数手册：https://www.gnu.org/software/gawk/manual/html_node/Built_002din.html#Built_002din 7. 条件 格式：awk '条件 动作' 文件名 # print命令前面是一个正则表达式，只输出包含awk的行 awk '/awk/ {print $0}' test # 只输出奇数行内容 awk 'NR % 2 == 1 {print $0}' test # 输出第二行以后的内容 awk 'NR > 2 {print $0}' test 8. if语句 awk '{if ($1 > \"m\") print $1}' test awk '{if ($1 > \"m\") print $1; else print \"---\"}' test 9. 选项 -v引入外部变量，多个变量之间要多次使用-v参数 var1=\"hello world\" var2=123 awk -v var1=\"$var1\" -v var2=$var2 'BEGIN{print var1 var2}' -f引入外部含有awk的命令文件 -F指定文件分隔符 10. 其他 使用print打印多个变量时，中间使用逗号和空格分开不同，前者会自动将output加上空格，后者不会 11. 例子 awk '{print NR,$0}' test # 打印文件行号 awk '/9/{print $0}' test # 模式匹配 awk '{print \"'\\''\"$0\"'\\''\"}' test # 在每一行的行首和行尾添加单引号 awk '($2 >=9000){print $1, \"high\"}' test cat del2 | awk -F 'len:' 'BEGIN {sum=0} {sum += $2} END {print sum}' awk 'END{print NR}' filename # 打印总文件行数 awk -F: 'BEGIN{print \"username\",\"bash_type\"} {print $1,$NF}[9/9] print \"===END===\"}' passwd cat test | awk -F '/+' '{print $2}' | sort | uniq -c # 统计重复内容出现的次数 cat test | awk -F '/+' '{h[$2]++} END{for (i in h) print i,h[i]} ' # 方法二 12. 参考链接 An Awk tutorial by Example, Greg Grothaus 30 Examples for Awk Command in Text Processing, Mokhtar Ebrahim Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-22 19:27:15 "},"Linux/OpenSSL、PKI搭建、算法.html":{"url":"Linux/OpenSSL、PKI搭建、算法.html","title":"OpenSSL、PKI搭建","keywords":"","body":"1. 几种加密算法优缺点以及对应的协议1.1. 1、 对称加密：加密和解密使用同一秘钥1.2. 2、非对称加密(公钥加密):分为公钥和私钥1.3. 3、单向加密：提取出数据指纹,只能加密,不能解密2. 密钥交换3. SSL和TLS4. PKI(Public Key Infrastructure):公钥基础设施 This is OpenSSL、PKI搭建、加密算法和类型 StudyNote. 1. 几种加密算法优缺点以及对应的协议 1.1. 1、 对称加密：加密和解密使用同一秘钥 常见的算法有：DES,3DES,AES 特性以及缺点 特性： ​ 加密解密使用同一秘钥 ​ 将原始数据划分成多个块，并逐个进行加密 缺点： ​ 产生的秘钥过多 ​ 秘钥分发比较困难 基本用途：用来数据加密（保密性） 详情参考：对称加密_百度百科 1.2. 2、非对称加密(公钥加密):分为公钥和私钥 公钥(public key)从私钥中提取产生，可公开给所有人，私钥(secret key)由用户自行产生，需保证其完整性 常见的算法有：RSA,DSA,ELGamal,其中DSA一般只用来数字签名 基本用途： 数字签名：让接收方确认发送方的身份 密钥交换：发送方用对方的公钥加密一个对称密钥，并发送给对方 数据加密 详情参考：非对称加密算法_百度百科 1.3. 3、单向加密：提取出数据指纹,只能加密,不能解密 常用算法有md5(Message Digest5),sha1/224/256/384/512(Secure Hash Algorithm) 特性：定长输出，雪崩效应 雪崩效应：雪崩效应就是一种不稳定的平衡状态也是加密算法的一种特征，它指明文或密钥的少量变化会引起密文的很大变化 基本用途：保证数据的完整性 2. 密钥交换 IKE：Internet Key Exchange 常用算法：RSA,DH DH(Diffie-Hellman)算法：算法描述，目的在于使得两个用户安全地交换一个秘密密钥以便用于以后的报文加密，变种ECDH(椭圆曲线DH)，ECDHE(临时椭圆曲线DH) ](https://zh.wikipedia.org/wiki/X.509#证书组成结构) 3. SSL和TLS SSL：Secure Socket Layer 安全套接字层，发行版本v1.0 v2.0 v3.0 TLS：Transport Layer Security 传输安全层，版本v1.0 v1.1 v1.2 v1.3 参考资料：wiki百科_传输层安全性协议 OpenSSL命令行工具的使用： （1）对称加密 ​ 所用工具：openssl enc,gpg ​ 支持的算法有：3DES,AES,blowfish openssl enc -e -a -salt -in TESTFILE -out TESTFILE.cipher # -e表示加密文件，-a表示base64编码，-salt加盐添加杂质更安全 openssl enc -d -a -salt –in TESTFILE.cipherr -out OUT_TESTFILE # -d表示解密 （2）单向加密 ​ 所用工具：openssl dgst openssl dgst /PATH/TO/SOMEFILE （3）随机生成用户密码 ​ 所用工具：openssl passwd # 交互式密码生成工具 openssl passwd -1 -salt SALT # 参数-1代表使用md5加密，-salt加入混杂 （4）生成随机数 ​ 所用工具：openssl rand openssl rand -hex NUMBER openssl rand -base64 NUMBER （5）公钥加密 # 生成私钥 (umask 077; openssl genrsa -out /PATH/TO/PRIVATE_KEY_FILE NUM_BITS) # 提出公钥 openssl rsa -in /PATH/TO/PRIVATE_KEY_FILE -pubout Linux系统上的随机数生成器： ​ /dev/random：仅从熵池中返回随机数，当随机数用尽时阻塞 ​ /dev/urandom：从熵池中返回随机数，当随机数用尽时会利用软件生成伪随机数，非阻塞 伪随机数并不安全，不推荐使用 熵池中随机数的来源： ​ 硬盘IO中断的时间间隔 ​ 键盘IO中断的时间间隔 4. PKI(Public Key Infrastructure):公钥基础设施 公钥基础设施有： 签证机构：CA 注册机构：RA 证书吊销列表：CRL 证书存取库 参考：https://baike.baidu.com/item/%E5%85%AC%E9%92%A5%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/10881894?fromtitle=PKI&fromid=212376#2 X.509：公钥证书的格式标准https://zh.wikipedia.org/wiki/X.509#%E8%AF%81%E4%B9%A6%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84 建立私有CA 可以使用openssl和openca命令 openssl的三个组件： openssl: 多用途的命令行工具，包openssl libcrypto: 加密算法库，包openssl-libs ​ libssl：加密模块应用库，实现了ssl及tls，包nss openssl命令： ​ 配置文件：/etc/pki/openssl.cnf （1）生成私钥 (umask 077; openssl genrsa -out /etc/pki/CA/private/cakey.pem 4096) （2）生成自签证书 openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -out /etc/pki/CA/cacert.pem -days 3650 # 查看生成的自签名证书 openssl x509 -in /etc/pki/CA/cacert.pem -noout -text （3）为CA提供所需文件 touch /etc/pki/CA/{serial,index.txt} echo 01 > /etc/pki/CA/serials （用户端） 1）生成私钥 (umask 077;openssl genrsa -out app.key 1024) 2）生成证书申请文件 ```bash openssl req -new -key app.key -out app.csr ``` 3）将生成的csr证书问价发送给CA服务器 （4）CA服务器颁发证书 openssl ca -in app.csr -out /etc/pki/CA/certs/app.crt -days 100 # 查看证书中的信息 openssl x509 -in /etc/pki/CA/certs/app.crt -noout -serial -subject （5）将生成的crt证书发回客户端即可 吊销证书参考：https://www.cnblogs.com/along21/p/7595912.html#auto_id_5 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Linux/DNS服务器.html":{"url":"Linux/DNS服务器.html","title":"DNS服务器","keywords":"","body":"1. DNS资源纪录(Resource Record)2. BIND(Berkeley Internet Name Domain)2.1. BIND的高级应用3. 其他 This is DNS服务器 StudyNote. 1. DNS资源纪录(Resource Record) 资源记录，简称rr，常用的七大记录类型是：SOA,A,AAAA,PTR,MX,CNMAE和NS （1）SOA：名叫起始授权机构记录，SOA记录说明了在众多NS记录里那一台才是主要的服务器 （2）A：记录除了进行域名IPv4对应以外，还有一个高级用法，可以作为低成本的负载均衡的解决方案，同一站点可以创建多个A记录，对应多台物理服务器的IP地址，可以实现基本的流量均衡 （3）AAAA：和A记录类似，但采用IPv6地址来记录 （4）PTR：PTR记录也被称为指针记录，PTR记录是A记录的逆向记录，作用是把IP地址解析为域名 （5）MX：全称是邮件交换记录，在使用邮件服务器的时候，MX记录是无可或缺的。优先级：0-99，数字越小优先级越高 （6）CNMAE：别名记录 （7）NS：NS记录和SOA记录是任何一个DNS区域都不可或缺的两条记录，NS记录也叫名称服务器记录，用于说明这个区域有哪些DNS服务器负责解析 个别常用rr的配置文件语法 SOA ZONE_NAME IN SOA nameserver.example.com. example.email.com. ( 20191010 ; serial number 区域数据库的序列号，更新时使用 3600 ; refresh [1h] 表示slave dns服务器找master dns服务器更新区域数据文件的时间间隔 600 ; retry [10m] 表示slave dns服务器找master dns服务器更新区域数据文件时，如果联系不上master，则等待多久再重试联系，该值一般比refresh时间短，否则该值表示的重试就失去了意义 86400 ; expire [1d] 表示slave dns服务器上的区域数据文件多久过期 3600 ) ; min TTL [1h] 表示客户端找dns服务器解析时，否定答案的缓存时间长度 NS example.com. TTL IN NS ns.example.com. PTR 4.3.2.1.in-addr.arpa. IN PTR example.com. CNAME web.example.com. IN CNAME www.example.com. MX example.com. IN MX 10 mx1.example.com. 注意： （1）TTL可以从全局配置继承 （2）@表示当前区域名称 （3）相邻的两条记录其ZONE_NAME相同时，可以省略 （4）对于正向解析区域来说，各个MX或者NS等类型记录的值应该为FQDN，并且此FQDN应该有一个A记录 2. BIND(Berkeley Internet Name Domain) BIND所含程序包 bind-libs：被bind程序和bind-utils包所用到库文件 bind-utils：bind客户端程序集，例如dig，host和nslookup等 扩展：dig，host，nslookup的简单使用 ​ dig：专用于测试dns系统，因此不会去查询本地hosts文件 ​ 格式及选项：dig [-t PR_TYPE] domain_name [@server] [options]，-X反向解析测试 ​ +[no]trace:跟踪解析过程 ​ +[no]recurse:进行递归解析 dig -X 1.1.1.1 # 反向解析IP dig -t afxr www.baidu.com @127.0.0.1 ​ host：格式host [-t PR_TYPE] name SERVER_IP ​ nslookup：用于查询DNS的记录，查询域名解析是否正常 ​ 格式及选项：nslookup domain [dns-server] # 交互式模式的简单使用 server IP # 以指定IP为DNS服务器进行查询 set q=PR_TYPE # 要查询的资源类型记录 name # 要查询的名称 bind内置的rndc(named服务控制)命令： ​ rndc status ​ rndc flush bind：提供dns服务程序 bind-chroot：将bind运行于jail环境之下 安装bind # CentOS7环境下安装 yum install bind 官网地址：https://www.isc.org/bind/ 主配置文件：/etc/named.conf，bind的解析库文件为/var/named目录下后缀名为.zone rndc(remote name domain contoller)：默认监听端口953/tcp，默认只允许本地使用 启动bind：使用systemctl start named.service即可 配置解析一个正向区域 （1）定义区域 ​ 在主配置文件或者辅助配置文件中设置 zone \"ZONE_NAME\" IN{ type {master|slave|hint|forward} file \"ZONENAME_FILE.zone\" } （2）建立区域数据文件 ​ 在/var/named目录下建立相应的区域数据文件，文件名称为/var/named/ictw.top.zone $TTL 3600 $ORIGIN ictw.top. @ IN SOA ns1.ictw.top. ictw.qq.com. ( 20191023 1H 10M 3D 1D ) IN NS ns1 IN MX 10 mx1 ns1 IN A 172.16.122.128 mx1 IN A 172.16.122.129 www IN A 172.16.122.128 web IN A 172.16.122.128 （3）权限修改以及语法错误检测 # 修改区域数据文件权限 chgrp named /var/named/ictw.zone chmod o= /var/named/ictw.zone # 或者复制named.localhost的属性，然后再进行修改 cp -a named.localhost ictw.zone # 语法错误检测 named-checkzone ZONE_NAME ZONE_FILE （4）让dns服务器重读配置文件和区域数据库文件 rndc reload # 或者 systemctl reload named.service # 查看bind状态 rndc status （5）使用dig -t axfr ictw.top @127.0.0.1或者host -t axfr ictw.top 127.0.0.1检查是否成功运作 配置反向解析区域 （1）编辑/etc/named.rfc1912.zones文件添加反向解析区域 zone \"122.16.172.in-addr.arpa\" IN { type master; file \"122.16.172.zone\"; }; （2）建立区域数据库文件，文件为/var/named/122.16.172.zone $TTL 3600 $ORIGIN 122.16.172.in-addr.arpa. @ IN SOA ns1.ictw.top. ictw.qq.com. ( 20191023 1H 10M 3D 1D ) IN NS ns1.ictw.top. 130 IN PTR blog.ictw.top. 141 IN PTR test.ictw.top. （3）检查配置文件并重读 named-checkconf named-chekzone ZONE_NAME FILE_NAME rndc reload （4）测试 dig -x 172.16.122.130 @127.0.0.1 2.1. BIND的高级应用 主从DNS 在从DNS服务器上 （1）配置一个正向从区域，放置于/etc/named.rfc1912.zones zone \"ZONE_NAME\" IN { type slave; file \"slaves/ZONE_NAME.zone\"; masters { MASTER_IP; }; }; （2）配置文件语法检查named-checkconf （3）重载配置rndc reload 在主DNS服务器上 （1）编辑/etc/named/ictw.top.zone文件，添加一个NS记录，并指定其IP地址 ... IN NS ns2 ns2 IN A 172.16.122.132 ... （2）修改serial号后，重载配置rndc reload即可 反向解析也是如此. 子域授权 在主服务器上 （1）编辑配置文件，添加一个子域，例如 ... child.ictw.top. IN NS ns2.ictw.top. ns2.ictw.top. IN A 172.16.122.132 ... 在子域服务器上 （1）编辑配置文件，添加解析域 zone \"child.ictw.top\" IN { type master; file \"child.ictw.top.zone\"; }; （2）编辑域文件child.ictw.top.zone $TTL 3600 $ORIGIN child.ictw.top. @ IN SOA ns1.ictw.top. ictw.qq.com. ( 20191023 1H 10M 3D 1D ) IN NS ns1 ns1 IN A 172.16.122.132 www IN A 172.16.122.123 （3）rndc reload，分别在主服务器和子域服务区进行测试 dig -t A www.child.ictw.top @127.0.0.1 定义转发 （1）区域转发：仅转发对某特定区域的解析请求 zone \"ZONE_NAME\" IN { type forward; forward {first | only}; forwarders { SERVER_IP; }; }; first 和 only 转发方式的区别： ​ 前者为首先转发，转发器不响应时，自行会去迭代查询 ​ 后者只转发，不会去迭代查询 （2）全局转发：将自己无法解析的zone，统统转发给指定dns服务器来解析 # 修改指定dns服务器的/etc/named.conf文件，添加以下参数 forward only; forwarders { 172.16.122.128; }; bind中的基础安全配置 （1）acl访问控制（写在options选项之前）： acl acl_name { ip; net/netmask; }; opinions{ ... } acl的四个内置参数： ​ none，any，local，localnet（本机所在网络） （2）访问控制（置于区域数据中） allow-query { };：允许查询的主机，白名单模式 allow-transfer { };：允许向那些主机区域进行传送，默认为所有主机，一般配置于从服务器 allow-recursion{ };(opinions中使用)：允许哪些主机向当前dns服务器发起递归查询请求 allow-update{ };：用于DDNS，一般禁用该选项，赋予none值 智能DNS（BIND View）：内外网分流 格式： view VIEW_NAME { zone_name{ ... }; }; 例子： # 内网 view Internal { match-clients { 172.16.122.0/8; }; # 所匹配到的网络 zone \"ictw.top\" IN { type master; file \"ictw.top/internal\"; }; } # 外网 view external { match-clients { any;}; zone \"ictw.top\" IN { type master; file \"ictw.top/external\"; }; } 3. 其他 解决一堆SERVFAIL unexpected RCODE resolving './NS/IN': 199.9.14.201#53的问题 编辑bind的主配置文件/etc/named.conf，将logging参数修改为 logging { category lame-servers { null; }; }; 重启named即可 whois命令的简单使用whois Domian_name Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-16 16:16:54 "},"Linux/Frp内网穿透.html":{"url":"Linux/Frp内网穿透.html","title":"Frp内网穿透","keywords":"","body":"1. Frp内网穿透2. Golang安装与使用3. Gotty的简单使用1. Frp内网穿透 使用脚本一键搭建FRPC服务端 wget --no-check-certificate https://raw.githubusercontent.com/clangcn/onekey-install-shell/master/frps/install-frps.sh -O ./install-frps.sh chmod 700 ./install-frps.sh ./install-frps.sh install 安装结束后显示 Congratulations, frps install completed! ============================================== You Server IP : 59.110.139.188 Bind port : 5443 KCP support : true vhost http port : 80 vhost https port : 443 Dashboard port : 6443 token : 3lapma0Q6loxIysp tcp_mux : true Max Pool count : 50 Log level : info Log max days : 3 Log file : enable ============================================== frps Dashboard : http://59.110.139.188:6443/ Dashboard user : suofeiya Dashboard password : Frp244 ============================================== 更新卸载管理命令 更新命令: ./install-frps.sh update 卸载命令: ./install-frps.sh uninstall 服务器端管理命令: 服务端程序提供了以下几组功能： 运行程序： /etc/init.d/frps start 停止程序： /etc/init.d/frps stop 重启程序： /etc/init.d/frps restart 运行状态： /etc/init.d/frps status 配置程序： /etc/init.d/frps config 程序版本： /etc/init.d/frps version 更多帮助请移步官方帮助文件: https://github.com/fatedier/frp/blob/master/README_zh.md FRPC客户端配置 mkdir frp #建立文件夹frp cd frp #进入frp文件夹 wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz #下载frp vi frpc.ini #修改frpc文件 ./frpc -c ./frpc.ini #临时启动启动frpc服务端 nohup ./frpc -c ./frpc.ini & #后台保持启动 # 设置计划任务开启开机自动启动frpc # 计划命令 /frp/frp_0.29.0_linux_amd64/frpc -c /frp/frp_0.29.0_linux_amd64/frpc.ini FRPC配置文件frpc.ini示例 [common] server_addr = 35.xx.xxx.xx server_port = 5443 token = xxxxxxx [home] type = http local_ip = 10.1.1.8 local_port = 8123 remote_port = 8123 use_encryption = true use_compression = true custom_domains = home.ictw.top 2. Golang安装与使用 1、下载二进制包：go1.4.linux-amd64.tar.gz。 2、将下载的二进制包解压至 /usr/local目录。 tar -C /usr/local -xzf go1.4.linux-amd64.tar.gz 3、将 /usr/local/go/bin 目录添加至PATH环境变量： export PATH=$PATH:/usr/local/go/bin ``` 3. Gotty的简单使用 gotty -w bash 详情参见:https://github.com/yudai/gotty ``` Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-18 16:24:01 "},"Linux_FileSystem/":{"url":"Linux_FileSystem/","title":"Linux文件系统","keywords":"","body":"1. Linux FileSystem-目录1.1. FTP1.2. SAMBA1.3. NFS1. Linux FileSystem-目录 1.1. FTP 1.2. SAMBA 1.3. NFS Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-28 18:41:08 "},"Linux_FileSystem/FTP.html":{"url":"Linux_FileSystem/FTP.html","title":"FTP","keywords":"","body":"1. vsFTP登录方式及FTP数据连接2. vsFTP安装及其程序环境3. vsFTP配置文件参数3.1. 基本选项3.2. 欢迎语设置3.3. 限制最大连接数和传输速率3.4. 指定用户的权限设置3.5. 控制用户是否允许切换到上级目录3.6. 设置用户组3.7. 连接超时设定3.8. 虚拟用户使用 pam_mysql.so 模块认证 This is FTP StudyNote. 1. vsFTP登录方式及FTP数据连接 FTP可以有三种登入方式分别是： 匿名(anonymous)登录方式：不需要用户密码，匿名用户默认全部都映射ftp用户，其目录在/var/ftp 本地用户登入：使用本地用户和密码登入，使用的是PAM认证(/etc/pam.d/vsftpd)，其默认目录为系统用户的家目录 虚拟用户方式：也是使用用户和密码登入，但是该用户不是linux中创建的用户 FTP的两个连接，分别是命令连接和数据连接，其中数据连接的建立方式又分为主动和被动连接两种： FTP服务端会监听2个端口, 控制进程20,数据进程21(主动模式) 数据连接,站在服务器角度,有2种模式： 主动模式：ftp server从20端口主动向客户端发起连接,由于源端口固定,所以适用于模式防火墙模式. 被动模式：ftp server被动等待客户端来连我的这个端口(控制连接后会告知会将passive ip/port告知了客户端) 一般情况下默认都是被动模式 2. vsFTP安装及其程序环境 源码和二进制包下载地址：https://pkgs.org/download/vsftpd yum install -y vsftpd 主要文件目录： 主程序：/usr/sbin/vsftp 启动脚本文件：/etc/rc.d/init.d/vsftpd 系统服务单元目录：/usr/lib/systemd/system/vsftpd.service 主配置文件：/etc/vsftp/vsftp.conf /etc/pam.d/vsftpd：PAM认证文件（此文件中file=/etc/vsftpd/ftpusers字段，指明阻止访问的用户来自该文件中的用户） /etc/vsftpd/ftpusers：禁止使用vsftpd的用户列表文件【黑名单】 /etc/vsftpd/user_list：禁止或允许使用vsftpd的用户列表文件，这个文件中指定的用户缺省情况（即在/etc/vsftpd/vsftpd.conf中设置userlist_deny=YES）下也不能访问FTP服务器，在设置了userlist_deny=NO时,仅允许user_list中指定的用户访问FTP服务器 匿名用户数据根目录：/var/ftp 匿名用户的下载上传目录：/var/ftp/pub此目录需赋权根chmod 1777 pub（1为特殊权限，使上载后无法删除） vsFTP的日志文件：/etc/logrotate.d/vsftpd.log 3. vsFTP配置文件参数 3.1. 基本选项 # 是否允许匿名登录FTP服务器，默认设置为YES允许 # 用户可使用用户名ftp或anonymous进行ftp登录，口令为用户的E-mail地址。 # 如不允许匿名访问则设置为NO anonymous_enable=YES # 是否允许本地用户(即linux系统中的用户帐号)登录FTP服务器，默认设置为YES允许 # 本地用户登录后会进入用户主目录，而匿名用户登录后进入匿名用户的下载目录/var/ftp/pub # 若只允许匿名用户访问，前面加上注释掉即可阻止本地用户访问FTP服务器 local_enable=YES # 是否允许本地用户对FTP服务器文件具有写权限，默认设置为YES允许 write_enable=YES # 掩码，本地用户默认掩码为077 # 你可以设置本地用户的文件掩码为缺省022，也可根据个人喜好将其设置为其他值 local_umask=022 # 是否允许匿名用户上传文件，须将全局的write_enable=YES。默认为YES anon_upload_enable=YES # 是否允许匿名用户创建新文件夹 anon_mkdir_write_enable=YES # 是否激活目录欢迎信息功能 # 当用户用CMD模式首次访问服务器上某个目录时，FTP服务器将显示欢迎信息 # 默认情况下，欢迎信息是通过该目录下的.message文件获得的 # 此文件保存自定义的欢迎信息，由用户自己建立 dirmessage_enable=YES # 是否让系统自动维护上传和下载的日志文件 # 默认情况该日志文件为/var/log/vsftpd.log,也可以通过下面的xferlog_file选项对其进行设定 # 默认值为NO xferlog_enable=YES # Make sure PORT transfer connections originate from port 20 (ftp-data). # 是否设定FTP服务器将启用FTP数据端口的连接请求 # ftp-data数据传输，21为连接控制端口 connect_from_port_20=YES # 设定是否允许改变上传文件的属主，与下面一个设定项配合使用 # 注意，不推荐使用root用户上传文件 chown_uploads=YES # 设置想要改变的上传文件的属主，如果需要，则输入一个系统用户名 # 可以把上传的文件都改成root属主。whoever：任何人 chown_username=whoever * # 设定系统维护记录FTP服务器上传和下载情况的日志文件 # /var/log/vsftpd.log是默认的，也可以另设其它 xferlog_file=/var/log/vsftpd.log # 是否以标准xferlog的格式书写传输日志文件 # 默认为/var/log/xferlog，也可以通过xferlog_file选项对其进行设定 # 默认值为NO xferlog_std_format=YES # 以下是附加配置，添加相应的选项将启用相应的设置 # 是否生成两个相似的日志文件 # 默认在/var/log/xferlog和/var/log/vsftpd.log目录下 # 前者是wu_ftpd类型的传输日志，可以利用标准日志工具对其进行分析；后者是vsftpd类型的日志 dual_log_enable= # 是否将原本输出到/var/log/vsftpd.log中的日志，输出到系统日志 syslog_enable= # 设置数据传输中断间隔时间，此语句表示空闲的用户会话中断时间为600秒 # 即当数据传输结束后，用户连接FTP服务器的时间不应超过600秒。可以根据实际情况对该值进行修改 idle_session_timeout=600 # 设置数据连接超时时间，该语句表示数据连接超时时间为120秒，可根据实际情况对其个修改 data_connection_timeout=120 # 运行vsftpd需要的非特权系统用户，缺省是nobody nopriv_user=ftpsecure # 是否识别异步ABOR请求。 # 如果FTP client会下达“async ABOR”这个指令时，这个设定才需要启用 # 而一般此设定并不安全，所以通常将其取消 async_abor_enable=YES # 是否以ASCII方式传输数据。默认情况下，服务器会忽略ASCII方式的请求。 # 启用此选项将允许服务器以ASCII方式传输数据 # 不过，这样可能会导致由\"SIZE /big/file\"方式引起的DoS攻击 ascii_upload_enable=YES ascii_download_enable=YES # 登录FTP服务器时显示的欢迎信息 # 如有需要，可在更改目录欢迎信息的目录下创建名为.message的文件，并写入欢迎信息保存后 ftpd_banner=Welcome to blah FTP service. # 黑名单设置。如果很讨厌某些email address，就可以使用此设定来取消他的登录权限 # 可以将某些特殊的email address抵挡住。 deny_email_enable=YES # 当上面的deny_email_enable=YES时，可以利用这个设定项来规定哪些邮件地址不可登录vsftpd服务器 # 此文件需用户自己创建，一行一个email address即可 banned_email_file=/etc/vsftpd/banned_emails # 用户登录FTP服务器后是否具有访问自己目录以外的其他文件的权限 # 设置为YES时，用户被锁定在自己的home目录中，vsftpd将在下面chroot_list_file选项值的位置寻找chroot_list文件 # 必须与下面的设置项配合 chroot_list_enable=YES # 被列入此文件的用户，在登录后将不能切换到自己目录以外的其他目录 # 从而有利于FTP服务器的安全管理和隐私保护。此文件需自己建立 chroot_list_file=/etc/vsftpd/chroot_list # 是否允许递归查询。默认为关闭，以防止远程用户造成过量的I/O ls_recurse_enable=YES # 是否允许监听。 # 如果设置为YES，则vsftpd将以独立模式运行，由vsftpd自己监听和处理IPv4端口的连接请求 listen=YES # 修改默认监听的端口，应当尽量大于4000 listen_port=4449 # 客户端连接语句：`lftp 172.16.122.126 4449` # 设定是否支持IPV6。如要同时监听IPv4和IPv6端口， # 则必须运行两套vsftpd，采用两套配置文件 # 同时确保其中有一个监听选项是被注释掉的 listen_ipv6=YES # 设置PAM外挂模块提供的认证服务所使用的配置文件名，即/etc/pam.d/vsftpd文件 # 此文件中file=/etc/vsftpd/ftpusers字段，说明了PAM模块能抵挡的帐号内容来自文件/etc/vsftpd/ftpusers中 pam_service_name=vsftpd # 是否允许ftpusers文件中的用户登录FTP服务器，默认为NO # 若此项设为YES，则user_list文件中的用户允许登录FTP服务器 # 而如果同时设置了userlist_deny=YES，则user_list文件中的用户将不允许登录FTP服务器，甚至连输入密码提示信息都没有 userlist_enable=YES/NO # 设置是否阻扯user_list文件中的用户登录FTP服务器，默认为YES userlist_deny=YES/NO # 是否使用tcp_wrappers作为主机访问控制方式。 # tcp_wrappers可以实现linux系统中网络服务的基于主机地址的访问控制 # 在/etc目录中的hosts.allow和hosts.deny两个文件用于设置tcp_wrappers的访问控制 # 前者设置允许访问记录，后者设置拒绝访问记录。 # 如想限制某些主机对FTP服务器192.168.57.2的匿名访问，编缉/etc/hosts.allow文件，如在下面增加两行命令： # vsftpd:192.168.57.1:DENY 和vsftpd:192.168.57.9:DENY # 表明限制IP为192.168.57.1/192.168.57.9主机访问IP为192.168.57.2的FTP服务器 # 此时FTP服务器虽可以PING通，但无法连接 tcp_wrappers=YES FROM：https://www.jb51.net/article/94223.htm 3.2. 欢迎语设置 dirmessage_enable=YES/NO（YES）：如果启动这个选项，那么使用者第一次进入一个目录时，会检查该目录下是否有.message这个档案，如果有，则会出现此档案的内容，通常这个档案会放置欢迎话语，或是对该目录的说明。默认值为开启。 message_file=.message：设置目录消息文件，可将要显示的信息写入该文件。默认值为.message。 banner_file=/etc/vsftpd/banner：当使用者登入时，会显示此设定所在的档案内容，通常为欢迎话语或是说明。默认值为无。如果欢迎信息较多，则使用该配置项。 ftpd_banner=Welcome to AGou's FTP server：这里用来定义欢迎话语的字符串，banner_file是档案的形式，而ftpd_banner 则是字符串的形式。预设为无。 3.3. 限制最大连接数和传输速率 max_client：用于设置FTP服务器所允许的最大客户端连接数，值为0时表示不限制。例如max_client=100表示FTP服务器的所有客户端最大连接数不超过100个。 max_per_ip： 用于设置对于同一IP地址允许的最大客户端连接数，值为0时表示不限制。例如max_per_ip=5表示同一IP地址的FTP客户机与FTP服务器建立的最大连接数不超过5个。 local_max_rate： 用于设置本地用户的最大传输速率，单位为B/s，值为0时表示不限制。例如local_max_rate=500000表示FTP服务器的本地用户最大传输速率设置为500KB/s. anon_max_rate：用于设置匿名用户的最大传输速率，单位为B/s,值为0表示不限制。例如ano_max_rate=200000，表示FTP服务器的匿名用户最大传输速率设置为200KB/s. 3.4. 指定用户的权限设置 vsftpd.user_list文件需要与vsftpd.conf文件中的配置项结合来实现对于vsftpd.user_list文件中指定用户账号的访问控制： （1）设置禁止登录的用户账号（黑名单） 当vsftpd.conf配置文件中包括以下设置时，vsftpd.user_list文件中的用户账号被禁止进行FTP登录： userlist_enable=YES userlist_deny=YES userlist_enable设置项设置使用vsftpd.user_list文件，userlist_deny设置为YES表示vsftpd.user_list文件用于设置禁止的用户账号。 （2）设置只允许登录的用户账号（白名单，建议方式） 当vsftpd.conf配置文件中包括以下设置时，只有vsftpd.user_list文件中的用户账号能够进行FTP登录： userlist_enable=YES userlist_deny=NO 3.5. 控制用户是否允许切换到上级目录 在默认配置下，本地用户登入FTP后可以使用cd命令切换到其他目录，这样会对系统带来安全隐患。可以通过以下三条配置文件来控制用户切换目录： chroot_list_enable=YES/NO（NO）：设置是否启用chroot_list_file配置项指定的用户列表文件。默认值为NO。 chroot_list_file=/etc/vsftpd.chroot_list：用于指定用户列表文件，该文件用于控制哪些用户可以切换到用户家目录的上级目录。 chroot_local_user=YES/NO（NO）：用于指定用户列表文件中的用户是否允许切换到上级目录。默认值为NO。 通过搭配能实现以下几种效果： ①当chroot_list_enable=YES，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。 ②当chroot_list_enable=YES，chroot_local_user=NO时，在/etc/vsftpd.chroot_list文件中列出的用户，不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录。 ③当chroot_list_enable=NO，chroot_local_user=YES时，所有的用户均不能切换到其他目录。 ④当chroot_list_enable=NO，chroot_local_user=NO时，所有的用户均可以切换到其他目录。 3.6. 设置用户组 简单示例： mkdir -p /home/ftpuser # 递归创建新目录 groupadd ftpuser 新建组 useradd -g ftpuser -d /home/ftpuser ftpuser1 #新建用户ftpuser1并指定家目录和属组 useradd -g ftpuser -d /home/ftpuser ftpuser2 #新建用户ftpuser2并指定家目录和属组 useradd -g ftpuser -d /home/ftpuser ftpuser3 # 新建用户ftpuser3并指定家目录和属组 chown ftpuser1 /home/ftpuser # 设置目录属主为用户ftpuser1 chown .ftpuser /home/ftpuser # 设置目录属组为组ftpuser chmod 750 /home/ftpuser #设置目录访问权限ftpuser1为读，写，执行；ftpuser2，ftpuser3为读，执行` 说明：由于本地用户登录FTP服务器后进入自己主目录，而ftpuser1，ftpuser2， ftpuser3对主目录/home/ftpuser分配的权限不同，所以通过FTP访问的权限也不同，ftpuser1访问权限为：上传，下载，建目录；ftpuser2，ftpuser3访问权限为下载，浏览，不能建目录和上传。实现了群组中用户不同访问级别，加强了对FTP服务器的分级安全管理。 3.7. 连接超时设定 配置空闲的用户会话的中断时间：如下配置将在用户会话空闲5分钟后被中断，以释放服务器的资源 Idle_session_timeout=300 配置空闲的数据连接的中断时间：如下配置将在数据空闲连接1分钟后被中断，同样也是为了释放服务器的资源 Data_connection_timeout=60 配置客户端空闲时的自动中断和激活连接的时间：如下配置将使客户端空闲1分钟后自动中断连接，并在30秒后自动激活连接 Accept_timeout=60 Connect_timeout=30 3.8. 虚拟用户使用 pam_mysql.so 模块认证 创建用户，并建立数据库 # 创建可用用户，此处可以只给其读权限 MariaDB [(none)]> GRANT ALL ON vsftpd.* TO vsftpd@'127.0.0.1' IDENTIFIED BY 'vsftpd'; MariaDB [(none)]> FLUSH PRIVILEGES; # 建立数据库 MariaDB [(none)]> CREATE DATABASE vsftpd; MariaDB [(none)]> use vsftpd; # 创建账号密码表 MariaDB [vsftpd]> CREATE TABLE users(id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL, password CHAR(48) NOT NULL,UNIQUE KEY(name)); # 添加用户和密码 MariaDB [vsftpd]> INSERT INTO users(name,password) VALUES ('suofeiya',PASSWORD('suofeiya')),('test',PASSWORD('test')); # 查看创建结果 MariaDB [vsftpd]> SELECT * FROM users; +----+----------+-------------------------------------------+ | id | name | password | +----+----------+-------------------------------------------+ | 1 | suofeiya | *46AE36A05192361576481222E6D5358109134F64 | | 2 | test | *94BDCEBE19083CE2A1F959FD02F964C7AF4CFC29 | +----+----------+-------------------------------------------+ 为虚拟用户添加家目录 mkdir -pv /data useradd -d /data/ftpvuser ftpvuser # 检查是否成功创建用户 finger ftpvuser 安装认证所需的pam_mysql.so模块 # 在CentOS 6上，直接安装pam_mysql即可 yum install -u pam_mysql * 需要注意的一点是：`pam_mysql`属于`epel`仓库，需要提前安装好`epel`仓库 # 在CentOS 7上，需要编译安装pam_mysql.so模块 # 源码包下载地址：https://sourceforge.net/projects/pam-mysql/ # 预先准备 yum groupinstall \"Development Tools\" -y yum groupinstall mysql-devel pam-devel -y # 编译并安装 ./configure --with-mysql=/usr --with-pam=/usr --with-pam-mods-dir=/usr/lib64/security make;make install # 检查是否成功安装 ls /usr/lib64/security/ | grep pam_mysql.so 建立pam认证所需文件 vim /etc/pam.d/vsftp.vuser #### auth required /lib64/security/pam_mysql.so user=vsftpd passwd=vsftpd host=127.0.0.1 db=vsftpd table=users usercolumn=name passwdcolumn=password crypt=2 account required /lib64/security/pam_mysql.so user=vsftpd passwd=vsftpd host=127.0.0.1 db=vsftpd table=users usercolumn=name passwdcolumn=password crypt=2 #### 修改vsftp的配置文件 vim /etc/vsftpd/vsftpd.conf #### pam_service_name=vsftpd # 修改为 --> pam_service_name=vsftp.vuser #其他 配置 guest_enable=YES guest_username=ftpvuser #### 为虚拟用户添加所需权限（对用户单独配置权限） # 编辑vsftp的配置文件，添加以下内容，表示用户配置目录 #### user_config_dir=/etc/vsftpd/vusers.d/ #### # 创建目录 mkdir /etc/vsftpd/vusers.d/ # 创建与用户名同名的配置文件，为用户添加上传和创建目录权限 vim /etc/vsftpd/vusers.d/suofeiya #### anon_upload_enable=YES anon_mkdir_write_enable=YES #### # 重启服务使其生效 systemctl restart vsftpd 出现的一些小问题： 登录被拒绝，解决方法： # 去除目录的写权限 chmod a-w /data/ftpvuser 使用ls命令出现226 Transfer done (but failed to open directory).无法使用等问题，解决方法： # 修改共享文件夹的属组属组即可 chown ftpvuser:ftpvuser /data/ftpvuser/pub Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-30 21:50:46 "},"Linux_FileSystem/SAMBA.html":{"url":"Linux_FileSystem/SAMBA.html","title":"SAMBA","keywords":"","body":"1. SAMBA相关2. 所需软件及守护进程说明3. SAMBA安装与使用3.1. 使用yum安装SMABA3.2. SAMBA的简单使用(单用户)3.3. SAMBA共享目录3.4. smb.conf 配置详解3.5. Windows/Linux客户端挂载SAMBA4. pdbedit、smbpasswd、smbclient的使用4.1. pdbedit(增删用户 --> passdb.tdb 库中)4.2. smbpasswd(增删用户 --> 单独文件中)4.3. smbclient(客户端工具)5. samba-swat(SMABA的WEB管理工具)5.1. SWAT的安装5.2. 配置与启动 Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，主要用于实现Windows和Linux之间互相共享资源. 1. SAMBA相关 SMB（Server Message Block）通信协议：是微软（Microsoft）和英特尔(Intel)在1987年制定的协议，主要是作为Microsoft网络的通讯协议，SMB协议在局域网上用于服务器文件访问和打印的协议。SMB 是在会话层（session layer）和表示层（presentation layer）以及小部分应用层（application layer）的协议。 CIFS (Common Internet File System)：通用Internet文件系统，在windows主机之间进行网络文件共享是通过使用微软公司自己的CIFS服务实现的，例如：Windows的网上邻居功能 SMB协议的实现在Windows上是CIFS，在Linux系统上是SMABA Samba服务采用C/S模式,，其工作机制是让NetBIOS（Windows 网上邻居的通信协议）和SMB两个协议运行于TCP/IP通信协议之上，并且用NetBIOS协议让Windows在“网上邻居”中能浏览Linux服务器。Samba服务器既可以充当文件共享服务器，也可以充当一个Samba的客户端，例如，一台在Linux 下已经架设好的Samba服务器，windows客户端就可以通过SMB协议共享Samba服务器上的资源文件，同时，Samba服务器也可以访问网络中 其它windows系统或者Linux系统共享出来的文件 FROM:https://blog.51cto.com/itwish/2174270 2. 所需软件及守护进程说明 Samba所需软件包括： Samba（服务器端软件包） Samba-client（客户端软件包） Samba-common（Samba公共文件软件包） Samba-Winbind（使用 Windows 域控制器管理 Linux 帐户） Samba由smbd和 nmbd两个守护进程组成： smbd服务进程是Samba的核心启动服务，用于提供smb/cifs服务，主要负责建立 Linux Samba服务器与Samba客户机之间的对话，为客户端提供文件共享与打印机服务及负责用户权限验证以及锁功能，smdb默认监听端口是 139 与 445 TCP端口 nmbd进程提供NetBIOS名称服务，用于实现Windows访问Linux文件，以满足基于Common Internet File System(CIFS)协议的共享访问环境（类似与DNS实现的功能，实现把Linux系统共享的工作组名称与其IP对应起来），Samba通过nmb 服务启动 nmbd进程，该进程默认监听的是137与 138 UDP端口 3. SAMBA安装与使用 3.1. 使用yum安装SMABA # 服务器端程序 yum install -y smaba # 客户端程序 yum install -y smaba-client 3.2. SAMBA的简单使用(单用户) 修改smb.conf参数（不修改默认也可以直接运行samba）： #======================= Global Settings ===================================== # ----------------------- Network-Related Options ------------------------- # interfaces选项，值可以使用网卡名，也可以使用网卡地址，默认为所有地址，比如： interfaces = lo ens33 172.16.122. # 简单写法172.16.122. 表示172.16.122.0/24网段的地址 # --------------------------- Logging Options ----------------------------- # 日志滚动分割 # log file = specify where log files are written to and how they are split # log files split per-machine: log file = /var/log/samba/log.%m # 文件名称 # maximum size of 50KB per log file, then rotate: max log size = 50 # 单个日志文件最大大小 # ----------------------- Standalone Server Options ------------------------ security = user # 系统用户安全模式，使用的是系统的用户 passdb backend = tdbsam # 密码不是系统用户的密码 检查配置文件语法错误，使用命令testparm即可 语法检查无错误的话，可以直接启动samba服务 systemctl start nmb smb 创建用户 useradd smb # 可以不指定用户密码 # 使用使用smbpasswd为该用户指定samba密码 smbpasswd -a smb * 注意：首次创建用户的时候需要使用`-a`选项 客户端挂载samba # 列出服务器端的samba共享目录 smbclient -L 172.16.122.132 -U smb # 交互式命令行连接使用samba smbclient //172.16.122.132/smb -U smb 3.3. SAMBA共享目录 编辑smb.conf配置文件，添加自定义共享目录 # 添加以下内容 #### [sharing] comment = sharing samba files path = /data/samba public = yes writable = yes browseable =yes #### 检查语法错误testparm 重启nmb和smb服务 客户端查看并使用 # 查看 smbclient -L 172.16.122.132 -U smb #### 结果 Sharename Type Comment --------- ---- ------- ` sharing Disk sharing samba files` IPC$ IPC IPC Service (Samba Server Version 4.9.1) smb Disk Home Directories #### # cli使用 smbclient //172.16.122.132/sharing -U smb%123 可以使用facl来针对某些用户进行权限控制 3.4. smb.conf 配置详解 smb.conf文件详解 3.5. Windows/Linux客户端挂载SAMBA 对于Windows客户端查看Linux服务器端共享文件而言：可以通过网页浏览器、我的电脑或者网上邻居直接使用，具体方法是在地址栏输入 # 使用IP访问 \\\\172.16.122.133\\ # 使用域访问 \\\\ZONE\\ 对于Linux用户而言：有以下三种方法 # 方法一：使用smbclient客户端工具 smbclient //172.16.122.133/ -U # 方法二：使用mount手动挂载 mount -t cifs //172.16.122.133/ /mnt/samba -o username= # 方法三：使用`/etc/fstab`开机自动挂载，添入以下内容 #### //172.16.122.133/ /mnt/samba cifs defaults,_netdev,user=suofeiya,password=suofeiya 0 0 # 或者 //172.16.122.133/ /mnt/samba cifs defaults,_netdev,credentials=/etc/samba/pwd.txt 0 0 # `/etc/smaba/pwd.txt`内容 username=suofeiya password=suofeiya #### 4. pdbedit、smbpasswd、smbclient的使用 4.1. pdbedit(增删用户 --> passdb.tdb 库中) 参数列表： –a username # 新建Samba账户 –x username # 删除Samba账户 –L # 列出Samba用户列表，读取passdb.tdb数据库文件 –Lv # 列出Samba用户列表的详细信息 –c \"[D]\" –u username # 暂停该Samba用户账号的使用 –c \"[]\" –u username # 恢复该Samba用户账号的使用 -t # 从标准输出中接受用户信息，不显示提示符 4.2. smbpasswd(增删用户 --> 单独文件中) 参数列表： -a username # 向smbpasswd文件中添加用户，首次添加用户时需要加入该参数 -c /PATH/TO/CONF_FILE # 指定samba的配置文件 -x # 从smbpasswd文件中删除用户 -d # 在smbpasswd文件中禁用指定的用户 -e # 在smbpasswd文件中激活指定的用户 -n # 将指定的用户的密码置空 4.3. smbclient(客户端工具) 常用组合： smbclient -L 172.16.122.133 -U username%password # 列出samba共享服务器端的文件列表 * 服务器端可以使用smbstatus查看samba共享情况 smbclient //172.16.122.133/data/smaba -U username%password # 像ftp一样，使用smbclient 与samba服务器进行交互操作 smbclient -c \"ls\" //172.16.122.133//data/smaba -U username%password # 不进入交互界面，直接显示共享目录下的列表文件 5. samba-swat(SMABA的WEB管理工具) 5.1. SWAT的安装 # 首先需要xinetd，因为swat工具是嵌套在xinetd超级守护进程中，需要用xinetd来管理 yum install -y xinetd # 打开samba-swat的下载网站 * http://www.rpmfind.net/linux/rpm2html/search.php?query=samba-swat(x86-64) * https://centos.pkgs.org/7/centos-x86_64/samba-4.9.1-6.el7.x86_64.rpm.html # 在服务器端进行安装 yum install -y http://www.rpmfind.net/linux/mageia/distrib/5/x86_64/media/core/updates/samba-swat-3.6.25-2.9.mga5.x86_64.rpm 5.2. 配置与启动 # 编辑/etc/xinetd.d/swat文件 #### # default: off # description: SWAT is the Samba Web Admin Tool. Use swat \\ # to configure your Samba server. To use SWAT, \\ # connect to port 901 with your favorite web browser. service swat { port = 901 socket_type = stream wait = no only_from = 0.0.0.0 # 表示允许任意ip的主机访问 user = root server = /usr/sbin/swat log_on_failure += USERID disable = no # 把该项改为no ，代表启用swat 功能 } #### 重启xinetd服务来启动swat systemctl restart xinetd Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-02 19:03:29 "},"Linux_Tools/":{"url":"Linux_Tools/","title":"Linux工具","keywords":"","body":"Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-16 16:02:07 "},"Linux_Tools/fzf工具.html":{"url":"Linux_Tools/fzf工具.html","title":"fzf工具","keywords":"","body":"1. fzf简介与安装1.1. 安装与升级2. fzf简单使用2.1. 终端快捷键1. fzf简介与安装 fzf是一个： 命令行文本增强工具 终端-模糊查找神器 作为Vim插件工具 开源地址： https://github.com/junegunn/fzf 1.1. 安装与升级 使用git安装与升级： git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf ~/.fzf/install # 升级 cd ~/.fzf && git pull && ./install 在Debian系操作系统中： sudo apt install fzf -y 2. fzf简单使用 fzf默认会从STDIN读入数据，然后将结果输出到STDOUT find * -type f | fzf > selected 上面命令从find的搜索结果中读入，输出到文件selected中 2.1. 终端快捷键 Ctrl+T：查找目录下的所有文件 Ctrl+R：查找历史命令，再次按下Ctrl+R可以切换时间排序和相关性排序 Alt+C：列出当前文件夹下的目录，选中条目会自动进入到相应目录 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-11 16:47:35 "},"Linux_Tools/工具集合.html":{"url":"Linux_Tools/工具集合.html","title":"Linux工具集合","keywords":"","body":" glances 代替htop axel多线程下载工具 elinks在终端中显示网页内容，常用选项--dump直接输出而不进入交互模式 ag：比grep、awk更快的递归搜索文件内容 tig：字符模式下交互查看git项目，可以替代git命令 mycli：mysql客户端，支持语法高亮和命令补全，效果类似ipython，可以替代mysql命令 shellcheck：shell脚本静态检查工具，能够识别语法错误以及不规范的写法 fzf：命令行下模糊搜索工具，能够交互式智能搜索并选取文件或者内容，配合终端ctrl-r历史命令搜索简直完美 sz/rz：交互式文件传输，在多重跳板机下传输文件非常好用，不用一级一级传输 cloc：代码统计工具，能够统计代码的空行数、注释行、编程语言 multitail：多重 tail script/scriptreplay: 终端会话录制 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-11 16:21:14 "},"WEB_Server/":{"url":"WEB_Server/","title":"网站服务器","keywords":"","body":"Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-10 14:37:02 "},"WEB_Server/HTML基础.html":{"url":"WEB_Server/HTML基础.html","title":"HTML基础","keywords":"","body":"1. HTML基础标签1.1. Bootstrap 响应式框架1.2. XHTML1.2.1. XHTML 指的是可扩展超文本标记语言，XHTML 与 HTML 4.01 几乎是相同的1.2.2. 如何从 HTML 转换到 XHTML1.2.3. 用 \\ 组合表单数据1.3. HTML51.3.1. 新的属性语法1.3.2. 新特性1.3.3. HTML5被删除元素1.3.4. 新的语义结构元素1.3.5. 新的表单元素1.3.6. 新的输入类型1.3.7. HTML5图像1.3.8. 新的媒介元素1.4. 从 HTML4 迁移至 HTML52. JavaScript3. CSS This is WEB StudyNote. 1. HTML基础标签 超链接标签 This is a link \\ 代表换行 align=\"center\"居中，bgcolor背景颜色 \\ 创建水平线 二十 十二 不建议使用\\ 和\\ 定义删除线文本 \\ 定义下划线文本 style标签中抛弃了bgcolor，使用了background-color代替 \\预格式文本，用于填充代码 target=\"_blank\"从新窗口打开新的标签，置于a标签中 target=\"_top覆盖当前页 \\ 基本的注意事项 - 有用的提示创建锚（相当于书签） Computer code Keyboard input Teletype text Sample text Computer variable \\ 地址标签 此元素通常以斜体显示。大多数浏览器会在此元素前后添加折行。 \\ 此元素通常以斜体显示，元素定义著作的标题。 创建图像映射 本例显示如何创建带有可供点击区域的图像地图。其中的每个区域都是一个超级链接 图表标题，置于table和tr之间 name age-------垂直排布 nickname 合并单元格 增加单元格边距大小 增加单元格间距大小 列表 start开始索引大小,type分别代表大写，小写，大写罗马，小写罗马数字，不加默认为阿拉伯数字 鼠标文本悬浮 etc. WWW 也有类似效果 倒序输出文本 定义数学变量 E = m c2 HTML语意元素 HTML5 语义元素 header 定义文档或节的页眉 nav 定义导航链接的容器 section 定义文档中的节 article 定义独立的自包含文章 aside 定义内容之外的内容（比如侧栏） footer 定义文档或节的页脚 details 定义额外的细节 summary 定义 details 元素的标题 HTML框架 rows=\"15%,20%,15%\" 无法改变窗口大小 noresize=\"noresize\" 重要提示：不能将 标签与 标签同时使用！不过，假如你添加包含一段文本的 标签，就必须将这段文字嵌套于 标签内。（在下面的第一个实例中，可以查看它是如何实现的。） HTML运行js脚本 document.write(\"Hello World!\") 当浏览器不支持js脚本或者禁用时会显示改行文本信息！！！ \\将在新窗口中加载 本文档的\\属性标识了创作者和编辑软件,本文档的 meta 属性描述了该文档和它的关键词 HTML实体 &lt; 或 &#60; &nbsp; HTML 实体符号参考手册: http://www.w3school.com.cn/tags/html_ref_entities.html \\属性列表如下 下面是 属性的列表： 属性 描述 accept-charset 规定在被提交表单中使用的字符集（默认：页面字符集）。 action 规定向何处提交表单的地址（URL）（提交页面）。 autocomplete 规定浏览器应该自动完成表单（默认：开启）。 enctype 规定被提交数据的编码（默认：url-encoded）。 method 规定在提交表单时所用的 HTTP 方法（默认：GET）。 name 规定识别表单的名称（对于 DOM 使用：document.forms.name）。 novalidate 规定浏览器不验证表单。 target 规定 action 属性中地址的目标（默认：_self）。 \\下拉菜单 Volvo Saab Fiat Audi 单选框 单选框 Male Female 使用文本域 文本域中的初始化内容 button按钮事件 您触发了按钮事件！ input输入限制 Quantity (between 1 and 5): 常用的输入限制（其中一些是 HTML5 中新增的）： 属性 描述 disabled 规定输入字段应该被禁用。 max 规定输入字段的最大值。 maxlength 规定输入字段的最大字符数。 min 规定输入字段的最小值。 pattern 规定通过其检查输入值的正则表达式。 readonly 规定输入字段为只读（无法修改）。 required 规定输入字段是必需的（必需填写）。 size 规定输入字段的宽度（以字符计）。 step 规定输入字段的合法数字间隔。 value 规定输入字段的默认值。 autofocus 属性是布尔属性。自动获得焦点。 multiple 则规定允许用户在 元素中输入一个以上的值 pattern pattern 属性规定用于检查 元素值的正则表达式。 placeholder=\"First name\" 用于预期提示 required 必填字段 浏览器会基于用户之前的输入值自动填写值。 novalidate 属性属于 属性。如果设置，则 novalidate 规定在提交表单时不对表单数据进行验证。 First name: Last name: Birthday: 请输入 2000-01-01 之后的日期： Select your favorite color: Points: 允许用户选择月份和年份。 允许用户选择周和年。 允许用户选择时间（无时区）。 允许用户选择日期和时间（有时区）。 允许用户选择日期和时间（无时区）。 用于应该包含电子邮件地址的输入字段。 用于搜索字段（搜索字段的表现类似常规文本字段）。 用于应该包含电话号码的输入字段。 用于应该包含 URL 地址的输入字段。 把图像定义为提交按钮 用于提交文件，muiliple选择一个以上的文件 用于预期提示 1.1. Bootstrap 响应式框架 1.2. XHTML 1.2.1. XHTML 指的是可扩展超文本标记语言，XHTML 与 HTML 4.01 几乎是相同的 1.2.2. 如何从 HTML 转换到 XHTML 1. 向每张页面的第一行添加 XHTML 2. 向每张页面的 html 元素添加 xmlns 属性 3. 把所有元素名改为小写 4. 关闭所有空元素 5. 把所有属性名改为小写 6. 为所有属性值加引号 1.2.3. 用 \\ 组合表单数据 Personal information: First name: Last name: 1.3. HTML5 Your browser does not support the video tag. 1.3.1. 新的属性语法 HTML5 标准允许 4 中不同的属性语法。 本例演示在 标签中使用的不同语法： 类型 示例 Empty Unquoted Double-quoted Single-quoted 1.3.2. 新特性 HTML5 的一些最有趣的新特性： 新的语义元素，比如 , , , and 。 新的表单控件，比如数字、日期、时间、日历和滑块。 强大的图像支持（借由 和 ） 强大的多媒体支持（借由 和 ） 强大的新 API，比如用本地存储取代 cookie。 1.3.3. HTML5被删除元素 以下 HTML 4.01 元素已从 HTML5 中删除： 1.3.4. 新的语义结构元素 HTML5 提供的新元素可以构建更好的文档结构： 标签 描述 定义文档内的文章。 定义页面内容之外的内容。 定义与其他文本不同的文本方向。 定义用户可查看或隐藏的额外细节。 定义对话框或窗口。 定义 元素的标题。 定义自包含内容，比如图示、图表、照片、代码清单等等。 定义文档或节的页脚。 定义文档或节的页眉。 定义文档的主内容。 定义重要或强调的内容。 定义用户能够从弹出菜单调用的命令/菜单项目。 定义已知范围（尺度）内的标量测量。 定义文档内的导航链接。 定义任务进度。 定义在不支持 ruby 注释的浏览器中显示什么。 定义关于字符的解释/发音（用于东亚字体）。 定义 ruby 注释（用于东亚字体）。 定义文档中的节。 定义 元素的可见标题。 定义日期/时间。 定义可能的折行（line-break）。 阅读更多有关 HTML5 语义的内容。 1.3.5. 新的表单元素 标签 描述 定义输入控件的预定义选项。 定义键对生成器字段（用于表单）。 定义计算结果。 1.3.6. 新的输入类型 color date datetime datetime-local email month number range search tel time url week autocomplete autofocus form formaction formenctype formmethod formnovalidate formtarget height 和 width list min 和 max multiple pattern (regexp) placeholder required step 1.3.7. HTML5图像 标签 描述 定义使用 JavaScript 的图像绘制。 定义使用 SVG 的图像绘制。 1.3.8. 新的媒介元素 标签 描述 定义声音或音乐内容。 定义外部应用程序的容器（比如插件）。 定义 和 的来源。 定义 和 的轨道。 定义视频或影片内容。 1.4. 从 HTML4 迁移至 HTML5 典型的 HTML4 典型的 HTML5 修改文档类型，从 HTML4 doctype： 修改为 HTML5 doctype： 修改编码信息，从 HTML4： 改为 HTML5： 2. JavaScript JavaScript 数组 ```javascript var cars=new Array(); var cars=new Array(\"Audi\",\"BMW\",\"Volvo\"); var cars=[\"Audi\",\"BMW\",\"Volvo\"]; var arr = new Array(3)arr[0] = \"George\"arr[1] = \"John\"arr[2] = \"Thomas\"var arr2 = new Array(3)arr2[0] = \"James\"arr2[1] = \"Adrew\"arr2[2] = \"Martin\"document.write(arr.concat(arr2)) for(var x=0;x for x in array array.join() array.sort() * ### JavaScript 对象 * ```javascript var person={firstname:\"Bill\", lastname:\"Gates\", id:5566}; //对象属性的两种寻址方式 name=person.lastname; name=person[\"lastname\"]; //同时创建 person=new Object(); person.firstname=\"Bill\"; person.lastname=\"Gates\"; person.age=56; person.eyecolor=\"blue\"; JavaScript Math 对象 document.write(Math.round(0.60) + \"\") document.write(Math.random()) document.write(Math.max(5,7) + \"\") JavaScript 正则表达式 var patt=new RegExp(\"正则\") document.write(patt.test(\"测试字符串\")) document.write(patt.exec(\"测试字符串\")) var patt1=new RegExp(\"e\",\"g\"); do { result=patt1.exec(\"The best things in life are free\"); document.write(result); } while (result!=null) var patt1=new RegExp(\"e\"); document.write(patt1.test(\"The best things in life are free\")); patt1.compile(\"d\"); document.write(patt1.test(\"The best things in life are free\")); JavaScript函数 function(参数1,参数2){ return x;//返回值 } ``` 比较运算符 ,三元运算符 | === | 全等（值和类型） | x===5 为 true；x===\"5\" 为 false | | :--- | ---------------- | ------------------------------- | | | | | greeting=(visitor==\"PRES\")?\"Dear President \":\"Dear \"; For/In 循环 var person={fname:\"John\",lname:\"Doe\",age:25}; for (x in person) { txt=txt + person[x]; } JavaScript 标签 label:{ do something here; break label; } JavaScript可用于表单验证 JavaScript Window document.write(\"可用高度：\" + screen.availHeight); document.write(\"可用宽度：\" + screen.availWidth); window.location.assign(\"https://suofeiya.pro/\") window.history.back() window.history.forward() txt = \"Browser CodeName: \" + navigator.appCodeName + \"\"; txt+= \"Browser Name: \" + navigator.appName + \"\"; txt+= \"Browser Version: \" + navigator.appVersion + \"\"; txt+= \"Cookies Enabled: \" + navigator.cookieEnabled + \"\"; txt+= \"Platform: \" + navigator.platform + \"\"; txt+= \"User-agent header: \" + navigator.userAgent + \"\"; txt+= \"User-agent language: \" + navigator.systemLanguage + \"\"; document.getElementById(\"example\").innerHTML=txt; JavaScript消息框 警告框,确认框,提示框 function disp_alert() { alert(\"我是警告框！！\"+'\\n'+\"我是警告第二行\") } function show_confirm() { var r=confirm(\"Press a button!\"); if (r==true) { alert(\"You pressed OK!\"); } else { alert(\"You pressed Cancel!\"); } } function disp_prompt() { var name=prompt(\"请输入您的名字\",\"Bill Gates\") if (name!=null && name!=\"\") { document.write(\"你好！\" + name + \" 今天过得怎么样？\") } } JavaScript计时 var t=setTimeout(\"alert('5 秒！')\",5000) 改变HTML-DOM（HTML DOM 的 document 也是 window 对象的属性之一） document.getElementById(\"image\").src=\"/i/shanghai_lupu_bridge.jpg\"; window.document.getElementById(\"image\") 原始图片是郁金香（eg_tulip.jpg），但是已被修改为卢浦大桥（shanghai_lupu_bridge.jpg）。 Hello World! document.getElementById(\"p2\").style.color=\"blue\"; DOM事件 请点击该文本 向 button 元素分配 onclick 事件： document.getElementById(\"myBtn\").onclick=function(){displayDate()}; onload 和 onunload 事件会在用户进入或离开页面时被触发。 onchange 事件常结合对输入字段的验证来使用。离开时触发 onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。 onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件。 创建新的 HTML 元素 这是一个段落 这是另一个段落 var para=document.createElement(\"p\"); var node=document.createTextNode(\"这是新段落。\"); para.appendChild(node); var element=document.getElementById(\"div1\"); element.appendChild(para); parent.removeChild(child); ``` 所有 JavaScript 数字均为 64 位 JavaScript String类型 var txt=\"Hello World!\" document.write(\"Big: \" + txt.big() + \"\") document.write(\"Small: \" + txt.small() + \"\") document.write(\"Bold: \" + txt.bold() + \"\") document.write(\"Italic: \" + txt.italics() + \"\") document.write(\"Blink: \" + txt.blink() + \" (does not work in IE)\") document.write(\"Fixed: \" + txt.fixed() + \"\") document.write(\"Strike: \" + txt.strike() + \"\") document.write(\"Fontcolor: \" + txt.fontcolor(\"Red\") + \"\") document.write(\"Fontsize: \" + txt.fontsize(16) + \"\") document.write(\"Lowercase: \" + txt.toLowerCase() + \"\") document.write(\"Uppercase: \" + txt.toUpperCase() + \"\") document.write(\"Subscript: \" + txt.sub() + \"\") document.write(\"Superscript: \" + txt.sup() + \"\") document.write(\"Link: \" + txt.link(\"http://www.w3school.com.cn\") + \"\") document.write(str.replace(/Microsoft/,\"W3School\")) document.write(str.match(\"world\") + \"\") document.write(str.indexOf(\"World\") + \"\") JavaScript中的 一些属性以及方法 document.write(Date()) var d=new Date(); document.write(\"从 1970/01/01 至今已过去 \" + d.getTime() + \" 毫秒\"); var d = new Date() d.setFullYear(1992,10,3) document.write(d) var d = new Date() document.write (d.toUTCString()) var d=new Date() var weekday=new Array(7) weekday[0]=\"星期日\" weekday[1]=\"星期一\" weekday[2]=\"星期二\" weekday[3]=\"星期三\" weekday[4]=\"星期四\" weekday[5]=\"星期五\" weekday[6]=\"星期六\" document.write(\"今天是\" + weekday[d.getDay()]) JavaScript 框架 JQuery Prototype MooTools 3. CSS 创建css 外部样式表:使用link标签链接外部css文件 内部样式表: .css{...} 内联样式: css选择器 类名选择器 .center {text-align: center} ID选择器 #sidebar {...} 标签选择器 p strong {...} td.fancy {...} fancy类名下的td标签 属性选择器 [title] {...} 带有title属性的才会被选中 [title=suofeiya] {...} 带有特定title属性的才会被选中 [title~=hello] {...} 包含关系的title属性才会被选中 [lang|en]选择 lang {...} 选中属性值以 \"en\" 开头的元素 [attribute^/$=value] {...} 选中属性为value开头/结尾的 [attribute*=value] {...} 选中包含vlue的元素 css属性对应 `padding: 20px; 填充内边距,20像素 background-color: transparent; 背景透明 background-image: url(image_url); 可以为文本,链接...设置背景图 background-position:center; 还有top、bottom、left、right,还可以使用百分比的值或者像素值来进行设置 background-repeat: repeat-y; 背景重复,x/y方向上重复,可直接repeat或者设置no-repeat background-attachment:fixed; 固定背景图片 ** 可以使用background: #ff0000 url(/i/eg_bg_03.gif) no-repeat fixed center; 语法简洁书写` text-indent: 5em; 文本缩进5em,em代表弹性大小,可以继承,使用百分比,如:div {width: 500px;}p {text-indent: 20%;}缩进100个像素 text-align:center; 文本对齐方式,有5个值,简单的三个是right,left和center,注意center和标签区别是后者会对其整个元素 word-spacing: 30px; 改变单词之间的间隔,单位px,em letter-spacing: 20px; 改变字符之间的间隔 text-transform: none/uppercase/lowercase/capitalize; 分别是对单词进行不处理,全大写,全小写,首字母大写处理 text-decoration: none/underline/overline/line-through/blink; 分别进行不处理,下划线,上划线,删除线(类似S/strike标签),闪烁处理,用途:可以用来删除超链接的下划线 direction: rtl;改变文字方向,从右向左. white-space: normal; 处理空白字符,默认使用normal会合并多余的空白字符和换行符,还有另外一个值pre,与上述normal相反,另外nowrap不进行换行,当 white-space 属性设置为 pre-wrap 时，浏览器不仅会保留空白符并保留换行符，还允许自动换行,当 white-space 属性设置为 pre-line 时，浏览器会保留换行符，并允许自动换行，但是会合并空白符，这是与 pre-wrap 值的不同之处,总结,表格: | 值 | 空白符 | 换行符 | 自动换行 | | :------- | :----- | :----- | :------- | | pre-line | 合并 | 保留 | 允许 | | normal | 合并 | 忽略 | 允许 | | nowrap | 合并 | 忽略 | 不允许 | | pre | 保留 | 保留 | 不允许 | | pre-wrap | 保留 | 保留 | 允许 | body {font-family: sans-serif;} 统一文档所使用的字体,当然可以指定某一标签下的字体样式,此外font-family: Times, TimesNR, 'New Century Schoolbook',Georgia, 'New York'(字体名称带有空格或者特殊符号时要使用单引号引起来), serif; 设置多个字体,可以按照用户实际情况进行顺序查找可用的字体 font-style:normal/italic/oblique; 分别代表正常,斜体,斜体,italic是一种字体风格,对字体结构进行细微变化,而后者是直接倾斜,但是我觉得看起来没什么卵区别 font-variant:small-caps; 字体缩小并全转换为大写发生形变 font-weight:normal(400)/bold(900)/100-900; 粗细程度,可以使用数字代替 font-size:14px; 控制字体大小,推荐使用em来设置,像素em之间转换关系pixels/16=em ,em是一种弹性大小单位 链接样式: a:link {color:#FF0000;} /* 未被访问的链接 */ a:visited {color:#00FF00;} /* 已被访问的链接 */ a:hover {color:#FF00FF;} /* 鼠标指针移动到链接上 */ a:active {color:#0000FF;} /* 正在被点击的链接 */ 注意:a:hover 必须位于 a:link 和 a:visited 之后,a:active 必须位于 a:hover 之后 background-color:#B2FF99; 还可以同时设置背景颜色,字体,颜色,大小等. 高级链接框例子: a:link,a:visited {display:block; font-weight:bold; font-size:14px; font-family:Verdana, Arial, Helvetica, sans-serif; color:#FFFFFF; background-color:#98bf21; width:120px; text-align:center; padding:4px; text-decoration:none;} a:hover,a:active{background-color:#7A991A;} css列表 无序列表: list-style-type:disc/circle/square/none; 分别代表实心圆,空心圆,实心正方形,无 有序列表: list-style-type:decimal/lower-roman/upper-roman/lower-alpha/upper-alpha;分别1,i,I,a,A 自定义图片: list-style-image: url('image_url') list-style-position: outside/inside; 分别代列表在外部和内部 css表格\\\\\\content border:1px solid blue; 双线条边框表格,实心,蓝色 border-collapse:collapse; 合并成单线条表格 width/height:100%/50px; 宽度,高度 text-align:right/left/center; 文本对齐 padding:15px; 表格内间距 background-color:green;color:white; 表格标题: caption{caption-side:bottom} This is a caption在table与tr之间插入 轮廓: outline:#00ff00 dotted thick; outline-style:dotted;outline-color:#00ff00;outline-width:thin; Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-04 18:14:56 "},"WEB_Server/WEB基础.html":{"url":"WEB_Server/WEB基础.html","title":"WEB基础","keywords":"","body":"1. http服务器程序2. 多处理模块(MPM)3. telnet安装与简单使用4. HTTP请求方法5. HTTP响应状态码6. 其他 This is web基础 StudyNote. 1. http服务器程序 httpd(Apache)：http://httpd.apache.org/ nginx：http://nginx.org/en/ lighttpd：http://www.lighttpd.net/ 应用程序服务器： IIS(.NET)：https://www.iis.net/ tomcat(.jsp)：https://tomcat.apache.org/ 2. 多处理模块(MPM) 3. telnet安装与简单使用 安装使用yum install telnet-server telnet -y即可 由于telnet服务也是由xinetd守护的，所以安装完telnet-server，要启动telnet服务就必须重新启动xinetd ，systemctl restart xinetd，注意：最小化安装可能没有xinetd，所以需要手动安装 注意：安装完telnet和xinetd，重启xinetd默认并不会启动telnet，所以需要手动配置以使用 编辑/etc/xinetd.d/telnet服务文件，增加以下内容 # default: yes # description: The telnet server servestelnet sessions; it uses \\ # unencrypted username/password pairs for authentication. service telnet { flags = REUSE socket_type = stream wait = no user = root server =/usr/sbin/in.telnetd log_on_failure += USERID disable = no } 编辑完成后，重启xinetd即可 设置开机启动systemctl enable xinetd.service 测试telnet是否正常运行，netstat -tnl |grep 23 解决telnet下root登录，密码正确，总提示Login incorrect的问题 注释/etc/pam.d/remote的第一行即可 4. HTTP请求方法 序号 方法 描述 1 GET 请求指定的页面信息，并返回实体主体。 2 HEAD 类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头 3 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。 4 PUT 从客户端向服务器传送的数据取代指定的文档的内容。 5 DELETE 请求服务器删除指定的页面。 6 CONNECT HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。 7 OPTIONS 允许客户端查看服务器的性能。 8 TRACE 回显服务器收到的请求，主要用于测试或诊断。 9 PATCH 是对 PUT 方法的补充，用来对已知资源进行局部更新 。 5. HTTP响应状态码 HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型： 分类 分类描述 1** 信息，服务器收到请求，需要请求者继续执行操作 2** 成功，操作被成功接收并处理 3** 重定向，需要进一步的操作以完成请求 4** 客户端错误，请求包含语法错误或无法完成请求 5** 服务器错误，服务器在处理请求的过程中发生了错误 6. 其他 互联网咨询网站：https://www.netcraft.com/ 查询一个网站的服务信息（比如网站是运行在什么服务器，用什么web服务器，甚至是网站在哪个机房）：https://searchdns.netcraft.com Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-02 12:18:19 "},"WEB_Server/httpd.html":{"url":"WEB_Server/httpd.html","title":"httpd/Apache","keywords":"","body":"1. httpd-MPM模块2. httpd配置文件3. httpd基础用法 This is httpd StudyNote. 1. httpd-MPM模块 修改MPM需要更改/etc/httpd/conf.modules.d/00-mpm.conf文件指定的模块 2. httpd配置文件 详情参见：httpd.conf文件详解 使用httpd -t可以检查配置文件语法错误 3. httpd基础用法 Alias路径别名 编辑httpd配置文件，定义路径别名，例如 Alias /URL/ \"/PATH/TO/FILE/\" Options None AllowOverride None Require all granted 重启服务即可 需要注意特别的一点是： ​ 编辑Alias时，URL地址应该和后面别名的路径写法一致，Alias /URL/ \"/PATH/TO/FILE/\"是一组，或者都不带后面的反斜线/，否则回报404错误 注意：①Alias能够覆盖原设定的index ②httpd-2.4版本下需要对目录进行显式授权，而2.2版本可以直接使用 基于用户和组的访问控制（Basic认证） 基于用户的访问控制（文本文件） 使用htpasswd命令生成文本格式的密码文件 # htpasswd 参数： # -c ：自动创建指定路径下的文件，因此，该文件不存在时使用该命令 # -m： 使用md5加密方式加密 # -s： 使用sha加密方式加密 # -D：删除指定用户 htpasswd -c /PATH/TO/FILE USER_NAME # 当文件不存在时才使用-c选项 # 例如： htpasswd -c passwd/mypasswd suofeiya 定义安全域 Options None Allowoverride authconfig AuthType Basic AuthName \"Weclome!\" AuthUserFile \"/var/www/passwd/mypasswd\" Require valid-user 重启httpd服务即可 基于组的访问控制 步骤和基于用户认证基本相同 所需要增加的选项是： AuthGroupFile \"/PATH/TO/GROUP_FILE\" # 组文件 Require group GRP_NAME ... # 组名称 GROUP_FILE的格式是： GROUP_NAME: GRP_NAME1 GRP_NAME2 ... 虚拟主机 基于端口的虚拟主机 ①编辑主配置文件/etc/httpd/conf/httpd.conf # 在原有的Listen 80之后添加listen 8888 Listen 8888 ​ ②创建并编辑/etc/httpd/conf.d/vhost.conf文件 DocumentRoot \"/var/www/vhost/\" ServerName v1.com 基于IP的虚拟主机 ①为主机网卡再添加一个IP地址 ip addr add 172.16.122.129/16 dev ens33 # 查看ens33设备的ip情况 ip addr show dev ens33 ​ ②编辑/etc/httpd/conf.d/vhost.conf文件 DocumentRoot \"/var/www/html_129/\" ServerName v_129.com 基于域名（FQDN）的虚拟主机 ①编辑hosts文件，添加一条域名解析172.16.122.128 1.com 2.com ②编辑vhost.conf文件 DocumentRoot \"/var/www/html2/\" ServerName 2.com 注意：①如果需要将主机虚拟化，需要将主配置文件中的DocumentRoot /var/www/html注释掉，然后再添加为虚拟主机即可 ②当httpd版本为2.2版本时，需要在虚拟主机配置文件之前添加NameVirtualHost 172.16.122.128:80 为httpd添加server-status页面 ①编辑/etc/httpd/conf/httd.conf文件 ​ 确保mod_status.so被加载，如果未被加载需要添加，在默认情况下，2.4.6版本的httpd已默认加载该模块，所以无需重复添加 LoadModule status_module modules/mod_status.so ②编辑主机文件或者虚拟主机配置文件，在这里我使用/etc/httpd/conf.d/vhost.conf DocumentRoot \"/var/www/html2/\" ServerName 2.com SetHandler server-status Require ip 172.16 其中使用RequireAll来限制可以访问该路径的ip网络 配置http支持https 一、本地生成ssl证书 在CA服务器上，进入/etc/pki/CA/，生成私钥 (umask 077;openssl genrsa -out private/cakey.pem 2048) 编辑/etc/pki/tls/openssl.cnf生成私钥时的默认选项 生成自签证书 openssl req -new -x509 -key private/cakey.pem -out cacert.pem -days 3650 在httpd服务器上，创建/etc/httpd/ssl目录以存放ssl证书 生成httpd的私钥 (umask 077; openssl genrsa 1024 > httpd.key) 生成httpd的自签证书 openssl req -new -key httpd.key -out httpd.csr 将生成好的自签证书发送到CA服务器，在CA服务器上验证 openssl ca -in /tmp/httpd.csr -out /tmp/httpd.crt -days 365 将生成好的证书httpd.crt回传给httpd服务器 配置httpd支持使用ssl yum install -y mod_ssl 编辑httpd配置文件 # 更改或者添加以下内容 DocumentRoot \"/var/www/html2/\" ServerName 2.com:443 SSLCertificateFile /etc/httpd/ssl/httpd.crt SSLCertificateKeyFile /etc/httpd/ssl/httpd.key 重启服务器即可 测试基于https访问相应的主机： openssl s_client [hostname:port] [-cert FILENAME] [-CApath DIR] [-CAfile FILENAME] # 例如： openssl s_client -connect 1.com:443 CAfile /tmp/cacert.pem 二、使用ssl证书 httpd自带的工具程序 htpasswd：httpd自带的加密工具 apachectl：httpd自带的控制脚本，支持start、stop、restart等指令 apxs：该工具由httpd-devel提供，用于扩展第三方模块 ​ apxs是apache管理模块的工具，它做的是将mod.c生成mod.so，并使其能被apache加载，使用apxs的前提：mod_so已被加载 ​ 详情参见：https://www.2cto.com/shouce/ApacheManual/programs/apxs.html rotatelogs：日志滚动工具，用于日志分割 suexec：当访问某些需要特定权限的资源时，临时切换至指定用户 ab：apache bench，httpd自带的压力测试工具 httpd的压力测试工具 ab：Apache HTTP server benchmarking tool ​ 格式：ab [OPTIONS] URL ​ 参数：-n请求数量 -c模拟并行数量 -k以持久连接模式连接进行测试 其他第三方压力测试工具： webbench，http_load，selge，jmeter，loadrunner，tcpcopy等 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-06 19:49:18 "},"WEB_Server/httpd.conf文件详解.html":{"url":"WEB_Server/httpd.conf文件详解.html","title":"httpd.conf文件详解","keywords":"","body":" 来自：http://blog.itpub.net/9034054/viewspace-2075740/ Apache的主配置文件：/etc/httpd/conf/httpd.conf 默认站点主目录：/var/www/html/ Apache服务器的配置信息全部存储在主配置文件/etc/httpd/conf/httpd.conf中，这个文件中的内容非常多，用wc命令统计一共有1009行，其中大部分是以#开头的注释行。 [root@justin ~]# wc -l /etc/httpd/conf/httpd.conf 1009 /etc/httpd/conf/httpd.conf 配置文件包括三部分： [root@justin ~]# grep '\\' /etc/httpd/conf/httpd.conf -n 33:### Section 1: Global Environment 245:### Section 2: 'Main' server configuration 973:### Section 3: Virtual Hosts 1）Global Environment---全局环境配置，决定Apache服务器的全局参数 2）Main server configuration---主服务配置，相当于是Apache中的默认Web站点，如果我们的服务器中只有一个站点，那么就只需在这里配置就可以了。 3）Virtual Hosts---虚拟主机，虚拟主机不能与Main Server主服务器共存，当启用了虚拟主机之后，Main Server就不能使用了 -------------------------------------------------------------------------------- 1）Global Environment 44 ServerTokens OS 在出现错误页的时候是否显示服务器操作系统的名称，ServerTokens Prod为不显示 57 ServerRoot \"/etc/httpd\" 用于指定Apache的运行目录，服务启动之后自动将目录改变为当前目录，在后面使用到的所有相对路径都是想对这个目录下 65 PidFile run/httpd.pid 记录httpd守护进程的pid号码，这是系统识别一个进程的方法，系统中httpd进程可以有多个，但这个PID对应的进程是其他的父进程 70 Timeout 60 服务器与客户端断开的时间 76 KeepAlive Off 是否持续连接（因为每次连接都得三次握手，如果是访问量不大，建议打开此项，如果网站访问量比较大关闭此项比较好），修改为：KeepAlive On 表示允许程序性联机 83 MaxKeepAliveRequests 100 表示一个连接的最大请求数 89 KeepAliveTimeout 15 断开连接前的时间 102 # 103 StartServers 8 104 MinSpareServers 5 105 MaxSpareServers 20 106 ServerLimit 256 107 MaxClients 256 108 MaxRequestsPerChild 4000 109 # 系统默认的模块，表示为每个访问启动一个进程（即当有多个连接公用一个进程的时候，在同一时刻只能有一个获得服务）。 StartServer开始服务时启动8个进程，最小空闲5个进程，最多空闲20个进程。 MaxClient限制同一时刻客户端的最大连接请求数量超过的要进入等候队列。 MaxRequestsPerChild每个进程生存期内允许服务的最大请求数量，0表示永不结束 118 # 119 StartServers 4 120 MaxClients 300 121 MinSpareThreads 25 122 MaxSpareThreads 75 123 ThreadsPerChild 25 124 MaxRequestsPerChild 0 125 # 为Apache配置线程访问，即每对WEB服务访问启动一个线程，这样对内存占用率比较小。 ServerLimit服务器允许配置进程数的上限。 ThreadLimit每个子进程可能配置的线程上限 StartServers启动两个httpd进程， MaxClients同时最多能发起250个访问，超过的要进入队列等待，其大小有ServerLimit和ThreadsPerChild的乘积决定 ThreadsPerChild每个子进程生存期间常驻执行线程数，子线程建立之后将不再增加 MaxRequestsPerChild每个进程启动的最大线程数，如达到限制数时进程将结束，如置为0则子线程永不结束 136 Listen 80 监听的端口，如有多块网卡，默认监听所有网卡 123 150 LoadModule auth_basic_module modules/mod_auth_basic.so ...... 201 LoadModule version_module modules/mod_version.so 启动时加载的模块 221 Include conf.d/*.conf 加载的配置文件 242 User apache 243 Group apache 启动服务后转换的身份，在启动服务时通常以root身份，然后转换身份，这样增加系统安全 2）Main server configuration 262 ServerAdmin root@localhost 管理员的邮箱 276 #ServerName www.example.com:80 默认是不需要指定的，服务器通过名字解析过程来获得自己的名字，但如果解析有问题（如反向解析不正确），或者没有DNS名字，也可以在这里指定IP地址，当这项不正确的时候服务器不能正常启动。前面启动Apache时候提示正在启动 httpd：httpd: apr_sockaddr_info_get() failed forjustin httpd: Could not reliably determine the server's fully qualified domain name, using 127.0.0.1forServerName，解决方法就是启动该项把www.example.com:80修改为自己的域名或者直接修改为localhost 285 UseCanonicalName Off 如果客户端提供了主机名和端口，Apache将会使用客户端提供的这些信息来构建自引用URL。这些值与用于实现基于域名的虚拟主机的值相同，并且对于同样的客户端可用。CGI变量SERVER_NAME和SERVER_PORT也会由客户端提供的值来构建 292 DocumentRoot \"/var/www/html\" 网页文件存放的目录 302 # 303 Options FollowSymLinks 304 AllowOverride None 305 # 对根目录的一个权限的设置 317 # 331 Options Indexes FollowSymLinks 338 AllowOverride None 343 Order allow,deny 344 Allow from all 346 # 对/var/www/html目录的一个权限的设置，options中Indexes表示当网页不存在的时候允许索引显示目录中的文件，FollowSymLinks是否允许访问符号链接文件。有的选项有ExecCGI表是否使用CGI，如Options Includes ExecCGI FollowSymLinks表示允许服务器执行CGI及SSI，禁止列出目录。SymLinksOwnerMatch表示当符号链接的文件和目标文件为同一用户拥有时才允许访问。AllowOverrideNone表示不允许这个目录下的访问控制文件来改变这里的配置，这也意味着不用查看这个目录下的访问控制文件，修改为：AllowOverride All 表示允许.htaccess。Order对页面的访问控制顺序后面的一项是默认选项，如allow，deny则默认是deny，Allowfromall表示允许所有的用户，通过和上一项结合可以控制对网站的访问控制 360 # 366 UserDir disabled 375 # 是否允许用户访问其家目录，默认是不允许 381 # 382 # AllowOverride FileInfo AuthConfig Limit 383 # Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec 384 #385 # Order allow,deny 386 # Allow from all 387 #388 #389 # Order deny,allow 390 # Deny from all 391 #392 # 如果允许访问用户的家目录中的网页文件，则取消以上注释，并对其中进行修改 402 DirectoryIndex index.html index.html.var 指定所要访问的主页的默认主页名字，默认首页文件名为index.html 409 AccessFileName .htaccess 定义每个目录下的访问控制文件名，缺省为.htaccess 415 # 416 Order allow,deny 417 Deny from all 418 Satisfy All 419 # 控制不让web上的用户来查看.htpasswd和.htaccess这两个文件 425 TypesConfig /etc/mime.types 用于设置保存有不同MIME类型数据的文件名 436 DefaultType text/plain 默认的网页的类型 443444 # MIMEMagicFile /usr/share/magic.mime 445 MIMEMagicFile conf/magic 446 指定判断文件真实MIME类型功能的模块 456 HostnameLookups Off 当打开此项功能时，在记录日志的时候同时记录主机名，这需要服务器来反向解析域名，增加了服务器的负载，通常不建议开启 466 #EnableMMAP off 是否允许内存映射：如果httpd在传送过程中需要读取一个文件的内容，它是否可以使用内存映射。如果为on表示如果操作系统支持的话，将使用内存映射。在一些多核处理器的系统上，这可能会降低性能，如果在挂载了NFS的DocumentRoot上如果开启此项功能，可能造成因为分段而造成httpd崩溃 475 #EnableSendfile off 这个指令控制httpd是否可以使用操作系统内核的sendfile支持来将文件发送到客户端。默认情况下，当处理一个请求并不需要访问文件内部的数据时(比如发送一个静态的文件内容)，如果操作系统支持，Apache将使用sendfile将文件内容直接发送到客户端而并不读取文件 484 ErrorLog logs/error_log 错误日志存放的位置 491 LogLevel warn Apache日志的级别 497 LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined 498 LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common 499 LogFormat \"%{Referer}i -> %U\" referer 500 LogFormat \"%{User-agent}i\" agent 定义了日志的格式，并用不同的代号表示 各参数解释： %h：客户端的IP地址 %I：Remote User，通常为- %u：用户是否登录访问，若为非登录访问时，为- %t：服务器收到请求的时间 %r：First Line of request，即请求首部，记录了此次访问的方法，以及协议版本等信息 %>s：响应状态码 %b：响应报文的大小，单位是字节，不包括响应报文的首部信息 %{Referer}i：请求报文首部的referer值，即从那个页面超链接到当前页面，可以用来友情链接 %{User-Agent}i：请求报文中的User-Agent值，即用户访问标识 513 #CustomLog logs/access_log common 526 CustomLog logs/access_log combined 说明日志记录的位置，这里面使用了相对路径，所以ServerRoot需要指出，日志位置就存放在/etc/httpd/logs 536 ServerSignature On 定义当客户请求的网页不存在，或者错误的时候是否提示apache的版本的一些信息 551 Alias /icons/ \"/var/www/icons/\" 定义一些不在DocumentRoot下的文件，而可以将其映射到网页根目录中，这也是访问其他目录的一种方法，但在声明的时候切记目录后面加”/” 553554 Options Indexes MultiViews FollowSymLinks 555 AllowOverride None 556 Order allow,deny 557 Allow from all 558 定义对/var/www/icons/的权限，修改为 Options MultiViews FollowSymLinks表示不在浏览器上显示树状目录结构 563564 # Location of the WebDAV lock database. 565 DAVLockDB /var/lib/dav/lockdb 566 对mod_dav_fs.c模块儿的管理 576 ScriptAlias /cgi-bin/ \"/var/www/cgi-bin/\" 对CGI模块儿的的别名，与Alias相似。 582583 AllowOverride None 584 Options None 585 Order allow,deny 586 Allow from all 587 对/var/www/cgi-bin文件夹的管理，方法同上 # Redirect old-URI new-URL Redirect参数是用来重写URL的，当浏览器访问服务器上的一个已经不存在的资源的时候，服务器返回给浏览器新的URL，告诉浏览器从该URL中获取资源。这主要用于原来存在于服务器上的文档改变位置之后，又需要能够使用老URL能访问到原网页 604 IndexOptions FancyIndexing VersionSort NameWidth= HTMLTable Charset=UTF-8 611 AddIconByEncoding (CMP,/icons/compressed.gif) x-compress x-gzip ... 669 IndexIgnore .?? ~ # HEADER README RCS CVS ,v ,t 当一个HTTP请求的URL为一个目录的时候，服务器返回这个目录中的索引文件，如果目录中不存在索引文件，并且服务器有许可显示目录文件列表的时候，就会显示这个目录中的文件列表，为了使得这个文件列表能具有可理解性，而不仅仅是一个简单的列表，就需要前这些参数。如果使用了IndexOptionsFancyIndexing选项，可以让服务器针对不同的文件引用不同的图标。如果没有就使用DefaultIcon定义缺省图标。同样，使用AddDescription可以为不同类型的文档介入描述 709 AddLanguage ca .ca ...... 734 AddLanguage zh-TW .zh-tw 添加语言 743 LanguagePriority en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv zh-CN zh-TW Apache支持的语言 759 AddDefaultCharset UTF-8 默认支持的语言 765 #AddType application/x-tar .tgz 支持的应用如果想支持对php的解析添加这样一行 773 #AddEncoding x-compress .Z 774 #AddEncoding x-gzip .gz .tgz 支持对以.Z和.gz.tgz结尾的文件 779 AddType application/x-compress .Z 780 AddType application/x-gzip .gz .tgz 添加对上述两种文件的应用 796 #AddHandler cgi-script .cgi 修改为：AddHandler cgi-script .cgi .pl 表示允许扩展名为.pl的CGI脚本运行 816 AddType text/html .shtml 817 AddOutputFilter INCLUDES .shtml 添加动态处理类型为server-parsed由服务器预先分析网页内的标记，将标记改为正确的HTML标识 833 #ErrorDocument 404 /missing.html 当服务器出现404错误的时候，返回missing.html页面 855 Alias /error/ \"/var/www/error/\" 赋值别名 857858859860 AllowOverride None 861 Options IncludesNoExec 862 AddOutputFilter Includes html 863 AddHandler type-map var 864 Order allow,deny 865 Allow from all 866 LanguagePriority en es de fr 867 ForceLanguagePriority Prefer Fallback 868对/var/www/error网页的权限及操作 895 BrowserMatch \"Mozilla/2\" nokeepalive 896 BrowserMatch \"MSIE 4.0b2;\" nokeepalive downgrade-1.0 force-response-1.0 897 BrowserMatch \"RealPlayer 4.0\" force-response-1.0 898 BrowserMatch \"Java/1.0\" force-response-1.0 899 BrowserMatch \"JDK/1.0\" force-response-1.0 ..... 设置特殊的参数，以保证对老版本浏览器的兼容，并支持新浏览器的特性 3）Virtual Hosts 990 #NameVirtualHost *:80 如果启用虚拟主机的话，必须将前面的注释去掉，而且，第二部分的内容都可以出现在每个虚拟主机部分。 998 # VirtualHost example: 1003 # 1004 # ServerAdmin webmaster@www.linuxidc.com 1005 # DocumentRoot /www/docs/www.linuxidc.com 1006 # ServerName www.linuxidc.com 1007 # ErrorLog logs/www.linuxidc.com-error_log 1008 # CustomLog logs/www.linuxidc.com-access_log common 1009 # Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-30 19:01:02 "},"WEB_Server/Nginx.html":{"url":"WEB_Server/Nginx.html","title":"Nginx","keywords":"","body":" This is Nginx StudyNote. Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-28 18:42:24 "},"WEB_Server/HTTP状态码-详情.html":{"url":"WEB_Server/HTTP状态码-详情.html","title":"HTTP状态码-详情","keywords":"","body":"HTTP状态码列表: 状态码 状态码英文名称 中文描述 100 Continue 继续。客户端应继续其请求 101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议 200 OK 请求成功。一般用于GET与POST请求 201 Created 已创建。成功请求并创建了新的资源 202 Accepted 已接受。已经接受请求，但未处理完成 203 Non-Authoritative Information 非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本 204 No Content 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档 205 Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域 206 Partial Content 部分内容。服务器成功处理了部分GET请求 300 Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择 301 Moved Permanently 永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替 302 Found 临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI 303 See Other 查看其它地址。与301类似。使用GET和POST请求查看 304 Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源 305 Use Proxy 使用代理。所请求的资源必须通过代理访问 306 Unused 已经被废弃的HTTP状态码 307 Temporary Redirect 临时重定向。与302类似。使用GET请求重定向 400 Bad Request 客户端请求的语法错误，服务器无法理解 401 Unauthorized 请求要求用户的身份认证 402 Payment Required 保留，将来使用 403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求 404 Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置\"您所请求的资源无法找到\"的个性页面 405 Method Not Allowed 客户端请求中的方法被禁止 406 Not Acceptable 服务器无法根据客户端请求的内容特性完成请求 407 Proxy Authentication Required 请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权 408 Request Time-out 服务器等待客户端发送的请求时间过长，超时 409 Conflict 服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突 410 Gone 客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置 411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息 412 Precondition Failed 客户端请求信息的先决条件错误 413 Request Entity Too Large 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息 414 Request-URI Too Large 请求的URI过长（URI通常为网址），服务器无法处理 415 Unsupported Media Type 服务器无法处理请求附带的媒体格式 416 Requested range not satisfiable 客户端请求的范围无效 417 Expectation Failed 服务器无法满足Expect的请求头信息 500 Internal Server Error 服务器内部错误，无法完成请求 501 Not Implemented 服务器不支持请求的功能，无法完成请求 502 Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应 503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中 504 Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求 505 HTTP Version not supported 服务器不支持请求的HTTP协议的版本，无法完成处理 来自：https://www.runoob.com/http/http-status-codes.html Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-02 12:19:10 "},"Common_Framework/":{"url":"Common_Framework/","title":"常用框架","keywords":"","body":"Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-10 14:38:59 "},"Common_Framework/LNMP.html":{"url":"Common_Framework/LNMP.html","title":"LNMP","keywords":"","body":"Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-07 18:44:46 "},"Common_Framework/LAMP.html":{"url":"Common_Framework/LAMP.html","title":"LAMP","keywords":"","body":"1. LAMP架构说明以及工作过程2. LAMP安装2.1. 使用模块(Modules)2.1.1. 在CentOS 6上：2.1.2. 在CentOS 7上：2.1.3. 小练习2.2. 使用php-fpm(FastCGI,作为守护进程:9000)2.2.1. 以CentOS 7为例，将httpd、php、mariadb置于同一台主机之上3. 配置 php 测试连接 mysql,4. 启动服务4.1. 编译安装4.2. 一键安装包 1. LAMP架构说明以及工作过程 各工具之间的关系图例： 工作过程： 2. LAMP安装 2.1. 使用模块(Modules) 2.1.1. 在CentOS 6上： # 安装httpd，php，php-mysql，mysql-server yum install -y httpd php php-mysql mysql-server service httpd start 此时，php模块就安装到httpd中了，可以在根目录进行测试 vim /var/www/html/index.php # 增加以下测试内容 ###### # 打开浏览器或者使用其他方式验证一下即可 启用mysql service mysql start 测试php连接mysql # 新建测试页面 vim /var/www/html/php-mysql.php # 增加以下内容 ###### 2.1.2. 在CentOS 7上： # 安装httpd，php，php-mysql，mariadb-server yum install -y httpd php php-mysql mariadb-server systemctl start httpd systemctl start mariadb 连接php和mysql以及测试程序和CentOS类似. 2.1.3. 小练习 安装并使用WordPress wordpress官方站点：https://wordpress.org/ 下载完合适的wordpress版本后，上传到服务器网站根目录 为wordpress添加mysql用户账号并创建相关数据库 MariaDB [(none)]> GRANT ALL ON wordpress.* TO 'wordpress'@'%' IDENTIFIED BY 'wordpress'; MariaDB [(none)]> CREATE DATABASE wordpress; * 注意：mysql默认会启用域名反解功能，可能会导致主机无法正常访问到mysql服务端，因此，需要在配置文件中增加一个参数： 在`CentOS 7`中，编辑`/etc/my.cnf`配置文件，加入`skip-name-resolve=ON|1`(跳过主机解析)，接着重启mariadb即可 自行修改wordpress的安装配置文件 cp wp-config-sample.php wp-config.php # 修改相关参数 DB_NAME # 你的数据库名称 DB_USER # 数据库用户 DB_PASSWORD # 数据库用户的密码 DB_HOST # mysql主机地址 打开wordpress即可 安装并使用DZX(Discuz!)论坛系统 开源地址：https://gitee.com/ComsenzDiscuz/DiscuzX 官方站点：https://www.discuz.net/ 官方应用中心：https://addon.dismall.com/ 下载合适的DZX版本：https://gitee.com/3dming/DiscuzL/attach_files/277010/download，上传到网站目录 赋予暂时的acl权限 setfacl -R -m u:apache:rwx /var/www/* 编辑配置文件 vim /etc/httpd/conf.d/fastcgi.conf #### DirectoryIndex index.php ProxyRequests Off ProxyPassMatch ^/(.*\\.php)$ fcgi://127.0.0.1:9000/var/www/$1 #### 打开浏览器执行安装程序 安装结束后，收回acl权限 setfacl -R -b /var/www/* 拓展：phpwind（简称：pw）是一个基于PHP和MySQL的开源社区程序，是国内最受欢迎的通用型论坛程序之一 2.2. 使用php-fpm(FastCGI,作为守护进程:9000) 2.2.1. 以CentOS 7为例，将httpd、php、mariadb置于同一台主机之上 # 安装所需环境 yum install httpd php-fpm php-mysql mariadb-server -y # 配置 apache 转发 php vim /etc/httpd/conf.d/fastcgi.conf #### DirectoryIndex index.php ProxyRequests Off ProxyPassMatch ^/(.*\\.php)$ fcgi://127.0.0.1:9000/var/www/html/$1 #### * 另外：可以直接在主机或者虚拟主机中添加以下代码： ​ ProxyRequests Off ProxyPassMatch ^/(.*.php)$ fcgi://127.0.0.1:9000/var/www/html/$1 ​``` 3. 配置 php 测试连接 mysql, vim /var/www/html/index.php # # 4. 启动服务 systemctl restart httpd systemctl start mariadb systemctl start php-fpm ### 置于不同主机 WEB服务器(172.16.122.65) ```bash yum install -y httpd # 编辑配置文件，与单台主机类似，只是IP地址不同罢了 vim /etc/httpd/conf.d/fastcgi.conf DirectoryIndex index.php ProxyRequests Off ProxyPassMatch ^/(.*\\.php)$ fcgi://172.16.122.66:9000/data/www/$1 * 注意：在HTTPD服务器上必须启用proxy_fcgi_module模块，充当PHP客户端 httpd –M |grep fcgi # 显示：proxy_fcgi_module (shared)则正确 # 或者 cat /etc/httpd/conf.modules.d/00-proxy.conf systemctl start httpd PHP服务器(172.16.122.66) yum install php-fpm php-mysql #修改绑定端口，让他绑定所有IP vim /etc/php.fpm.d/www.conf listen = 9000 #修改允许IP访问的选项 listen.allowed_clients mkdir -pv /data/www/ vim /data/www/index.php #### #### systemctl start php mysql服务器(172.16.122.67) yum install mariadb mariadb-server # 启动服务 systemctl start mariadb #执行初始化脚本 mysql_ser_install #创建php使用的账户 GRANT ALL ON *.* TO phpuser@'172.16.122.%' IDENTIFIED BY 'phpuser'; FLUSH PRIVILEGES; 4.1. 编译安装 源码编译实现LAMP 并且基于Fastcgi模型 4.2. 一键安装包 主页：https://lamp.sh/ 安装步骤说明：https://lamp.sh/install.html 下载页：https://lamp.sh/download.html 主页：https://lnmp.org/ 安装步骤说明：https://lnmp.org/install.html 下载页：https://lnmp.org/download.html 主页：http://yumlamp.com/ phpstudy for linux一键安装包：http://lamp.phpstudy.net/ Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-26 18:45:37 "},"Docker&K8s/":{"url":"Docker&K8s/","title":"容器及容器编排","keywords":"","body":"1. Docker&k8s目录1.1. Docker1.2. K8s基础知识1.3. K8s安装与部署1. Docker&k8s目录 1.1. Docker 1.2. K8s基础知识 1.3. K8s安装与部署 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-10 14:19:56 "},"Docker&K8s/Docker/Docker.html":{"url":"Docker&K8s/Docker/Docker.html","title":"Docker","keywords":"","body":"1. Docker 安装与daemon.json配置2. Docker基础3. Docker使用第三方平台4. Docker端口映射4.1. 创建容器时指定要暴露的端口4.2. 容器运行时修改端口映射5. Docker网络配置5.1. Docker默认的四种网络模式5.1.1. docker网络模式的查看5.1.2. 修改docker默认的网络设置5.2. Docker自定义网络5.3. 容器rootfs命令6. Docker容器共享数据卷7. DOCKERFILE文件以及构建7.1. DockerFile构建技巧7.1.1. 加速镜像构建8. Docker搭建私有仓库8.1. 使用Registry8.2. 使用Harbor9. Docker系统资源限制以及stress验证9.1. 内存限制9.2. CPU限制10. DockerFile构建实例11. Docker容器可视化监控中心搭建cadviser+influxdb+grafana This is Docker StudyNote. 1. Docker 安装与daemon.json配置 docker RPM源：https://download.docker.com/linux/centos/7/x86_64/stable/Packages/ # 获取最新的docker wget -qO- https://getdocker.com/ | sh # 为普通用户添加docker使用权限,重新登录后生效 sudo usermod -aG docker [用户名称] # 或者直接使用yum源来进行安装 yum install -y docker docker镜像加速 # 为docker镜像加速 配置文件地址：/etc/docker/daemon.json 例如： { \"registry-mirrors\": [\"http://hub-mirrorc163com\"] } docker远程管理 # docker默认情况下，只会生成一个 /var/run/docker.sock 文件来进行本地进程通信，而不会监听任何端口 # 方法一： # 修改docker的配置文件 /etc/sysconfig/docker 中的 OPTIONS 参数 OPTIONS='... -H unix:///var/run/docker.sock -H 0.0.0.0:5555' # 方法二： # 修改/etc/docker/daemon.json文件，添加如下配置 \"hosts\": [\"tcp://0.0.0.0:5555\", \"unix:///var/run/docker.sock\"] # 重启docker服务 sudo systemctl restart docker.service # 在远程主机上测试是否成功 sudo docker -H :5555 images 自定义docker0桥的网络属性信息 { ... \"bip\":\"192.168.10.1/24\", # 初始化docker0桥的ip以及掩码信息，也就是创建新容器是将使用该设置 \"dns\":[\"192.168.10.254\",\"223.5.5.5\"], #　初始化dns服务器地址，linux系统上最多可以设置三个dns服务器 \"default-gateway\": \"192.168.1.1\", # 初始化默认的网关 } daemon.json详细参数：https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file 2. Docker基础 Docker namespace docker inspect参数列表： -f :指定返回值的模板文件，模板风格为`go`语言风格 # 例如： `docker inspect -f {{.NetworkSettings.IPAddress}} CONTAINER_NAME`层级查找到容器的ip地址 -s :显示总的文件大小 --type :为指定类型返回JSON docker -event (类似命令还有docker -logs)参数列表： -f ：根据条件过滤事件 --since ：从指定的时间戳后显示所有事件; --until ：流水时间显示到指定的时间为止 --tail : 仅列出最近几条的日志信息 # 例子： `docker -event -f \"iamges\"=\"hello-world\" --since \"对应时间戳\"`也可以直接使用时间 docker run参数： `-h`：指定容器的主机名称 `--dns`：指定容器的dns服务器地址 `--dns-search`：dns服务的搜索域 `--add-host 域名:IP`：在容器hosts中添加 `--rm`：容器一旦运行结束即删除 `-e`：向容器中传递一个环境变量，例如：`docker run --name myweb01 --rm -P -e WEB_SERVER_VERSION=\"nginx-1.5.1\" busybox printenv` docker镜像的导入和导出： `docker export ` `docker save -o ubuntu > ubuntu.tar` `docker load -i ubuntu.tar` * save 、 load 和 export 、 import区别： 前者保存整个容器，可以单独使用，后者只保存容器层数据 docker rename [原容器名称] [新容器名称] docker rm [容器名称] 删除一个容器，docker rmi [镜像名称]删除镜像 docker rm -f强制删除 -v $\\(docker ps -aq -f status=exited\\)删除所有已经退出的docker docker attach [容器id]进入容器内部 docker exec -it [短ID] bash进入相关容器的bash，it参数代表以交互模式打开bash，也可以docker exec [容器ID或者长短ID] [命令 如：ls /home] 3. Docker使用第三方平台 以阿里云docker服务为例（来自官方文档）： 1. 登录阿里云Docker Registry sudo docker login --username=15628960878 registry.cn-beijing.aliyuncs.com 用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。 您可以在访问凭证页面修改凭证密码。 2. 从Registry中拉取镜像 sudo docker pull registry.cn-beijing.aliyuncs.com/suofeiya/test:[镜像版本号] 3. 将镜像推送到Registry sudo docker login --username=15628960878 registry.cn-beijing.aliyuncs.com sudo docker tag [ImageId] registry.cn-beijing.aliyuncs.com/suofeiya/test:[镜像版本号] #为容器打标 sudo docker push registry.cn-beijing.aliyuncs.com/suofeiya/test:[镜像版本号] # 上传镜像 请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。 4. 选择合适的镜像仓库地址 从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。 如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-beijing.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。 4. Docker端口映射 4.1. 创建容器时指定要暴露的端口 （1）暴露指定端口 docker run --name test -p80:80 busybox ​ 暴露指定主机的指定端口 docker run --name test -p 192.168.1.252:80:80 busybox （2）暴露随机端口 docker run --name test -p80 busybox ​ 暴露指定主机的随机端口 docker run --name test -p 192.168.1.252::80 busybox （3）自动检测容器的端口并进行随机暴露 docker run --name test -P busybox 4.2. 容器运行时修改端口映射 （1）停止容器 （2）停止docker服务 systemctl stop docker （3）修改这个容器的hostconfig.json文件中的端口（如果config.v2.json里面也记录了端口，也要修改） cd /var/lib/docker/3b6ef264a040* vi hostconfig.json 如果之前没有端口映射, 应该有这样的一段: \"PortBindings\":{} 增加一个映射, 这样写: \"PortBindings\":{\"3306/tcp\":[{\"HostIp\":\"\",\"HostPort\":\"3307\"}]} 前一个数字是容器端口, 后一个是宿主机端口. 而修改现有端口映射更简单, 把端口号改掉就行. 5. Docker网络配置 5.1. Docker默认的四种网络模式 5.1.1. docker网络模式的查看 使用docker network ls来查看docker的网络模式有哪些，查看宿主机的网桥可以使用brctl show命令 [root@node1 ~] \\# docker network ls NETWORK ID NAME DRIVER 7fca4eb8c647 bridge bridge 9f904ee27bf5 none null cf03ee007fb4 host host 使用方法：使用--network来指定容器要使用那种网络模式（不指定则默认使用bridge模式来创建容器） --net={host|bridge|none} # --- --net=container:NAME_OR_ID # 使用容器共享网络 5.1.2. 修改docker默认的网络设置 删除docker0桥原来的网络地址，并添加自定义的网络 systemctl stop docker ip link set dev docker0 down ip addr del 172.17.42.1/24 dev docker0 # 删除docker0桥网络 ip addr add 192.168.0.1/24 dev dcoker0 ip link set dev docker0 up 编辑docker服务文件 # 备份原来的service文件 cp /lib/systemd/system/docker.service /etc/systemd/system/docker.service # 修改docker服务文件 vim /etc/systemd/system/docker.service # ----------- \\# [Service] Type=notify ExecStart=/usr/bin/docker daemon -H fd:// --bip=\"192.168.0.1/24\" ... # ----------- 重读服务配置文件并启动docker即可 systemctl daemon-reload systemctl start docker 5.2. Docker自定义网络 创建自定义桥接网络 docker network create --driver bridge mybr0 # 或者 docker network create -d bridge --subnet \"192.168.1.0/24\" --gateway \"172.26.0.1\" mybr0 查看自定义桥的详细信息 docker network inspect BRI_NAME 5.3. 容器rootfs命令 docker commit 参数列表： -a :提交的镜像作者 -c :使用Dockerfile指令来创建镜像 -m :提交时的说明文字 -p :在commit时，将容器暂停 例子： docker commit -a \"\" -m \"\" [原镜像名称] [新镜像名称:verison] # 将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息 docker cp： # 在使用的过程中会进行多个主机与容器之间的数据交换 # 格式： docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH # OPTIONS选项： - -archive/-a 存档模式（复制所有UID/GID信息） - -follow-link/ -L 始终遵循SRC路径中的符号链接 # 例子： docker cp /www/suofeiya :/容器中的目标目录 docker cp :/容器中的目标目录 docker diff ubtuntu\\_test：查看docker容器中所提交的更改 docker tag [元镜像名:版本] [新镜像名:版本]：标记镜像并为其添加标注,tag docker history：查看指定镜像的创建历史 6. Docker容器共享数据卷 # 将宿主机的/container_data共享给容器的/data ××容器数据卷×× sudo docker run -v ~/container_data:/data -it ubuntu /bin/bash # ××数据卷容器，也就是包含数据卷的容器×× docker run -itd -v /data --name dvt0 ubuntu docker run -itd --name dvt1 --volumes-from dvt0 ubuntu 7. DOCKERFILE文件以及构建 FROM * 可以从DockHub中拉取指定镜像(默认)，也可以拉取第三方镜像仓库的镜像，或者直接拉取本地已经制作好的镜像 MAINTAINER #例子： MAINTAINER \"suofeiya \" LABEL # 语法： LABEL = = = ... # 例子： LABEL maintainer=\"suofeiya \" \\ comment=\"something here\" \\ ... * 注意： LABEL 值如果中包含空格，需要使用引号和反斜杠 RUN RUN 指令：用于指定** docker build **过程中要运行的命令。 语法格式： RUN 或 # 通常是一个shell命令，且以\"/bin/sh -c\" 来运行它，这意味着此进程在容器中的PID号不为1，不能接收UNIX信号，因此，当使用 docker stop 命令来停止容器时，此进程接收不到SIGTERM信号 RUN [\"\",\"\",\"param2\",...] RUN [\"/bin/bash\",\"-c\",\"\",\"param1\",\"param2\",...] 例如： RUN yum install iproute nginx && yum clean all CMD CMD 指令：类似于 RUN 指令，用于运行程序，但二者运行的时间点不同；CMD 在** docker run **时运行，而非** docker build **阶段. CMD 指令的首要目的在于为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束 注意: CMD 指令指定的程序可被** docker run **命令行参数中指定要运行的程序所覆盖。 语法格式： CMD 或 CMD [\"\",\"\",\"\",...] CMD [\"\",\"\",...] 注意：该写法是为 ENTRYPOINT 指令指定的程序提供默认参数 注意：如果 dockerfile 中如果存在多个CMD指令，仅最后一个生效 例如： CMD [\"/usr/sbin/httpd\",\"-c\",\"/etc/httpd/conf/httpd.conf\"] ENTRYPOINT ENTRYPOINT 指令：类似于 CMD 指令，但其不会被** docker run **的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序；但是, 如果运行** docker run **时使用了 --entrypoint 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序 语法格式： ENTRYPOINT 或 ENTRYPOINT [\"\",\"\",\"\",...] 例如： CMD [\"-c\"] ENTRYPOINT [\"top\",\"-b\"] 注意：一个dockefile中可以有多个 ENTRYPOINT ，但仅有最后以一个ENTRYPOINT生效. ENTRYPOINT 与 CMD 区别？ 如： FROM busybox ENTRYPOINT [\"top\", \"-b\"] CMD [\"-c\"] 把可能需要变动的参数写到 CMD 里面。然后你可以在 docker run 里指定参数，这样 CMD 里的参数(这里是-c) 就会被覆盖掉而 ENTRYPOINT 里的不被覆盖。 注意： ENTRYPOINT有两种写法，第二种(shell form)会屏蔽掉 docker run 时后面加的命令和 CMD 里的参数 EXPOSE EXPOSE [PORT]/[PROTOCOL] # 暴露端口，可以指定协议(可省略) ADD # 其中，可以是压缩包类型，也可以是url * 需要注意的一点： docker 官方建议我们当需要从远程复制文件时，最好使用 curl 或 wget 命令来代替 ADD 命令。原因是，当使用 ADD 命令时，会创建更多的镜像层，当然镜像的 文件大小 也会更大，例如： # 官方不建议使用的方法 ADD http://example.com/big.tar.xz /usr/src/things/ RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things RUN make -C /usr/src/things all # 官方建议的使用方法 # 如果使用下面的命令，不仅镜像的层数减少，而且镜像中也不包含 big.tar.xz 文件 RUN mkdir -p /usr/src/things \\ && curl -SL http://example.com/big.tar.xz \\ | tar -xJC /usr/src/things \\ && make -C /usr/src/things all COPY COPY ... # 或者 COPY [\"\" ... \"\"] * 注意：dest目标目录最好使用绝对路径，若要使用相对路径，则需要设置workdir工作目录路，另外如果路径中包含有空格字符，应当使用第二种格式 文件复制准则： * 应当是build上下文中的路径，不能是其父目录或者其他上级目录中的文件 * 如果为目录，则该目录下的所有文件均会被复制，但目录本身不会被复制 * 如果指定了多个目录，或者使用了文件通配符，则目标目录在文件夹结尾需加入\"/\" * 如若目录在容器中不存在，则build构建时会自动创建，包含其父目录 ADD命令和COPY命令的区别？ COPY命令可以用于 multistage 场景下，而ADD命令不可以 ADD命令可以传入压缩包文件，并自动解压至指定位置，也可以传入URL docker的 multistage 场景：同一个DockerFile文件中可以存在多个FROM指令，每个FROM指令代表stage的开始. # 使用无命名的stage，加入以下参数 --from=0 # 使用命名的stage FROM busybox as builder ... FROM centos COPY --from builder /PATH/TO/FILE ./ ... 注意：旧版本的 docker 是不支持 multi-stage 的，只有 17.05以及之后的版本才开始支持 VOLUME # 格式： VOLUME [\"\", \"\"...] VOLUME * 注意：通过 VOLUME 指令创建的挂载点，无法指定主机上对应的目录，是自动生成的 USER # 格式： USER [:] USER [:] # 作用：指定运行时的用户名或UID，后续的RUN也会使用指定的用户，当服务不需要管理权限时，可以通过该命令指定运行用户，并且可以在之前创建所需要的用户 * 注意：当要临时获取管理权限时，可以使用gosu，而不推荐使用sudo WORKDIR # 格式： WORKDIR /PATH/TO/DIR * 注意：一个DockerFile中可以指定多个WORKDIR，后续命令如果是相对目录，则会基于之前指定的路径，例如`WORKDiR /dir1 \\ WORKDIR dir2 \\ WORKDIR dir3 \\ RUN pwd`，其结果是`/dir1/dir2/dir3` ONBUILD # 用于在DockerFile中定义一个触发器，当一个镜像被当做基础镜像，也就是FROM对象时，就会触发base image中的ONBUILD指令所定义的触发器 * 注意：使用包含ONBUILD的指令的DockFIle构建的镜像时，应当使用特殊的标签，例如busybox-onbuild 在ONBUILD命令中使用COPY命令和ADD命令时要注意，如果在构建的上下文中缺少指定的源文件时会报错 ARG # 语法： ARG NAME[=] # 作用：ARG 指令使用 --build-arg = 标志定义一个变量，用户可以使用 docker build 命令在构建时将该变量传递给构建器。如果用户指定了未在 Dockerfile 中定义的构建参数，则构建会输出告警 * 可以在同一个DockerFile中指定多个 ARG ，ARG可以有默认值，当容器构建时未指定变量的默认值，将使用dockerfile中的默认值 * 注意：ARG 变量定义从 Dockerfile 中定义的行开始生效，而不是从命令行或其它地方的参数使用，简单来说ARG变量定义可以先使用后声明(大概这个意思吧...)，另外，使用ENV 指令定义的环境变量始终覆盖同名的 ARG 指令 # 预定义的ARG，可以直接在DockerFile中使用，而无需相应的ARG指令 HTTP_PROXY,http_proxy,HTTPS_PROXY,https_proxy,FTP_PROXY,ftp_proxy,NO_PROXY,no_proxy # 如何使用？直接在命令行使用即可 --build-arg = ENV # 两种格式 ENV ENV_NAME VARIABLE # 指定单个环境变量 ENV ENV_NAME=\"VARIABLE\" ... # 传递多个环境变量 * 通过ENV定义的环境变量，可以在dockerfile被后面的所有指令中使用，但不能被CMD指令使用，也不能被docker run 的命令参数引用，使用ENV 指令定义的环境变量始终覆盖同名的 ARG 指令 * 如果需要在容器运行时使用环境变量，在 docker run 时使用 -e \"ENV_NAME=VARIABLE\" 即可 * 注意：与 ARG 指令不同，ENV 值始终保留在构建的镜像中 HEALTHCHECK # 两种格式 HEALTHCHECK [OPTIONS] CMD COMMAND HEALTHCHECK NODE # 禁止从父镜像继承的HEALTHCHECK生效 * 可用OPTOPNS --interval=DURATION(default:30s) # 间隔(s秒、m分钟、h小时)，从容器运行起来开始计时interval秒（或者分钟小时）进行第一次健康检查，随后每间隔interval秒进行一次健康检查；还有一种特例请看timeout解析。 --start-period=DURATION(default:0s) # 启动时间， 默认 0s， 如果指定这个参数， 则必须大于 0s ；--start-period 为需要启动的容器提供了初始化的时间段， 在这个时间段内如果检查失败， 则不会记录失败次数。 如果在启动时间内成功执行了健康检查， 则容器将被视为已经启动， 如果在启动时间内再次出现检查失败， 则会记录失败次数。 --timeout=DURATION(default:30s) # 执行command需要时间，比如curl 一个地址，如果超过timeout秒则认为超时是错误的状态，此时每次健康检查的时间是timeout+interval秒。 --retries=N(default:3) # 连续检查retries次，如果结果都是失败状态，则认为这个容器是unhealth的 * 容器退出状态码 * 0表示正常退出，1表示unhealthy，2表示reserved # 例子： HEALTHCHECK --interval=4m --timeout=3s \\ CMD curl -f http://localhost || exit 1 * 总结：当容器启动之后，首先间隔interval秒然后进行健康检查，如果一个检查所花的时间超过了timeout秒，那么就认为这次检查失败了，如果连续retries次失败，就认为此容器状态为unhealthy # 使用例子： HEALTHCHECK –interval=10s –timeout=3s –retries=3 CMD curl http://localhost # 可能会出现curl这个地址3秒内没响应则认为失败，然后再开始interval的时间进行下次检测，最后显示unhealthy的状态应该是39s # 获取指定容器的健康状态 docker inspect –format ‘{{json .State.Health.Status}}’ 41f1414fab75 * 注意：当dockfile指定多个 HEALTHCHECK 时，仅对最后一个 HEALTHCHECK 有效 DOCKERFILE文件选项，例子：http://www.ityouknow.com/docker/2018/03/15/docker-dockerfile-command-introduction.html#dockerfile-%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C，https://www.jianshu.com/p/cbce69c7a52f docker build用于使用 Dockerfile 创建镜像，下面是参数列表: --build-arg=\\[\\] #设置镜像创建时的变量 --cpu-shares #设置 cpu 使用权重 --cpu-period #限制 CPU CFS周期 --cpu-quota #限制 CPU CFS配额 --cpuset-cpus #指定使用的CPU id --cpuset-mems #指定使用的内存 id --disable-content-trust #忽略校验，默认开启 -f #指定要使用的Dockerfile路径 # 例子： docker build -f /path/to/a/Dockerfile . --force-rm #设置镜像过程中删除中间容器 --isolation #使用容器隔离技术 --label=\\[\\] #设置镜像使用的元数据 -m #设置内存最大值 --memory-swap #设置Swap的最大值为内存+swap，\"-1\"表示不限swap --no-cache #创建镜像的过程不使用缓存 --pull #尝试去更新镜像的新版本 --quiet, -q #安静模式，成功后只输出镜像 ID --rm #设置镜像成功后删除中间容器 --shm-size #设置/dev/shm的大小，默认值是64M --ulimit #Ulimit配置 --tag, -t #镜像的名字及标签，通常 name #tag 或者 name 格式可以在一次构建中为一个镜像设置多个标签 --network #默认 default在构建期间设置RUN指令的网络模式 7.1. DockerFile构建技巧 7.1.1. 加速镜像构建 在使用 COPY 和 ADD 命令时，我们可以通过一些技巧来加速镜像的 build 过程。比如把那些最不容易发生变化的文件的拷贝操作放在较低的镜像层中，这样在重新 build 镜像时就会使用前面 build 产生的缓存，例如： # 构建文件夹中分别有 test.sh x1.sh x2.sh x3.sh 四个文件，其中 test.sh 文件不经常修改，而x1-3.sh经常有变动，所以将 test.sh 单独置于一个镜像层中，且放置于较低的镜像层中 WORKDIR /test COPY test.sh . COPY x*.sh ./ # 构建时，当 x*.sh 发生变化而 test.sh 无变化时，重新构建镜像时会跳过 test.sh 8. Docker搭建私有仓库 8.1. 使用Registry 拉取docker hub上的registry镜像 docker pull registry 建立本地的私有仓库挂载目录，并运行私有仓库的容器 mkdir -p /data/docker/registry # 运行私有仓库容器 docker run -itd -p 5000:5000 -v /data/docker/registry:/var/lib/registry --restart=always --name myRegistry registry:latest # --restart=always意思是当容器异常终止时，立即进行重启操作 查看仓库中的镜像 # 浏览器或者终端查看即可 curl http://172.16.122.132:5000/v2/_catalog 修改配置文件，添加私有仓库地址 # 编辑/etc/docker/damon.json，添加如下内容 { \"insecure-registries\": [\"172.16.122.132:5000\"] } * 注意：docker在拉取镜像是默认使用的是https，不支持http，需要自行设置. 也可以在docker.service文件中添加运行参数`-–insecure-registry=IP_ADDR` 将之前做好的镜像打标签并上传到私有仓库 docker tag nginx:alpine 172.16.122.132:5000/ngx:v1 上传打好标的镜像，并进行查看 docker push 172.16.122.132:5000/ngx:v1 # 查看registry上的镜像 curl http://172.16.122.132:5000/v2/_catalog 列出私有仓库镜像标签 curl http://172.16.122.132:5000/v2/ngx/tags/list 其他主机访问拉取私有仓库地址 docker pull 172.16.122.132:5000/ngx:v1 * 注意：其他主机访问自建的registry也需要修改`damon.json`，并且使用 docker pull 时不要加上scheme(http://) 8.2. 使用Harbor 注意：Harbor依赖于docker-compose，需要提前安装好 安装docker-compose yum install epel-release yum install -y python-pip pip install docker-compose # 查看docker-compose的版本 docker-compose -version # 安装过程中如果出现错误，安装pip3，然后使用pip3安装docker-compose # 或或者，直接使用yum安装算了，免得麻烦 yum install -y docker-compose 进入Harbor托管在Github上的Releases，下载离线包或者在线包：点我直接进入 解压缩 [root@node1 ~]\\# tar xf harbor-offline-installer-v1.9.3.tgz [root@node1 harbor]\\# ls harbor.v1.9.3.tar.gz harbor.yml install.sh LICENSE prepare 配置完成之后再当前目录下执行./install.sh，Harbor就回根据当前目录下的harbor.yml下载或者加载依赖的镜像 # 编辑yml配置文件的hostname参数 ... hostname: 172.16.122.132 ... [root@node1 harbor]\\# ./install.sh 启动Harbor，打开浏览器，访问，默认账号是admin，密码是Harbor12345 打标，登录，上传制作好的镜像 # 打标 docker tag nginx:alpine 172.16.122.132/test/ngx:alpine # 登录 docker login http://172.16.122.132/ username: password: # push到Harbor docker push 172.16.122.132/test/ngx:alpine 停止Harbor，使用docker-compose stop即可 9. Docker系统资源限制以及stress验证 在默认的情况下，docker没有对容器进行硬件资源的限制，当容器负载过高时会尽肯能第占用宿主机资源。在这基础上，docker提供了针对容器的内存，CPU，IO资源的控制方式。（真正可以控制的只有内存和cpu） Docker内存控制OOME在linux系统上，如果内核探测到当前宿主机已经没有可用内存使用，那么会抛出一个OOME(Out Of Memory Exception:内存异常 )，并且会开启killing去杀掉一些进程。 一旦发生OOME，任何进程都有可能被杀死，包括docker daemon在内，为此，docker特地调整了docker daemon的OOM_Odj优先级，以免他被杀掉，但容器的优先级并未被调整。经过系统内部复制的计算后，每个系统进程都会有一个OOM_Score得分，OOM_Odj越高，得分越高，（在docker run的时候可以调整OOM_Odj）得分最高的优先被kill掉，当然，也可以指定一些特定的重要的容器禁止被OMM杀掉，在启动容器时使用 –oom-kill-disable=true指定 FROM:https://www.cnblogs.com/lizhaojun-ops/p/9441624.html 9.1. 内存限制 内存限制部分参数(下述选项中的大多数采用正整数，后跟 b / k / m / g 的后缀，代表单位：字节 / 千字节 / 兆字节 / 千兆字节)： 选项 描述 -m or --memory 容器可使用的最大内存， 最小值是 4m --memory-swap* 允许此容器交换到磁盘的内存量 --memory-swappiness 默认情况下，主机内核可以交换容器使用的匿名页面的百分比，可以设置 --memory-swappiness 的值区间为 0 - 100 --memory-reservation 指定小于 --memory 的软限制，当 Docker 检测到主机上的争用或内存不足时会激活该限制，如果使用 --memory-reservation，则必须将其设置为低于 --memory 才能使其优先。因为它是软限制，所以不保证容器不超过限制 --kernel-memory 容器可以使用的最大内核内存量， 最小值是 4m，因为内核内存无法换出，缺乏内核内存的容器可能会阻塞主机资源，这会对主机和其他容器产生副作用 --oom-kill-disable 默认情况, 如果发生内存不足（OOM）错误，内核会终止容器中的进程。 要改变这种行为，使用 --oom-kill-disable 选项。 仅在已设置 -m / -memory 选项的容器上禁用 OOM killer，如果未设置 -m 标志，则主机可能会耗尽内存，内核可能需要终止主机系统的进程才能释放内存 9.2. CPU限制 选项 描述 --cpus= 指定容器可以使用的 CPU 资源量。例如，如果主机有两个CPU并且，设置 --cpus=\"1.5\"，则容器最多可以使用 1.5 个 CPU，这相当于设置 --cpu-period=\"100000\" 和 --cpu-quota=\"150000\"。可在Docker 1.13及更高版本中使用 --cpu-period= 指定 CPU CFS 调度程序周期，该周期与 --cpu-quota 一起使用，默认为100微秒。大多数用户不会更改默认设置，如果使用Docker 1.13 或更高版本，请改用 --cpus --cpu-quota= 对容器施加 CPU CFS 配额，在受限制之前容器限制为每个 --cpu-period 的微秒数，作为有效上限。如果使用Docker 1.13 或更高版本，请改用 --cpus --cpuset-cpus 限制容器可以使用的特定 CPU 或核心。如果主机有多个CPU，则容器可以使用的以, 分 隔的列表或 - 分隔的 CPU 范围。第一个CPU 编号为 0，有效值可能是 0-3（使用第一个、第二个、第三个和第四个CPU）或 1,3（使用第二个和第四个CPU） --cpu-shares 将此值设置为大于或小于默认值 1024，以增加或减少容器的权重，并使其可以访问主机的 CPU 周期的占较大或较小比例。仅在 CPU 周期受限时才会强制执行此操作。当有足够的 CPU 周期时，所有容器都会根据需要使用尽可能多的 CPU。这是一个软限制，--cpu-shares 不会阻止在群集模式下的容器调度。它为可用的 CPU 周期优先考虑容器 CPU 资源。它不保证或保留任何特定的 CPU 访问权限 详情查看：https://blog.csdn.net/zisefeizhu/article/details/83536475 10. DockerFile构建实例 构建tomcat服务 FROM centos MAINTAINER suofeiya \" suofeiyaxx@gmail.com\" ADD jdk-11.0.4_linux-x64_bin.tar.gz /usr/local ENV JAVA_HOME /usr/local/jdk-11.0.4 ADD apache-tomcat-9.0.24.tar.gz /usr/local WORKDIR /usr/local/apache-tomcat-9.0.24/bin EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] # 构建容器 docker run -d -p 8080:8080 --name tomcat tomcat:test ########################################### tomcat的默认server status等服务允许访问的网段是127.。。 解决方法： 在conf/tomcat-users.xml下添加： 修改./host-manager/META-INF/context.xml和./manager/META-INF/context.xml文件： allow=\"192.168.1.*\" /> 重启tomcat服务即可 PHP环境搭建 FROM centos:6 MAINTAINTER suofeiya \"suofeiyaxx@gmial.com\" RUN yum install -y httpd php php-gd php-mysql mysql mysql-server ENV MYSQL_ROOT_PASSWORD 123456 RUN echo \"\" > /var/www/html/index.php ADD start.sh /start.sh RUN chmod +x start.sh COPY wordpress/* /var/www/html VOLUME [\"/var/lib/mysql\"] CMD /start.sh EXPOSE 80 3306 # start.sh内容 service httpd start service mysqld start mysqladmin -uroot password $MYSQL_ROOT_PASSWORD tail -f 11. Docker容器可视化监控中心搭建cadviser+influxdb+grafana 分别从hub.docker拉取 cadvisor：负责收集容器的随时间变化的数据 influxdb：负责存储时序数据 grafana：负责分析和展示时序数据 部署Influxdb服务 # 创建镜像并使其后台运行 docker run -d --name influxdb -p 8086:8086 \\ -v influxdb:/var/lib/influxdb \\ influxdb # 进入influxdb容器内部，并执行influx命令： docker exec -it influxdb influx # 进入influxdb的shell后创建数据库test和root用户用于本次试验测试 CREATE DATABASE \"test\" CREATE USER \"root\" WITH PASSWORD '123456' WITH ALL PRIVILEGES SHOW DATABASES # 验证数据库是否成功创建 部署cAdvisor服务 # 创建镜像并使其后台运行 docker run -d \\ --volume=/:/rootfs \\ --volume=/var/run:/var/run \\ --volume=/sys:/sys \\ --volume=/var/lib/docker/:/var/lib/docker \\ --link=influxdb:influxdb --name cadvisor google/cadvisor:latest \\ -storage_driver=influxdb \\ -storage_driver_host=influxdb:8086 \\ -storage_driver_db=test \\ -storage_driver_user=root \\ -storage_driver_password=123456 # 注意： # 设置为true之后，容器内的root才拥有真正的root权限，可以看到host上的设备，并且可以执行mount；否者容器内的root只是外部的一个普通用户权限。由于cadvisor需要通过socket访问docker守护进程，在CentOs和RHEL系统中需要这个这个选项。 --volume=/cgroup:/cgroup:ro对于CentOS和RHEL系统的某些版本（比如CentOS6），cgroup的层级挂在/cgroup目录，所以运行cadvisor时需要额外添加–volume=/cgroup:/cgroup:ro选项。 部署Grafana服务 # 创建镜像并使其后台运行 docker run -d -p 6000:3000 -v ~/grafana:/var/lib/grafana --link=influxdb:influxdb --name grafana grafana/grafana Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-11-24 19:44:54 "},"Docker&K8s/K8s/":{"url":"Docker&K8s/K8s/","title":"K8s","keywords":"","body":"Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-10 14:39:48 "},"Docker&K8s/K8s/K8s基础知识.html":{"url":"Docker&K8s/K8s/K8s基础知识.html","title":"K8s基础知识","keywords":"","body":"1. Kubernetes的功能2. Kubernetes组件2.1. Master组件2.1.1. kube-apiserver2.1.2. etcd2.1.3. kube-scheduler2.1.4. kube-controller-manager2.1.5. cloud-controller-manager2.2. Node 组件2.2.1. kubelet2.2.2. kube-proxy2.2.3. 容器引擎2.3. Addons2.3.1. DNS2.3.2. Web UI（Dashboard）2.3.3. Kuboard2.3.4. ContainerResource Monitoring2.3.5. Cluster-level Logging 注：均来源于网络，仅做整理 1. Kubernetes的功能 容器是一个非常好的打包并运行应用程序的方式。在生产环境中，您需要管理容器化应用程序，并且确保其不停机地连续运行。例如：一个容器故障停机，另外一个容器需要立刻启动以替补停机的容器。类似的这种对容器的管理动作由系统来执行会更好更快速。 Kubernetes针对此类问题，提供了容器化编排解决方案，可以使你非常健壮地运行分布式系统。Kubernetes可以处理应用程序的伸缩、failover、部署模式等多种需求。例如，Kubernetes可以轻易地管理系统的金丝雀发布（灰度发布）。 Kubernetes提供的特性有： 服务发现和负载均衡 Kubernetes 可以通过 DNS 名称或 IP 地址暴露容器的访问方式。并且可以在同组容器内分发负载以实现负载均衡 存储编排 Kubernetes可以自动挂载指定的存储系统，例如 local stroage/nfs/云存储等 自动发布和回滚 您可以在 Kubernetes 中声明您期望应用程序容器应该达到的状态，Kubernetes将以合适的速率调整容器的实际状态，并逐步达到最终期望的结果。请参考 声明式的配置 自愈 Kubernetes提供如下自愈能力： 重启已经停机的容器 替换、kill 那些不满足自定义健康检查条件的容器 在容器就绪之前，避免调用者发现该容器 密钥及配置管理 Kubernetes可以存储和管理敏感信息（例如，密码、OAuth token、ssh密钥等）。您可以更新容器应用程序的密钥、配置等信息，而无需： 重新构建容器的镜像 在不合适的地方暴露密码信息 2. Kubernetes组件 参考文档： Kubernetes Components 本文档描述了 Kubernetes 的主要组件。 2.1. Master组件 Master组件是集群的控制平台（control plane）： master 组件负责集群中的全局决策（例如，调度） master 组件探测并响应集群事件（例如，当 Deployment 的实际 Pod 副本数未达到 replicas 字段的规定时，启动一个新的 Pod） Master组件可以运行于集群中的任何机器上。但是，为了简洁性，通常在同一台机器上运行所有的 master 组件，且不在此机器上运行用户的容器。参考 安装Kubernetes高可用。 2.1.1. kube-apiserver 此 master 组件提供 Kubernetes API。这是Kubernetes控制平台的前端（front-end），可以水平扩展（通过部署更多的实例以达到性能要求）。kubectl / kubernetes dashboard / kuboard 等Kubernetes管理工具就是通过 kubernetes API 实现对 Kubernetes 集群的管理。 2.1.2. etcd 支持一致性和高可用的名值对存储组件，Kubernetes集群的所有配置信息都存储在 etcd 中。请确保您 备份 了 etcd 的数据。关于 etcd 的更多信息，可参考 etcd 官方文档 2.1.3. kube-scheduler 此 master 组件监控所有新创建尚未分配到节点上的 Pod，并且自动选择为 Pod 选择一个合适的节点去运行。 影响调度的因素有： 单个或多个 Pod 的资源需求 硬件、软件、策略的限制 亲和与反亲和（affinity and anti-affinity）的约定 数据本地化要求 工作负载间的相互作用 2.1.4. kube-controller-manager 此 master 组件运行了所有的控制器 逻辑上来说，每一个控制器是一个独立的进程，但是为了降低复杂度，这些控制器都被合并运行在一个进程里。 kube-controller-manager 中包含的控制器有： 节点控制器： 负责监听节点停机的事件并作出对应响应 副本控制器： 负责为集群中每一个 副本控制器对象（Replication Controller Object）维护期望的 Pod 副本数 端点（Endpoints）控制器：负责为端点对象（Endpoints Object，连接 Service 和 Pod）赋值 Service Account & Token控制器： 负责为新的名称空间创建 default Service Account 以及 API Access Token 2.1.5. cloud-controller-manager cloud-controller-manager 中运行了与具体云基础设施供应商互动的控制器。这是 Kubernetes 1.6 版本中引入的特性，尚处在 alpha 阶段。 cloud-controller-manager 只运行特定于云基础设施供应商的控制器。如果您参考 www.kuboard.cn 上提供的文档安装 Kubernetes 集群，默认不安装 cloud-controller-manager。 cloud-controller-manager 使得云供应商的代码和 Kubernetes 的代码可以各自独立的演化。在此之前的版本中，Kubernetes的核心代码是依赖于云供应商的代码的。在后续的版本中，特定于云供应商的代码将由云供应商自行维护，并在运行Kubernetes时链接到 cloud-controller-manager。 以下控制器中包含与云供应商相关的依赖： 节点控制器：当某一个节点停止响应时，调用云供应商的接口，以检查该节点的虚拟机是否已经被云供应商删除 译者注：私有化部署Kubernetes时，我们不知道节点的操作系统是否删除，所以在移除节点后，要自行通过 kubectl delete node 将节点对象从 Kubernetes 中删除 路由控制器：在云供应商的基础设施中设定网络路由 译者注：私有化部署Kubernetes时，需要自行规划Kubernetes的拓扑结构，并做好路由配置，例如 安装Kubernetes单Master节点 中所作的 服务（Service）控制器：创建、更新、删除云供应商提供的负载均衡器 译者注：私有化部署Kubernetes时，不支持 LoadBalancer 类型的 Service，如需要此特性，需要创建 NodePort 类型的 Service，并自行配置负载均衡器 数据卷（Volume）控制器：创建、绑定、挂载数据卷，并协调云供应商编排数据卷 译者注：私有化部署Kubernetes时，需要自行创建和管理存储资源，并通过Kubernetes的存储类、存储卷、数据卷等与之关联 译者注：通过 cloud-controller-manager，Kubernetes可以更好地与云供应商结合，例如，在阿里云的 Kubernetes 服务里，您可以在云控制台界面上轻松点击鼠标，即可完成 Kubernetes 集群的创建和管理。在私有化部署环境时，您必须自行处理更多的内容。幸运的是，通过合适的教程指引，这些任务的达成并不困难。 2.2. Node 组件 Node 组件运行在每一个节点上（包括 master 节点和 worker 节点），负责维护运行中的 Pod 并提供 Kubernetes 运行时环境。 2.2.1. kubelet 此组件是运行在每一个集群节点上的代理程序。它确保 Pod 中的容器处于运行状态。Kubelet 通过多种途径获得 PodSpec 定义，并确保 PodSpec 定义中所描述的容器处于运行和健康的状态。Kubelet不管理不是通过 Kubernetes 创建的容器。 2.2.2. kube-proxy kube-proxy 是一个网络代理程序，运行在集群中的每一个节点上，是实现 Kubernetes Service 概念的重要部分。 kube-proxy 在节点上维护网络规则。这些网络规则使得您可以在集群内、集群外正确地与 Pod 进行网络通信。如果操作系统中存在 packet filtering layer，kube-proxy 将使用这一特性（iptables代理模式），否则，kube-proxy将自行转发网络请求（User space代理模式） 2.2.3. 容器引擎 容器引擎负责运行容器。Kubernetes支持多种容器引擎：Docker、containerd、cri-o、rktlet 以及任何实现了 Kubernetes容器引擎接口 的容器引擎 2.3. Addons Addons 使用 Kubernetes 资源（DaemonSet、Deployment等）实现集群的功能特性。由于他们提供集群级别的功能特性，addons使用到的Kubernetes资源都放置在 kube-system 名称空间下。 下面描述了一些经常用到的 addons，参考 Addons 查看更多列表。 2.3.1. DNS 除了 DNS Addon 以外，其他的 addon 都不是必须的，所有 Kubernetes 集群都应该有 Cluster DNS Cluster DNS 是一个 DNS 服务器，是对您已有环境中其他 DNS 服务器的一个补充，存放了 Kubernetes Service 的 DNS 记录。 Kubernetes 启动容器时，自动将该 DNS 服务器加入到容器的 DNS 搜索列表中。 如果您参考 www.kuboard.cn 上提供的文档安装 Kubernetes，默认已经安装了 Core DNS 2.3.2. Web UI（Dashboard） Dashboard 是一个Kubernetes集群的 Web 管理界面。用户可以通过该界面管理集群。 2.3.3. Kuboard Kuboard 是一款基于Kubernetes的微服务管理界面，相较于 Dashboard，Kuboard 强调： 无需手工编写 YAML 文件 微服务参考架构 上下文相关的监控 场景化的设计 导出配置 导入配置 2.3.4. ContainerResource Monitoring Container Resource Monitoring 将容器的度量指标（metrics）记录在时间序列数据库中，并提供了 UI 界面查看这些数据 2.3.5. Cluster-level Logging Cluster-level logging 机制负责将容器的日志存储到一个统一存储中，并提供搜索浏览的界面 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-11 16:02:56 "},"Docker&K8s/K8s/K8s安装与部署.html":{"url":"Docker&K8s/K8s/K8s安装与部署.html","title":"K8s安装与部署","keywords":"","body":"1. K8s的安装与部署1.1. 使用kubeadm(国内Aliyun镜像)1.1.1. 一、环境准备与安装1.1.2. 二、初始化master1.1.3. 三、将node添加进master集群中1.1.4. 注意事项1.2. 一键安装1. K8s的安装与部署 1.1. 使用kubeadm(国内Aliyun镜像) 1.1.1. 一、环境准备与安装 为每一台主机配置hosts 172.16.122.128 master.suofeiya.com master 172.16.122.132 node1.suofeiya.com node1 172.16.122.133 node2.suofeiya.com node2 开启透明网桥 echo \"net.bridge.bridge-nf-call-iptables=1\" >> /etc/sysctl.conf # 修改/proc/sys/net/bridge/bridge-nf-call-iptables 的值也可以 echo \"net.bridge.bridge-nf-call-ip6tables=1\" >> /etc/sysctl.conf sysctl -p 在k8s早期版本，需要关闭系统的swap # 注释掉以下内容，重启机器即可 /dev/mapper/centos-swap swap swap defaults 0 0 添加阿里云docker-ce镜像 Debian / Ubuntu # step 1: 安装必要的一些系统工具 sudo apt-get update sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common # step 2: 安装GPG证书 curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - # Step 3: 写入软件源信息 sudo add-apt-repository \"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\" # Step 4: 更新并安装Docker-CE sudo apt-get -y update sudo apt-get -y install docker-ce # 安装指定版本的Docker-CE: # Step 1: 查找Docker-CE的版本: # apt-cache madison docker-ce # docker-ce | 17.03.1~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages # docker-ce | 17.03.0~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages # Step 2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.1~ce-0~ubuntu-xenial) # sudo apt-get -y install docker-ce=[VERSION] CentOS / RHEL / Fedora # step 1: 安装必要的一些系统工具 sudo yum install -y yum-utils device-mapper-persistent-data lvm2 # Step 2: 添加软件源信息 sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # Step 3: 更新并安装Docker-CE sudo yum makecache fast # 注意： # 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。 # vim /etc/yum.repos.d/docker-ee.repo # 将[docker-ce-test]下方的enabled=0修改为enabled=1 # # 安装指定版本的Docker-CE: # Step 1: 查找Docker-CE的版本: # yum list docker-ce.x86_64 --showduplicates | sort -r # Loading mirror speeds from cached hostfile # Loaded plugins: branch, fastestmirror, langpacks # docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable # docker-ce.x86_64 17.03.1.ce-1.el7.centos @docker-ce-stable # docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable # Available Packages # Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos) # sudo yum -y install docker-ce-[VERSION] 添加阿里云k8s相关镜像 Debian / Ubuntu apt-get update && apt-get install -y apt-transport-https curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - cat /etc/apt/sources.list.d/kubernetes.list deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main EOF CentOS / RHEL / Fedora cat /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF 安装docker-ce，k8s相关（ kubelet kubeadm kubectl），并设置为开机启动 yum install -y docker-ce kubelet kubeadm kubectl systemctl enable docker kubelet 1.1.2. 二、初始化master kubeadm init --kubernetes-version=v1.17.0 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 完成之后会有以下提示信息： Your Kubernetes control-plane has initialized successfully! To start using your cluster, you need to run the following as a regular user: # ==========手动完成========== mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config # =========================== You should now deploy a pod network to the cluster. Run \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/ Then you can join any number of worker nodes by running the following on each as root: # 记录好下面这条命令，以便node节点的加入 kubeadm join 172.16.122.128:6443 --token a2i1tb.rcyxusi4wij2n9ec \\ --discovery-token-ca-cert-hash sha256:8fccc1b289a2bc890686a89af7fd6cc4ccfd97e9fd02f92ffea8ed6cfc0eb5e9 此时使用kubectl get nodes发现master节点的是NotReady未就绪状态 [root@master ~]\\# kubectl get nodes NAME STATUS ROLES AGE VERSION master NotReady master 3h2m v1.17.0 因此，我们还需要安装fannel来部署k8s网络，以激活节点。 去往fannel官方github站点，使用手动部署（k8s版本1.7+）： kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml 等待docker拉取完镜像之后，再次使用kubectl get nodes0就会发现master节点已就绪。 init时可能遇到的问题 [WARNING IsDockerSystemdCheck]: detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\".，意思就是[警告IsDockerSystemdCheck]：检测到“cgroupfs”作为Docker cgroup驱动程序。 推荐的驱动程序是“systemd”。解决方法就是修改docker的驱动的驱动程序为systemd，具体步骤如下： # 编辑docker配置文件/etc/docker/daemon.json，如果没有则创建 #### { \"exec-opts\":[\"native.cgroupdriver=systemd\"] } #### 然后重启docker服务即可 [ERROR Swap]: running with swap on is not supported. Please disable swap，意思是运行不支持swap，请关闭swap，解决方法： （1）关闭swap(见环境配置) （2）忽略警告 # ①编辑配置文件/etc/sysconfig/kubelet #### KUBELET_EXTRA_ARGS=\"--fail-swap-on=false\" #### # ②初始化init时添加`--ignore-preflight-errors=Swap`参数 kubeadm init时，会因为无法访问外网，从而导致镜像下载失败，解决方法有以下两种： （1）配置docker使用代理（已失效×） vim /usr/lib/systemd/system/docker.service #### Environment=\"HTTPS_PROXY=http://www.ik8s.io:10080\" Environment=\"NO_PROXY=127.0.0.0/8,172.16.122.0/16\" #### （2）提前从阿里云下载好所需镜像，并重新打标 使用脚本自动完成： [root@master scripts]# cat get_k8s_img_from_aliyun.sh #!/bin/bash # need get images images=( k8s.gcr.io/kube-apiserver:v1.17.0 k8s.gcr.io/kube-controller-manager:v1.17.0 k8s.gcr.io/kube-scheduler:v1.17.0 k8s.gcr.io/kube-proxy:v1.17.0 k8s.gcr.io/pause:3.1 k8s.gcr.io/etcd:3.4.3-0 k8s.gcr.io/coredns:1.6.5 ) k8s_registry=k8s.gcr.io aliyun_registry=registry.cn-hangzhou.aliyuncs.com # get images from aliyun registry function get_aliyun_k8s_images() { for k8s_image in ${images[*]};do image=` echo $k8s_image | awk -F '/' '{print $2}'` docker pull $aliyun_registry/google_containers/$image done } # tag images to k8s.gcr.io registry function tag_images() { for k8s_image in ${images[*]};do image=` echo $k8s_image | awk -F '/' '{print $2}'` docker tag $aliyun_registry/google_containers/$image $k8s_registry/$image done } get_aliyun_k8s_images tag_images docker pull quay.io/coreos/flannel:v0.11.0-amd64 docker images 1.1.3. 三、将node添加进master集群中 node节点需要准备以下三个镜像（国内有墙才需要预先下载） k8s.gcr.io/kube-proxy:v1.17.0 k8s.gcr.io/pause:3.1 quay.io/coreos/flannel:v0.11.0-amd64 拉取完后使用kubeadm join即可 kubeadm join 172.16.122.128:6443 --token a2i1tb.rcyxusi4wij2n9ec \\ --discovery-token-ca-cert-hash sha256:8fccc1b289a2bc890686a89af7fd6cc4ccfd97e9fd02f92ffea8ed6cfc0eb5e9 --ignore-preflight-errors=Swap 接着在master节点上查看pod相关信息 [root@master ~]\\# kubectl get nodes NAME STATUS ROLES AGE VERSION master Ready master 3h29m v1.17.0 node1 Ready 3m26s v1.17.0 node1节点已成功加入并处于就绪状态，说明node1加入集群成功 1.1.4. 注意事项 master和node节点上如果kubeadm执行不成功，或者需要重新执行，需要先使用kubeadm reset恢复初始状态 master和node节点上的kubelet需要设置为自启动，否则主机重启后组件类容器不能启动 1.2. 一键安装 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-16 14:54:46 "},"Git/":{"url":"Git/","title":"Git","keywords":"","body":"1. Git目录1.1. GitLab服务器1.2. Git基础1. Git目录 1.1. GitLab服务器 1.2. Git基础 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-10 15:03:13 "},"Git/Git基础.html":{"url":"Git/Git基础.html","title":"Git基础","keywords":"","body":"1. 基础设置2. Git版本管理2.1. 版本回退2.1.1. git reset2.1.2. git revert2.2. 管理修改3. Git分支管理3.1. 创建查看切换合并删除分支3.2. 分支管理策略3.3. BUG分支3.4. Git Rebase3.5. 远程分支管理4. Git标签管理4.1. 创建标签4.2. 删除本地或远程标签5. .gitignore文件6. Git其他 This is Git命令 StudyNote. 1. 基础设置 全局配置文件：~/.gitconfig 设置全局登录信息： git config --global user.name \"YOURUSERNAME\" git config --global user.email \"YOUREMAIL\" 如果只想对当前项目设置登录信息的话，去掉--global参数即可 设置无密码SSH-KEY登录： # 在用户家目录的.ssh目录中生成id_rsa和id_rsa.pub这两个文件 ssh-keygen -t rsa -C \"youremail@example.com\" * 接下来打开Github的相关配置页导入`id_rsa.pub`文件内容 # 检查是否可用 ssh -T git@github.com 配置别名： # 将status起个别名为st，此时就可以使用git st来查看工作区状态了 git config --global alias.st status git config --global alias.lone 'log --oneline' 2. Git版本管理 2.1. 版本回退 2.1.1. git reset 使用git log可以查看当前提交情况： ➜ git git:(master) git log commit dadac050104f374d34d7257779ab958e86a578cb (HEAD -> master) Author: AGou-ops Date: Wed Dec 4 18:45:58 2019 +0800 INIT test file with 4.. commit 5826c364bbbd7976bd7ab23e77256a8c44db37e6 Author: AGou-ops Date: Wed Dec 4 18:45:15 2019 +0800 INIT test file with 1..2..3 如果觉得输出结果太乱太杂可以加上--pretty-oneline参数或者短commit hash前七位的--oneline参数： ➜ git git:(master) git log --pretty=oneline dadac050104f374d34d7257779ab958e86a578cb (HEAD -> master) INIT test file with 4.. 5826c364bbbd7976bd7ab23e77256a8c44db37e6 INIT test file with 1..2..3 ➜ git git:(master) git log --oneline 5826c36 (HEAD -> master) INIT test file with 1..2..3 # 或者使用文字图形化界面来显示 ➜ git git:(master) git log --graph 现在我想将版本回退到INIT版本，可以使用： ➜ git git:(master) git reset --hard HEAD^ HEAD is now at 5826c36 INIT test file with 1..2..3 * 注意：一个脱字符`^`代表回退一个版本，回退两个版本使用`HEAD^^`即可 当然可以使用HEAD~n来回退一个或者多个版本，其中n表示回退的版本数 但我觉得比较好用的是使用commit hash-id号来进行版本的精确回退或者前进 git reflog命令可以记住你每一次的提交和版本切换请求： ➜ git git:(master) git reflog 5826c36 (HEAD -> master) HEAD@{0}: reset: moving to HEAD^ dadac05 HEAD@{1}: commit: INIT test file with 4.. 5826c36 (HEAD -> master) HEAD@{2}: commit (initial): INIT test file with 1..2..3 拓展参考资料： git log详解：https://blog.csdn.net/jjlovefj/article/details/86476925 git log 官方文档：https://git-scm.com/docs/git-log git reset的三种模式：https://www.jianshu.com/p/c2ec5f06cf1a 2.1.2. git revert git revert是用于“反做”某一个版本，以达到撤销该版本的修改的目的。 适用场景：如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法，这正是和reset不同的地方. 比如，我们commit了三个版本（版本一、版本二、 版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西，在这里将问题简化如下： 提交三次，对应版本分别为version 1..2..3 ➜ test02 git:(master) git log --oneline 74c4ae3 (HEAD -> master, tag: v3.0) publish version 3 46ed99f (tag: v2.0) publish version 2 4bb0e96 (tag: v1.0) publish version 1 因为某些原因我不想要版本二v2.0，此时，就可以通过revert版本二来实现，这里使用-n参数加上commit id ➜ test02 git:(master) git revert -n 46ed99f 反做时，可能会有冲突发生，那么就需要手动解决冲突 提交修改 ➜ test02 git:(master) git add . ➜ test02 git:(master) git commit -m \"remove version 2\" 至此，revert就完成了. 2.2. 管理修改 撤销工作区的修改有两种方式： 一种是自文件修改后还没有被放到暂存区，撤销修改就回到和版本库一模一样的状态 另一种是文件已经添加到暂存区后，又作了修改，撤销修改就回到添加到暂存区后的状态 git checkout -- test * 需要注意的是：`--`不可少，且前后都要有空格 删除文件： # 如果你确定删除本地工作区的某个文件，可以直接使用rm命令来删除 rm hello # 如果你只想删除仓库中的某个或者某些文件，可以使用以下命令 ➜ git git:(master) git rm hello rm 'hello' # 查看当前状态 ➜ git git:(master) ✗ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) deleted: hello 3. Git分支管理 3.1. 创建查看切换合并删除分支 创建一个dev分支，并切换至dev分支 git checkout -b dev # 这条命令相当于 git branch dev git checkout dev # 新版本的可以使用switch来创建切换分支 # 创建并切换至dev分支 git switch -c dev 查看分支 # 查看当前分支 git branch # 查看所有分支 git branch -a 修改完当前分支切换为主分支或者其他分区 git checkout master # 或者使用switch切换分支 git switch dev 合并dev分支上的修改 git merge dev 删除dev分支 git branch -d dev 强制删除分支 * 使用场景之一：为产品添加一个新功能，新功能分支进行到一半突然被告知要取消该功能的开发，此时该分支还未合并到主分支，需要进行删除，而使用`-d`删除分支会报错从而无法删除，所以此时就需要强制删除分支 git branch -D dev 3.2. 分支管理策略 通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息 例如：在dev分支上做了些许修改，然后切换至master分支合并dev git merge --no-ff -m \"merge with no-ff\" dev 查看分支情况 ➜ test git:(master) git log --graph --pretty=oneline --abbrev-commit * 8c19649 (HEAD -> master) merge with no-ff |\\ | * 17ae26b (fun2) some change in README on fun2 branch |/ * e5e20a0 fix conflict |\\ | * 1f22afc changes in README * | 913ffd6 changes in README |/ * 0bef827 Add branch_dev * f377044 (origin/master, origin/HEAD) Add README 可以明显看到一次合并分支的提交 3.3. BUG分支 在Git中，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。 当你开发时临时接到一个修复bug分支的任务时，此时你会创建一个issue-01分支来修复它，但是此时你在当前分支上的任务还未提交。 ➜ test git:(fun2) ✗ git status On branch fun2 Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: branch_dev no changes added to commit (use \"git add\" and/or \"git commit -a\") 这时，你就可以使用Git的stash功能来暂停并隐藏当前分支上的工作： ➜ test git:(fun2) ✗ git stash Saved working directory and index state WIP on fun2: 17ae26b some change in README on fun2 branch 可以看到当前工作区的修改已经被隐藏了起来 接下来，就可以愉快的修复BUG了： # 确定在那个分支上修复BUg git checkout master # 创建BUG分支 git checkout -b issue-01 # 修复BUG ... # 提交修复BUG的修改 ... # 切换到master主分支完成合并 git merge --no-ff -m \"merged fix bug 01\" issue-01 搞完之后，就可以回到自己的工作分支继续工作了： ➜ test git:(fun2) git status On branch fun2 nothing to commit, working tree clean # 列出之前所保存的工作区信息 ➜ test git:(fun2) git stash list stash@{0}: WIP on fun2: 17ae26b some change in README on fun2 branch 可以看到工作现场还在，但是需要手动恢复一下，有两种方法： 使用git stash apply恢复，但是恢复之后，stash的内容并不会被删除，需要手动使用git stash drop来删除 使用git stash pop，恢复的同时把stash内容也顺便删了 3.4. Git Rebase 应用场景一：用于合并多次提交记录，也就是每一次功能开发， 对多个 commit 进行合并处理 合并最近3次的提交记录 git rebase -i [startpoint] [endpoint] * 注意：其中`-i`的意思是`--interactive`交互式修改，[startpoint]和 [endpoint]指定了一个编辑区间，如果不指定[endpoint]，则默认会使用当前HEAD指针处的commit提交 ➜ test01 git:(master) git rebase -i HEAD~3 Successfully rebased and updated refs/heads/master. # 或者使用以下命令可以达到相同的效果 git rebase -i 0ad1d42 这时，会自动进入vi编辑模式，然后进行相应修改即可，这里需要注意的一些命令： pick：保留该commit（缩写:p） reword：保留该commit，但我需要修改该commit的注释（缩写:r） edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e） squash：将该commit和前一个commit合并（缩写:s） fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f） exec：执行shell命令（缩写:x） drop：我要丢弃该commit（缩写:d） 如果你保存时异常退出了或者保存退出是出现了错误，你可以使用git rebase --edit-todo来重新修改提交，这时你将一直处于编辑模式中，可以使用git rebase --continue回去继续进行编辑操作 使用git log查看提交合并后的效果 应用场景二：合并分支 使用merge来合并分支时会新增一条提交记录，但是有时候我们觉得这样的提交记录并无卵用，这时如果我们想要保持一个清洁的commit环境，就得使用rebase了 场景： 一个项目，当前你正在开发feature1分支，但此时master主分支上急有一个BUG需要修复，你的另外一个同事修复完该BUG后进行了一次提交，此时master分支已经领先于你当前的feature1分支 在feature分支上使用rebase合并： git rebase master rebase具体进行的操作： git 会把 feature1 分支里面的每个 commit 取消掉 把上面的操作临时保存成 patch 文件，存在 .git/rebase 目录下 把 feature1 分支更新到最新的 master 分支 把上面保存的 patch 文件应用到 feature1 分支上 -- 取消rebase操作使用git rebase --abort 命令-- 3.5. 远程分支管理 查看远程库的信息，使用git remote，使用-v可以显示详细信息 ➜ test git:(master) git remote -v origin https://github.com/AGou-ops/test.git (fetch) origin https://github.com/AGou-ops/test.git (push) # 如果没有push权限，看不到该行内容 推送分支 git push origin [BRANCH_NAME] 协同开发dev分支 # 拉取远程分支 git clone https://github.com/AGou-ops/test.git # 此时只能看到`master`分支 # 如果想要在dev分支上进行开发，就必须创建远程`origin`的`dev`分支 git checkout -b dev origin/dev # 此时就可以愉快的进行开发了O(∩_∩)O~~ 拉取指定分支 git clone -b BRANCH_NAME 删除远程分支 git push origin --delete [branchname] 4. Git标签管理 4.1. 创建标签 首先切换到要打标的分支，然后使用tag就可以打一个标签 ➜ test01 git:(dev) git checkout master Switched to branch 'master' Your branch is up to date with 'origin/master'. ➜ test01 git:(master) git tag v1.0 如果你想要为以前的某个时间点的某个提交打标签的话，只需记住要打标的commit id即可 git tag v0.9 f37704406a57769df47ef8f4128ced31b89726bb # 长短提交id都可以 使用git tag来查看所有标签，默认的标签是在最新的commit基础上进行的 需要注意的一点是：标签的先后顺序不是以时间排序的，而是按照字母排序的. 使用git show 来查看标签的详细信息 ➜ test01 git:(master) git show v1.0 commit f65818b4a8a4f665b2ac9c9598be06971c04f129 (HEAD -> master, tag: v1.0, origin/master, origin/HEAD) Author: AGou-ops Date: Mon Dec 9 09:34:10 2019 +0800 add 222 for commit_record add 333 for commit_record add 111 for commit_record diff --git a/commit_record b/commit_record index 5f2f16b..06539be 100644 --- a/commit_record +++ b/commit_record @@ -1 +1,6 @@ 1111 +>>>>>> 0ad1d42... add 111 for commit_record 此外，还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字 ➜ test01 git:(master) git tag -a v0.91 -m \"v0.91\" 0bef827 ➜ test01 git:(master) git show v0.91 11:13:09 tag v0.91 Tagger: AGou-ops Date: Mon Dec 9 11:13:06 2019 +0800 v0.91 # 这里就是打标时的信息 commit 0bef8272562bb96ba4b5a18196eb43773587f618 (tag: v0.91) Author: AGou-ops Date: Sun Dec 8 20:39:06 2019 +0800 Add branch_dev diff --git a/branch_dev b/branch_dev new file mode 100644 index 0000000..0ad9642 --- /dev/null +++ b/branch_dev @@ -0,0 +1 @@ +some changes on dev branch. 4.2. 删除本地或远程标签 删除本地标签：git tag -d 推送本地标签到远程仓库：git push origin 一次性推送所有本地标签到远程仓库：git push origin --tags 如果标签已经推送到远程，先从本地删除，然后在从远程删除：git push origin :refs/tags/ 5. .gitignore文件 GitHub官方提供的有用的.gitignore模板文件：https://github.com/github/gitignore .gitignore用于忽略特殊文件. 忽略文件的原则是： 忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。 你想添加一个文件，但是提示The following paths are ignored by one of your .gitignore files ...，如果你确实想要添加该文件到Git中去，那么你就可以使用-f强制添加： git add -f test.class 或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查： ➜ test01 git:(master) ✗ git check-ignore -v ignore.file .gitignore:1:*.file ignore.file 6. Git其他 git pull 撤销误操作 本来想把github上的newpbft合并到本地的newpbft分支上，由于没有查看当前分支，直接运用git pull origin newpbft，结果将newpbft合并到了master分支中。 解决方法：1、运行git reflog命令查看你的历史变更记录2、然后用git reset --hard HEAD@{n}，（n是你要回退到的引用位置）回退。 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-13 09:45:08 "},"Git/GitLab服务器.html":{"url":"Git/GitLab服务器.html","title":"GitLab服务器","keywords":"","body":"1. GitLab环境部署2. GitLab简单配置3. GitLab启动与管理员账户4. GitLab英文汉化5. GitLab其他5.1. × GitLab网页端报错502解决方案1. GitLab环境部署 GitLab官方下载安装教程：https://packages.gitlab.com/gitlab/gitlab-ce/install 安装GitLab所依赖的包 yum install -y curl policycoreutils-python openssh-server openssh-clients 开机启用sshd systemctl enabe sshd systemctl start sshd 使用yum安装GitLab-ce curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash yum install -y gitlab-ce.x86_64 2. GitLab简单配置 修改GitLab配置文件/etc/gitlab/gitlab.rb # 找到以下内容进行修改 #### external_url 'http://59.110.139.188' ... unicorn['port'] = 8080 #### 3. GitLab启动与管理员账户 使GitLab配置生效： gitlab-ctl reconfigure 开启Gitlab，设置开机启动： gitlab-ctl start systemctl enable gitlab-runsvdir 管理员账户初始化： 初始化密码，需要使用root身份 gitlab-rails console production 在弹出的交互式界面中输入u=User.where(id:1).first，来查找与切换账号（使用User.all 可以查看所有用户） irb(main):001:0>　 u=User.where(id:1).first 通过u.password='PASSWD'来设置密码 irb(main):002:0> u.password='suofeiya' 然后通过u.password_confirmation='PASSWD'再次确认密码 u.password_confirmation='suofeiya' 最后使用以下命令来进行保存 irb(main):004:0> u.save! # 注意最后面的英文感叹号不可少 Enqueued ActionMailer::DeliveryJob (Job ID: 8b588cf2-f718-4770-b154-b1f142384b70) to Sidekiq(mailers) with arguments: \"DeviseMailer\", \"password_change\", \"deliver_now\", #> => true # 出现true就表示保存成功 # 执行exit指令退出交互式界面 irb(main):005:0> exit 4. GitLab英文汉化 下载汉化tar包：https://gitlab.com/xhang/gitlab.git，需要注意的一点是应当下载和当前服务器上GitLab英文版相同的版本 解压之后可以通过cat gitlab--zh/VERSION查看中文包的版本 备份原来的英文版 cp -r /opt/gitlab/embedded/service/gitlab-rails{,.bak} 使用汉化包覆盖英文版 cp -rf gitlab-v10.7.0-zh/* /opt/gitlab/embedded/service/gitlab-rails/ 最后重新配置GitLab，重启即可 gitlab-ctl reconfigure gitlab-ctl restart 5. GitLab其他 5.1. × GitLab网页端报错502解决方案 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-12-12 10:02:41 "},"Windows/":{"url":"Windows/","title":"Windows系统","keywords":"","body":"1. Windows-目录1.1. cmd命令1. Windows-目录 1.1. cmd命令 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Windows/cmd命令.html":{"url":"Windows/cmd命令.html","title":"cmd命令","keywords":"","body":" This is ADB命令 StudyNote. ipconfig /all 查看IP各项信息，ipconfig /renew 立即要求更新IP Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Vim.html":{"url":"Vim.html","title":"Vim","keywords":"","body":"1. 1. 关于Vim1.1. 1.1 Vim的几种模式2. 2. 启动Vim3. 3. 文档操作4. 4. 光标的移动4.1. 4.1 基本移动4.2. 4.2 翻屏4.3. 4.3 标记5. 5. 插入文本5.1. 5.1 基本插入5.2. 5.2 改写插入6. 6. 剪切复制和寄存器6.1. 6.1 剪切和复制、粘贴6.2. 6.2 文本对象6.3. 6.3 寄存器7. 7. 查找与替换7.1. 7.1 查找7.2. 7.2 替换7.3. 7.3 正则表达式8. 8. 排版8.1. 8.1 基本排版8.2. 8.2 拼写检查8.3. 8.3 统计字数9. 9. 编辑多个文件9.1. 9.1 一次编辑多个文件9.2. 9.2 多标签编辑9.3. 9.3 缓冲区10. 10. 分屏编辑10.1. 10.1 水平分割10.2. 10.2 垂直分割10.3. 10.3 关闭子窗口10.4. 10.4 调整窗口大小10.5. 10.5 切换和移动窗口11. 11. 快速编辑11.1. 11.1 改变大小写11.2. 11.2 替换（normal模式）11.3. 11.3 撤消与重做（normal模式）11.4. 11.4 宏12. 12. 编辑特殊文件12.1. 12.1 文件加解密12.2. 12.2 文件的编码12.3. 12.3 文件格式13. 13. 编程辅助13.1. 13.1 一些按键13.2. 13.2 ctags13.3. 13.3 cscope13.4. 13.4 gtags13.5. 13.5 编译13.6. 13.6 快速修改窗口13.7. 13.7 自动补全13.8. 13.8 多行缩进缩出13.9. 13.9 折叠14. 14. 命令行14.1. 14.1 命令行模式下的快捷键：14.2. 14.2 执行外部命令15. 15. 其它15.1. 15.1 工作目录15.2. 15.2 一些快捷键（收集中）15.3. 15.3 在线帮助15.4. 15.4 一些小功能16. 补充 1. 1. 关于Vim vim是我最喜欢的编辑器，也是linux下第二强大的编辑器。 虽然emacs是公认的世界第一，我认为使用emacs并没有使用vi进行编辑来得高效。 如果是初学vi，运行一下vimtutor是个聪明的决定。 （如果你的系统环境不是中文，而你想使用中文的vimtutor，就运行vimtutor zh） 1.1. 1.1 Vim的几种模式 正常模式：可以使用快捷键命令，或按:输入命令行。 插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。 可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。 替换模式：正常模式下，按R进入。 2. 2. 启动Vim vim -c cmd file: 在打开文件前，先执行指定的命令； vim -r file: 恢复上次异常退出的文件； vim -R file: 以只读的方式打开文件，但可以强制保存； vim -M file: 以只读的方式打开文件，不可以强制保存； vim -y num file: 将编辑窗口的大小设为num行； vim + file: 从文件的末尾开始； vim +num file: 从第num行开始； vim +/string file: 打开file，并将光标停留在第一个找到的string上。 vim --remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim --remote file在已有的gvim中打开文件。 3. 3. 文档操作 :e file --关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。 :e! file --放弃对当前文件的修改，编辑新的文件。 :e+file -- 开始新的文件，并从文件尾开始编辑。 :e+n file -- 开始新的文件，并从第n行开始编辑。 :enew --编译一个未命名的新文档。 :e -- 重新加载当前文档。 :e! -- 重新加载当前文档，并丢弃已做的改动。 :e#或ctrl+^ -- 回到刚才编辑的文件，很实用。 :f或ctrl+g -- 显示文档名，是否修改，和光标位置。 :f filename -- 改变编辑的文件名，这时再保存相当于另存为。 gf -- 打开以光标所在字符串为文件名的文件。 :w -- 保存修改。 :n1,n2w filename -- 选择性保存从某n1行到另n2行的内容。 :wq -- 保存并退出。 ZZ -- 保存并退出。 :x -- 保存并退出。 :quit ——退出当前窗口。 :saveas newfilename -- 另存为 :browse e -- 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置： :set browsedir=last -- 用上次访问过的目录（默认）； :set browsedir=buffer -- 用当前文件所在目录； :set browsedir=current -- 用当前工作目录； :Sex -- 水平分割一个窗口，浏览文件系统； :Vex -- 垂直分割一个窗口，浏览文件系统； 4. 4. 光标的移动 4.1. 4.1 基本移动 以下移动都是在normal模式下。 h或退格: 左移一个字符； l或空格: 右移一个字符； j: 下移一行； k: 上移一行； gj: 移动到一段内的下一行； gk: 移动到一段内的上一行； **+或Enter: 把光标移至下一行第一个非空白字符。 -: 把光标移至上一行第一个非空白字符。 w: 前移一个单词，光标停在下一个单词开头； W: 移动下一个单词开头，但忽略一些标点； e: 前移一个单词，光标停在下一个单词末尾； E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点； b: 后移一个单词，光标停在上一个单词开头； B: 移动到上一个单词开头，忽略一些标点； ge: 后移一个单词，光标停在上一个单词末尾； gE: 同 ge ，不过‘单词’包含单词相邻的标点。 (: 前移1句。 ): 后移1句。 {: 前移1段。 }: 后移1段。 fc: 把光标移到同一行的下一个c字符处 Fc: 把光标移到同一行的上一个c字符处 tc: 把光标移到同一行的下一个c字符前 Tc: 把光标移到同一行的上一个c字符后 ;: 配合f & t使用，重复一次 ,: 配合f & t使用，反向重复一次 上面的操作都可以配合n使用，比如在正常模式下输入3h， 则光标向左移动3个字符。 0: 移动到行首。 g0: 移到光标所在屏幕行行首。 ^: 移动到本行第一个非空白字符。 g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。 $: 移动到行尾。 g$: 移动光标所在屏幕行行尾。 n|: 把光标移到递n列上。 nG: 到文件第n行。 :n 移动到第n行。 :$ 移动到最后一行。 H: 把光标移到屏幕最顶端一行。 M: 把光标移到屏幕中间一行。 L: 把光标移到屏幕最底端一行。 gg: 到文件头部。 G: 到文件尾部。 4.2. 4.2 翻屏 ctrl+f: 下翻一屏。 ctrl+b: 上翻一屏。 ctrl+d: 下翻半屏。 ctrl+u: 上翻半屏。 ctrl+e: 向下滚动一行。 ctrl+y: 向上滚动一行。 n%: 到文件n%的位置。 zz: 将当前行移动到屏幕中央。 zt: 将当前行移动到屏幕顶端。 zb: 将当前行移动到屏幕底端。 4.3. 4.3 标记 使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。 m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。 m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。 `{a-z}: 移动到标记位置。 '{a-z}: 移动到标记行的行首。 `{0-9}：回到上2-10次关闭vim时最后离开的位置。 : 移动到上次编辑的位置。''也可以，不过精确到列，而''精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。 `\": 移动到上次离开的地方。 `.: 移动到最后改动的地方。 :marks 显示所有标记。 :delmarks a b -- 删除标记a和b。 :delmarks a-c -- 删除标记a、b和c。 :delmarks a c-f -- 删除标记a、c、d、e、f。 :delmarks! -- 删除当前缓冲区的所有标记。 :help mark-motions 查看更多关于mark的知识。 5. 5. 插入文本 5.1. 5.1 基本插入 i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+就插入了36个+组成的分割线。 I: 在当前行第一个非空字符前插入； gI: 在当前行第一列插入； a: 在光标后插入； A: 在当前行最后插入； o: 在下面新建一行插入； O: 在上面新建一行插入； :r filename在当前位置插入另一个文件的内容。 :nr filename在第n行插入另一个文件的内容。 :r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。 5.2. 5.2 改写插入 cnw: 改写光标后1个词。 cnl: 改写光标后n个字母。 cnh: 改写光标前n个字母。 ncc: 修改当前n行。 ns: 以输入的文本替代光标之后1个字符，相当于cnl。 nS: 删除指定数目的行，并以所输入文本代替之。 注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。 6. 6. 剪切复制和寄存器 6.1. 6.1 剪切和复制、粘贴 nx: 剪切光标右边n个字符，相当于dnl。 nX: 剪切光标左边n个字符，相当于dnh。 y: 复制在可视模式下选中的文本。 yy or Y: 复制整行文本。 ynw: 复制一个词。 ynl: 复制光标右边1个字符。 ynh: 复制光标左边1个字符。 y$: 从光标当前位置复制到行尾。 y0: 从光标当前位置复制到行首。 :m,ny 复制m行到n行的内容。 y1G或ygg: 复制光标以上的所有行。 yG: 复制光标以下的所有行。 yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。 d: 删除（剪切）在可视模式下选中的文本。 d$ or D: 删除（剪切）当前位置到行尾的内容。 dnw: 删除（剪切）1个单词 dnl: 删除（剪切）光标右边1个字符。 dnh: 删除（剪切）光标左边1个字符。 d0: 删除（剪切）当前位置到行首的内容 n dd: 删除（剪切）1行。 :m,nd 剪切m行到n行的内容。 d1G或dgg: 剪切光标以上的所有行。 dG: 剪切光标以下的所有行。 daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。 d/f：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。 p: 在光标之后粘贴。 P: 在光标之前粘贴。 6.2. 6.2 文本对象 aw：一个词 as：一句。 ap：一段。 ab：一块（包含在圆括号中的）。 y, d, c, v都可以跟文本对象。 6.3. 6.3 寄存器 a-z：都可以用作寄存器名。\"ayy把当前行的内容放入a寄存器。 A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如\"Ayy把当前行的内容追加到a寄存器中。 :reg 显示所有寄存器的内容。 \"\"：不加寄存器索引时，默认使用的寄存器。 \"：当前选择缓冲区，\"yy把当前行的内容放入当前选择缓冲区。 \"+：系统剪贴板。\"+yy把当前行的内容放入系统剪贴板。 7. 7. 查找与替换 7.1. 7.1 查找 /something: 在后面的文本中查找something。 ?something: 在前面的文本中查找something。 /pattern/+number: 将光标停在包含pattern的行后面第number行上。 /pattern/-number: 将光标停在包含pattern的行前面第number行上。 n: 向后查找下一个。 N: 向前查找下一个。 可以用grep或vimgrep查找一个模式都在哪些地方出现过， 其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。 用法为： :vimgrep/pattern/g j files g的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。 j的含义是grep结束后，结果停在第j项，默认是停在第一项。 vimgrep前面可以加数字限定搜索结果的上限，如 :1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。 其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。 比如电子书中每一节的标题形式为：n. xxxx。你就可以这样： :vim/^d{1,}./ % 然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧， 就更像个目录了。 7.2. 7.2 替换 :s/old/new - 用new替换当前行第一个old。 :s/old/new/g - 用new替换当前行所有的old。 :n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。 :%s/old/new/g - 用new替换文件中所有的old。 :%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。 :%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。 所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写。 还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令， 语法为 :rangeg/pattern/command 例如 :%g/^ xyz/normal dd。 表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。 关于range的规定为： 如果不指定range，则表示当前行。 m,n: 从m行到n行。 0: 最开始一行（可能是这样）。 $: 最后一行 .: 当前行 %: 所有行 7.3. 7.3 正则表达式 高级的查找替换就要用到正则表达式。 \\d: 表示十进制数（我猜的） \\s: 表示空格 \\S: 非空字符 \\a: 英文字母 |: 表示 或 .: 表示. {m,n}: 表示m到n个字符。这要和 \\s与\\a等连用，如 \\a{m,n} 表示m 到n个英文字母。 {m,}: 表示m到无限多个字符。 **: 当前目录下的所有子目录。 :help pattern得到更多帮助。 8. 8. 排版 8.1. 8.1 基本排版 >> 向右缩进一个shiftwidth :ce 本行文字居中 :le 本行文字靠左 :re 复制全部文本并黏贴到光标处 :ri 本行文字靠右 gqgq 对选中的文字重排，即对过长的文字进行断行 gqq 重排当前行 gqnq 重排n行 gqap 重排当前段 gqnap 重排n段 gqnj 重排当前行和下面n行 gqQ 重排当前段对文章末尾 J 拼接当前行和下一行 gJ 同 J ，不过合并后不留空格。 8.2. 8.2 拼写检查 :set spell－开启拼写检查功能 :set nospell－关闭拼写检查功能 s－移到下一个拼写错误的单词 s－作用与上一命令类似，但它是从相反方向进行搜索 z=－显示一个有关拼写错误单词的列表，可从中选择 zg－告诉拼写检查器该单词是拼写正确的 zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的 8.3. 8.3 统计字数 g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。 9. 9. 编辑多个文件 9.1. 9.1 一次编辑多个文件 我们可以一次打开多个文件，如 vi a.txt b.txt c.txt 使用:next编辑下一个文件。 :2n 编辑下2个文件。 使用:previous或:N编辑上一个文件。 使用:wnext，保存当前文件，并编辑下一个文件。 使用:wprevious，保存当前文件，并编辑上一个文件。 使用:args 显示文件列表。 :n filenames或:args filenames 指定新的文件列表。 vi -o filenames 在水平分割的多个窗口中编辑多个文件。 vi -O filenames 在垂直分割的多个窗口中编辑多个文件。 9.2. 9.2 多标签编辑 vim -p files: 打开多个文件，每个文件占用一个标签页。 :tabe, tabnew -- 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。 ^w gf -- 在新的标签页里打开光标下路径指定的文件。 :tabn -- 切换到下一个标签。Control + PageDown，也可以。 :tabp -- 切换到上一个标签。Control + PageUp，也可以。 n gt -- 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。 :tab split -- 将当前缓冲区的内容在新页签中打开。 :tabclose -- 关闭当前的标签页。 :tabonly -- 关闭其它的标签页。 :tabs -- 列出所有的标签页和它们包含的窗口。 :tabmove N -- 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。 9.3. 9.3 缓冲区 :buffers或:ls或:files 显示缓冲区列表。 ctrl+^：在最近两个缓冲区间切换。 :bn -- 下一个缓冲区。 :bp -- 上一个缓冲区。 :bl -- 最后一个缓冲区。 :bn或:nb -- 切换到第n个缓冲区。 :nbw -- 彻底删除第n个缓冲区。 :nbd -- 删除第n个缓冲区，并未真正删除，还在unlisted列表中。 :ball -- 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。 10. 10. 分屏编辑 vim -o file1 file2:水平分割窗口，同时打开file1和file2 vim -O file1 file2:垂直分割窗口，同时打开file1和file2 10.1. 10.1 水平分割 :split -- 把当前窗水平分割成两个窗口。 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。 :split filename -- 水平分割窗口，并在新窗口中显示另一个文件。 :nsplit -- 水平分割出一个n行高的窗口。 :Nnew -- 水平分割出一个N行高的窗口，并编辑一个新文件。 ctrl+w f --水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。 C-w C-^ -- 水平分割一个窗口，打开刚才编辑的文件。 10.2. 10.2 垂直分割 :vsplit -- 把当前窗口分割成水平分布的两个窗口。 :Nvnew -- 垂直分割出一个新窗口。 :vertical 水平分割的命令： 相应的垂直分割。 10.3. 10.3 关闭子窗口 :qall -- 关闭所有窗口，退出vim。 :wall -- 保存所有修改过的窗口。 :only -- 只保留当前窗口，关闭其它窗口。 :close -- 关闭当前窗口，CTRL-W c能实现同样的功能。 10.4. 10.4 调整窗口大小 ctrl+w + --当前窗口增高一行。也可以用n增高n行。 ctrl+w - --当前窗口减小一行。也可以用n减小n行。 ctrl+w _ --当前窗口扩展到尽可能的大。也可以用n设定行数。 :resize n -- 当前窗口n行高。 ctrl+w = -- 所有窗口同样高度。 n ctrl+w _ -- 当前窗口的高度设定为n行。 ctrl+w 。 ctrl+w > --当前窗口增宽一列。也可以用n增宽n列。 ctrl+w | --当前窗口尽可能的宽。也可以用n设定列数。 10.5. 10.5 切换和移动窗口 如果支持鼠标，切换和调整子窗口的大小就简单了。 ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。 ctrl+w p: 切换到前一个窗口。 ctrl+w h:切换到左（右，下，上）的窗口。 ctrl+w t:切换到最上（下）面的窗口。 ctrl+w H: 将当前窗口移动到最左（右、上、下）面。 ctrl+w r：旋转窗口的位置。 ctrl+w T: 将当前的窗口移动到新的标签页上。11. 11. 快速编辑 11.1. 11.1 改变大小写 ~: 反转光标所在字符的大小写。 可视模式下的U或u：把选中的文本变为大写或小写。 gu接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。 11.2. 11.2 替换（normal模式） r: 替换光标处的字符，同样支持汉字。 R: 进入替换模式，按esc回到正常模式。 11.3. 11.3 撤消与重做（normal模式） n u: 取消一个改动。 :undo 5 -- 撤销5个改变。 :undolist -- 你的撤销历史。 ctrl + r: 重做最后的改动。 U: 取消当前行中所有的改动。 :earlier 4m -- 回到4分钟前 :later 55s -- 前进55秒 11.4. 11.4 宏 . --重复上一个编辑动作 qa：开始录制宏a（键盘操作记录） q：停止录制 @a：播放宏a 12. 12. 编辑特殊文件 12.1. 12.1 文件加解密 vim -x file: 开始编辑一个加密的文件。 :X -- 为当前文件设置密码。 :set key= -- 去除文件的密码。 这里是 滇狐总结的比较高级的vi技巧。 12.2. 12.2 文件的编码 :e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。 :w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。 :set fenc或:set fileencoding，查看当前文件的编码。 在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。 让vim 正确处理文件格式和文件编码，有赖于 ~/.vimrc的正确配置 12.3. 12.3 文件格式 大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。 :e ++ff=dos filename, 让vim用dos格式打开这个文件。 :w ++ff=mac filename, 以mac格式存储这个文件。 :set ff，显示当前文件的格式。 在vimrc中添加set fileformats=unix,dos,mac，让vim自动识别文件格式。 13. 13. 编程辅助 13.1. 13.1 一些按键 gd: 跳转到局部变量的定义处； gD: 跳转到全局变量的定义处，从当前文件开头开始搜索； g;: 上一个修改过的地方； g,: 下一个修改过的地方； : 跳转到上一个函数块开始，需要有单独一行的{。 : 跳转到下一个函数块开始，需要有单独一行的{。 : 跳转到上一个函数块结束，需要有单独一行的}。 : 跳转到下一个函数块结束，需要有单独一行的}。 {: 跳转到当前块开始处； }: 跳转到当前块结束处； /: 跳转到当前注释块开始处； /: 跳转到当前注释块结束处； %: 不仅能移动到匹配的,{}或上，而且能在#if，#else， #endif之间跳跃。 下面的括号匹配对编程很实用的。 ci', di', yi'：修改、剪切或复制'之间的内容。 ca', da', ya'：修改、剪切或复制'之间的内容，包含'。 ci\", di\", yi\"：修改、剪切或复制\"之间的内容。 ca\", da\", ya\"：修改、剪切或复制\"之间的内容，包含\"。 ci之间的内容。 ca之间的内容，包含。 ci, di, yi：修改、剪切或复制之间的内容。 ca, da, ya：修改、剪切或复制之间的内容，包含。 ci{, di{, yi{：修改、剪切或复制{}之间的内容。 ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。 ci之间的内容。 ca之间的内容，包含<>。 13.2. 13.2 ctags ctags -R: 生成tag文件，-R表示也为子目录中的文件生成tags :set tags=path/tags -- 告诉ctags使用哪个tag文件 :tag xyz -- 跳到xyz的定义处，或者将光标放在xyz上按C-，返回用C-t :stag xyz -- 用分割的窗口显示xyz的定义，或者C-w ， 如果用C-w n ，就会打开一个n行高的窗口 :ptag xyz -- 在预览窗口中打开xyz的定义，热键是C-w }。 :pclose -- 关闭预览窗口。热键是C-w z。 :pedit abc.h -- 在预览窗口中编辑abc.h :psearch abc -- 搜索当前文件和当前文件include的文件，显示包含abc的行。 有时一个tag可能有多个匹配，如函数重载，一个函数名就会有多个匹配。 这种情况会先跳转到第一个匹配处。 :ntnext -- 下一n个匹配。 :ntprev -- 上一n个匹配。 :tfirst -- 第一个匹配 :tlast -- 最后一个匹配 :tselect tagname -- 打开选择列表 tab键补齐 :tag xyz -- 补齐以xyz开头的tag名，继续按tab键，会显示其他的。 :tag /xyz -- 会用名字中含有xyz的tag名补全。 13.3. 13.3 cscope cscope -Rbq: 生成cscope.out文件 :cs add /path/to/cscope.out /your/work/dir :cs find c func -- 查找func在哪些地方被调用 :cw -- 打开quickfix窗口查看结果 13.4. 13.4 gtags Gtags综合了ctags和cscope的功能。 使用Gtags之前，你需要安装GNU Gtags。 然后在工程目录运行 gtags 。 :Gtags funcname 定位到 funcname 的定义处。 :Gtags -r funcname 查询 funcname被引用的地方。 :Gtags -s symbol 定位 symbol 出现的地方。 :Gtags -g string Goto string 出现的地方。 :Gtags -gi string 忽略大小写。 :Gtags -f filename 显示 filename 中的函数列表。 你可以用 :Gtags -f % 显示当前文件。 :Gtags -P pattern 显示路径中包含特定模式的文件。 如 :Gtags -P .h$ 显示所有头文件， :Gtags -P /vm/ 显示vm目录下的文件。 13.5. 13.5 编译 vim提供了:make来编译程序，默认调用的是make， 如果你当前目录下有makefile，简单地:make即可。 如果你没有make程序，你可以通过配置makeprg选项来更改make调用的程序。 如果你只有一个abc.java文件，你可以这样设置： set makeprg=javac\\ abc.java 然后:make即可。如果程序有错，可以通过quickfix窗口查看错误。 不过如果要正确定位错误，需要设置好errorformat，让vim识别错误信息。 如： :setl efm=%A%f:%l:\\ %m,%-Z%p^,%-C%.%# %f表示文件名，%l表示行号， %m表示错误信息，其它的还不能理解。 请参考 :help errorformat。 13.6. 13.6 快速修改窗口 其实是quickfix插件提供的功能， 对编译调试程序非常有用 :) :copen -- 打开快速修改窗口。 :cclose -- 关闭快速修改窗口。 快速修改窗口在make程序时非常有用，当make之后： :cl -- 在快速修改窗口中列出错误。 :cn -- 定位到下一个错误。 :cp -- 定位到上一个错误。 :cr -- 定位到第一个错误。 13.7. 13.7 自动补全 C-x C-s -- 拼写建议。 C-x C-v -- 补全vim选项和命令。 C-x C-l -- 整行补全。 C-x C-f -- 自动补全文件路径。弹出菜单后，按C-f循环选择，当然也可以按 C-n和C-p。 C-x C-p 和C-x C-n -- 用文档中出现过的单词补全当前的词。 直接按C-p和C-n也可以。 C-x C-o -- 编程时可以补全关键字和函数名啊。 C-x C-i -- 根据头文件内关键字补全。 C-x C-d -- 补全宏定义。 C-x C-n -- 按缓冲区中出现过的关键字补全。 直接按C-n或C-p即可。 当弹出补全菜单后： C-p 向前切换成员； C-n 向后切换成员； C-e 退出下拉菜单，并退回到原来录入的文字； C-y 退出下拉菜单，并接受当前选项。 13.8. 13.8 多行缩进缩出 正常模式下，按两下>;光标所在行会缩进。 如果先按了n，再按两下>;，光标以下的n行会缩进。 对应的，按两下 如果在编辑代码文件，可以用=进行调整。 在可视模式下，选择要调整的代码块，按=，代码会按书写规则缩排好。 或者n =，调整n行代码的缩排。 13.9. 13.9 折叠 zf -- 创建折叠的命令，可以在一个可视区域上使用该命令； zd -- 删除当前行的折叠； zD -- 删除当前行的折叠； zfap -- 折叠光标所在的段； zo -- 打开折叠的文本； zc -- 收起折叠； za -- 打开/关闭当前折叠； zr -- 打开嵌套的折行； zm -- 收起嵌套的折行； zR -- 打开所有折行； zM -- 收起所有折行； zj -- 跳到下一个折叠处； zk -- 跳到上一个折叠处； zi -- enable/disable fold; 14. 14. 命令行 normal模式下按:进入命令行模式 14.1. 14.1 命令行模式下的快捷键： 上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。 左右方向键：左/右移一个字符。 C-w： 向前删除一个单词。 C-h： 向前删除一个字符，等同于Backspace。 C-u： 从当前位置移动到命令行开头。 C-b： 移动到命令行开头。 C-e： 移动到命令行末尾。 Shift-Left： 左移一个单词。 Shift-Right： 右移一个单词。 @： 重复上一次的冒号命令。 q： 正常模式下，q然后按':'，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。 q/和q? 可以打开查找历史记录。 14.2. 14.2 执行外部命令 :! cmd 执行外部命令。 :!! 执行上一次的外部命令。 :sh 调用shell，用exit返回vim。 :r !cmd 将命令的返回结果插入文件当前位置。 :m,nw !cmd 将文件的m行到n行之间的内容做为命令输入执行命令。 15. 15. 其它 15.1. 15.1 工作目录 :pwd 显示vim的工作目录。 :cd path 改变vim的工作目录。 :set autochdir 可以让vim 根据编辑的文件自动切换工作目录。 :nohl 可以取消高亮15.2. 15.2 一些快捷键（收集中） K: 打开光标所在词的manpage。 *: 向下搜索光标所在词。 g*: 同上，但部分符合即可。 #: 向上搜索光标所在词。 g#: 同上，但部分符合即可。 g C-g: 统计全文或统计部分的字数。 15.3. 15.3 在线帮助 :h或F1 打开总的帮助。 :help user-manual 打开用户手册。 命令帮助的格式为：第一行指明怎么使用那个命令； 然后是缩进的一段解释这个命令的作用，然后是进一步的信息。 :helptags somepath 为somepath中的文档生成索引。 :helpgrep 可以搜索整个帮助文档，匹配的列表显示在quickfix窗口中。 Ctrl+ 跳转到tag主题，Ctrl+t 跳回。 :ver 显示版本信息。 15.4. 15.4 一些小功能 简单计算器: 在插入模式下，输入C-r =，然后输入表达式，就能在 光标处得到计算结果。 16. 补充 Vim反向引用 # 一般模式下，在以空白字符开头的行首加上# :%s@^[[:space:]]\\+@# &@g # 一般模式下，将所有的enabled=0或者checked=0改为enabled=1或者checked=1 :%s@\\(enabled\\|checked\\)=0@\\1=1@g 查找忽略大小写set ignorecase或者在要查找的字符串后面直接加上\\c 为每一行添加行号 # 每行前面插入行号如下 :%s/^/\\=line(\".\")/ # 可视区域插入从1开始的编号 's/^/\\=line('.') - line(\"' Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-19 11:50:07 "},"i3WM快捷键.html":{"url":"i3WM快捷键.html","title":"i3WM快捷键","keywords":"","body":"1. i3WM快捷键1. i3WM快捷键 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"ADB命令.html":{"url":"ADB命令.html","title":"ADB命令","keywords":"","body":"1. ADB命令1. ADB命令 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Tmux.html":{"url":"Tmux.html","title":"Tmux","keywords":"","body":" This is Tmux StudyNote. 在 Tmux 中，按下 Tmux 前缀 ctrl+b，然后： 会话 :new 启动新会话 s 列出所有会话 $ 重命名当前会话 123 窗口 (标签页) c 创建新窗口 w 列出所有窗口 n 后一个窗口 p 前一个窗口 f 查找窗口 , 重命名当前窗口 & 关闭当前窗口 //在同一个window里左右移动pane { （往左边，往上面） } （往右边，往下面） x 删除当前panel ctrl+ 调整panel大小 1234567 调整窗口排序 swa p-window -s 3 -t 1 交换 3 号和 1 号窗口 swap-window -t 1 交换当前和 1 号窗口 move-window -t 1 移动当前窗口到 1 号 123 窗格（分割窗口） % 垂直分割 \" 水平分割 o 交换窗格 x 关闭窗格 ⍽ 左边这个符号代表空格键 - 切换布局 q 显示每个窗格是第几个，当数字出现的时候按数字几就选中第几个窗格 { 与上一个窗格交换位置 } 与下一个窗格交换位置 z 切换窗格最大化/最小化 123456789 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Kindle.html":{"url":"Kindle.html","title":"Kindle越狱指南","keywords":"","body":"1. 越狱操作步骤1.1. 第一部分1.2. 第二部分 This is Kindle-越狱 StudyNote. Kindle伴侣官网：https://bookfere.com Kindle详细介绍以及越狱方法(Kindle ver5.6.5) 以下内容节选自Kindle伴侣: 1. 越狱操作步骤 越狱操作分为两部分进行。第一部分会用到 jb.zip 文件，第二部分会用到 JailBreak-1.14.N-FW-5.x-hotfix.zip 文件。请按照下面所列步骤一步一步地操作，注意不要有遗漏哦！ 1.1. 第一部分 第一部分操作有两种方式，方法一无需联网即可在本地完成，方法二需要在联网状态下进行。可根据你的需要选择。 方法一（本地模式）： 用 USB 数据线把 Kindle 连接到电脑，直到出现 Kindle 盘符； 把下载到的 jb.zip 解压缩，得到 jb 文件夹，把里面的所有文件拷贝到 Kindle 根目录下； 从电脑弹出 Kindle。然后点击 Kindle 右上角的菜单键，打开“体验版网页浏览器”； 怕强制升级请开启飞行模式。点击地址栏调出键盘，在地址栏中输入 **file:///mnt/us/index.html**； 在打开的页面中，点击底部的【I Agree】按钮，切换到另外一个页面； 先点击页面下方的链接 Stage1，看到出错页面后点击“返回按钮”返回； 再点击页面下方的链接 Stage2，当看到顶部状态栏出现“**Run ;fc-cache in the search bar.**”时，点击“搜索按钮”，并输入“**;fc-cache**”（只输入标识为红色的字符，别漏掉分号“；”），回车； 当你看到“**Jailbreak succeeded!**”的提示信息，即表示操作成功。 方法二（联网模式）： 用 USB 数据线把 Kindle 连接到电脑，直到出现 Kindle 盘符； 把下载到的 jb.zip 解压缩，得到 jb 文件夹，把里面的 jb 文件拷贝到 Kindle 根目录下（千万注意！是把 jb 文件放到 Kindle 根目录，不是 jb 文件夹哦！）； 从电脑弹出 Kindle。然后点击 Kindle 右上角的菜单键，打开“体验版网页浏览器”； 点击地址栏调出键盘，在地址栏中输入网址 **https://bookfere.com/jb**，回车； 在打开的页面中，点击底部的【I Agree】按钮，切换到另外一个页面； 先点击页面下方的链接 Stage1，看到出错页面后点击“返回按钮”返回； 再点击页面下方的链接 Stage2，当看到顶部状态栏出现“**Run ;fc-cache in the search bar.**”时，点击“搜索按钮”，并输入“**;fc-cache**”（只输入标识为红色的字符，别漏掉分号“；”），回车； 当你看到“**Jailbreak succeeded!**”的提示信息，即表示操作成功。 * 提示 jailbreak failed 错误，或操作失败了怎么办？ 对于第一部分经常误解的，在这里再提示一下。首先请确认已经把解压 jb.zip 得到的 jb 文件（就是解压后文件夹内除三个 html 文件之外的那个 jb 文件）放到了 Kindle 根目录（不是 documents 目录，而是和 documents 目录同级别的位置）。如果操作确实没有问题，请重置一下 Kindle 再重试。 另外，对于之前曾越狱成功的 Kindle，如果因为某种原因进行过重置操作或者自动/手动升级固件造成越狱失效的。请略过上面第一部分的步骤，直接进行下面的第二部分的步骤即可恢复。 1.2. 第二部分 用 USB 数据线把 Kindle 连接到电脑，直到出现 Kindle 盘符； 解压缩下载到的 ZIP 压缩包 JailBreak-1.14.N-FW-5.x-hotfix.zip，得到一个名为 Update_jailbreak_bridge_1.14.N_install.bin 的文件； 将此 bin 文件拷贝到 Kindle 磁盘根目录，然后从电脑弹出 Kindle（不要断开 USB 数据线）； 依次在 Kindle 中点击“菜单 —> 设置 —> 菜单 —> **更新您的 Kindle**”，等待重启； 重启完毕后你的 Kindle 就已经处于越狱状态了。 如何判断越狱是否成功？如果按照以上步骤操作的过程中没有出错即表示越狱成功。或者安装一个 KUAL，如果能正常显示和打开则表示越狱成功。 越狱成功后你就可以安装相关的增强插件（如 KUAL、Koreader）或更换屏保、替换字体等操作了。 Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Other/":{"url":"Other/","title":"Other","keywords":"","body":"1. Other-目录1.1. pandoc1.2. jupyter & reveal.js1.3. json1. Other-目录 1.1. pandoc 1.2. jupyter & reveal.js 1.3. json Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Other/pandoc.html":{"url":"Other/pandoc.html","title":"pandoc","keywords":"","body":" This is Pandoc StudyNote. 官方网址 https://www.pandoc.org/installing.html Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Other/jupyter&reveal.js.html":{"url":"Other/jupyter&reveal.js.html","title":"jupyter & reveal.js","keywords":"","body":" This is jupyter & reveal.js StudyNote. jupyter notebook基础操作 Installation # 升级pip pip3 install --upgrade pip # 使用pip3安装 pip3 install jupyter Running jupyter notebook # 默认端口8888 官方文档 > https://jupyter.readthedocs.io/en/latest/running.html#running jupyter lab基础操作 Installation python3 -m pip install jupyterlab Running jupyter lab 官方文档 https://jupyterlab.readthedocs.io/en/stable/getting_started/starting.html jupyter-themes基础操作 Installation # 安装 jupyterthemes pip install jupyterthemes # 升级到最新版本 pip install --upgrade jupyterthemes Running # list available themes # onedork | grade3 | oceans16 | chesterish | monokai | solarizedl | solarizedd jt -l # select theme... jt -t chesterish # restore default theme # NOTE: Need to delete browser cache after running jt -r # If this doesn't work, try starting a new notebook session. jt -r # toggle toolbar ON and notebook name ON jt -t grade3 -T -N # toggle kernel logo. kernel logo is in same container as name # toggled with -N. That means that making the kernel logo visible is # pointless without also making the name visible jt -t grade3 -N -kl # set code font to 'Roboto Mono' 12pt # (see monospace font table below) jt -t onedork -f roboto -fs 12 # set code font to Fira Mono, 11.5pt # 3digit font-sizes get converted into float (115-->11.5) # 2digit font-sizes > 25 get converted into float (85-->8.5) jt -t solarizedd -f fira -fs 115 # set font/font-size of markdown (text cells) and notebook (interface) # see sans-serif & serif font tables below jt -t oceans16 -tf merriserif -tfs 10 -nf ptsans -nfs 13 # adjust cell width (% screen width) and line height jt -t chesterish -cellw 90% -lineh 170 # or set the cell width in pixels by leaving off the '%' sign jt -t solarizedl -cellw 860 # fix the container-margins on the intro page (defaults to 'auto') jt -t monokai -m 200 # adjust cursor width (in px) and make cursor red # options: b (blue), o (orange), r (red), p (purple), g (green), x (font color) jt -t oceans16 -cursc r -cursw 5 # choose alternate prompt layout (narrower/no numbers) jt -t grade3 -altp # my two go-to styles # dark jt -t onedork -fs 95 -altp -tfs 11 -nfs 115 -cellw 88% -T # light jt -t grade3 -fs 95 -altp -tfs 11 -nfs 115 -cellw 88% -T 可用主题 Available Themes: chesterish grade3 gruvboxd gruvboxl monokai oceans16 onedork solarizedd solarizedl 官方文档 https://github.com/dunovank/jupyter-themes#command-line-examples Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Other/json.html":{"url":"Other/json.html","title":"json","keywords":"","body":"1. 示例json模块主要有四个比较重要的函数，分别是： dump - 将Python对象按照JSON格式序列化到文件中 dumps - 将Python对象处理成JSON格式的字符串 load - 将文件中的JSON数据反序列化成对象 loads - 将字符串的内容反序列化成Python对象 1. 示例 import json def main(): mydict = { 'name': 'suofeiya', 'age': 20, 'qq': 2440911975, 'friends': ['hello', 'json'], 'cars': [ {'brand': 'BYD', 'max_speed': 180}, {'brand': 'Audi', 'max_speed': 280}, {'brand': 'Benz', 'max_speed': 320} ] } try: with open('data.json', 'w', encoding='utf-8') as fs: json.dump(mydict, fs) except IOError as e: print(e) print('保存数据完成!') if __name__ == '__main__': main() Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "},"Other/Reveal_js.html":{"url":"Other/Reveal_js.html","title":"Reveal_js","keywords":"","body":"1. 基础结构2. Reveal.initialize(我觉得还蛮不错的配置)3. Reveal.configure4. 懒惰加载（延迟加载意味着reveal.js只会加载最接近当前幻灯片的几张幻灯片的内容）5. section属性6. 部分快捷键以及事件 This Reveal.js StudyNote. 1. 基础结构 幻灯片1 幻灯片2 Reveal.initialize(); 2. Reveal.initialize(我觉得还蛮不错的配置) Reveal.initialize({ // 显示操作控件 controls: true, // 显示帮助 controlsTutorial: false, // 箭头布局，前者代表四周，后者代表右下角显示 //\"edges\" or \"bottom-right\" controlsLayout: 'edges', // 向后导航箭头的可见性规则;“褪色”，“隐藏”或“可见” //\"faded\", \"hidden\",\"visible\" controlsBackArrows: 'faded', // 显示ppt进度条 progress: true, // 显示当前ppt页码 slideNumber: true, //将当前幻灯片编号添加到URL哈希，以便重新加载 //页面复制URL将返回到同一张幻灯片 hash: true, // 存入浏览器历史，意味着hash属性为true history: false, // 激活键盘来进行操作，默认选项 keyboard: true, // 打开ppt全览，默认选项 overview: true, // 幻灯片垂直居中，默认选项 center: true, // 启用触摸选项（移动端，touch操作），默认选项 touch: true, // 循环演示 loop: false, // 反转幻灯片顺序，第一页变成最后一页，不建议使用 rtl: false, // 参考 https://github.com/hakimel/reveal.js/#navigation-mode // default linear（一页页全部显示） grid 三种 navigationMode: 'default', // 加载随机幻灯片，默认选项 shuffle: false, // 全局打开和关闭片段，默认选项 fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position // 和hash类似？？？ fragmentInURL: false, // 像所有人显示笔记，默认选项 showNotes: false, // 媒体是否自动播放 // - null：如果存在data-autoplay，则媒体只会自动播放 // - true：无论个别设置如何，所有媒体都将自动播放 // - false：无论个人设置如何，都不会自动播放媒体 autoPlayMedia: null, //用于预加载延迟加载的iframe的全局覆盖 // - null：在内部加载带有data-src和data-preload的iframe // viewDistance，只有data-src的iframe将在可见时加载 // - true：在viewDistance中加载所有带有data-src的iframe // - false：所有带有data-src的iframe只有在可见时才会加载 preloadIframes: null, //自动进入的时间间隔的毫秒数 //下一张幻灯片，设置为0时禁用，可以覆盖此值 //在幻灯片上使用data-autoslide属性 autoSlide: 0, // 用户输入后停止自动滑动 autoSlideStoppable: true, // 自动滑动时使用此方法进行导航 autoSlideMethod: Reveal.navigateNext, //指定您认为将花费的平均时间（以秒为单位） //展示每张幻灯片。这用于显示一个起搏计时器 //扬声器视图 defaultTiming: 120, // 通过鼠标滚轮启用幻灯片导航，逐页翻，我反正不建议使用 mouseWheel: false, // 如果不活动则隐藏鼠标 hideInactiveCursor: true, // 隐藏鼠标的时间（单位：ms） hideCursorTime: 5000, //隐藏移动设备上的地址栏 hideAddressBar: true, //在iframe预览叠加层中打开链接 //添加`data-preview-link`和`data-preview-link =“false”`来自定义每个链接 //单独 previewLinks: false, // 翻页风格 // none/fade/slide/convex/concave/zoom // //无/淡入淡出/滑动/凸出/凹入/缩放 transition: 'zoom', // 翻页速度 transitionSpeed: 'default', // default/fast/slow // 幻灯片背景的过渡风格 // none/fade/slide/convex/concave/zoom backgroundTransition: 'fade', // 远离当前可见的幻灯片数量 viewDistance: 3, // 视差背景图像 parallaxBackgroundImage: 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg', // 视差背景图像大小 parallaxBackgroundSize: '', // CSS 语法, e.g. \"2100px 900px\" //每张幻灯片移动视差背景的像素数 // - 除非指定，否则自动计算 // - 设置为0以禁用沿轴的移动 // 通俗来讲,就是切换slide背景图片的偏移量 parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50, // 幻灯片的显示模式 display: 'block' }); 3. Reveal.configure // 自动翻页，时间：ms Reveal.configure({ autoSlide: 5000, slideNumber: true, //开启页码 slideNumber: 'c/t', //设置页码格式,当前/全部 }); 4. 懒惰加载（延迟加载意味着reveal.js只会加载最接近当前幻灯片的几张幻灯片的内容） 5. section属性 方法1：添加注释 方法2： Iframe // 翻页风格 // none/fade/slide/convex/concave/zoom // //无/淡入淡出/滑动/凸出/凹入/缩放 //fast,default,slow Link 凸起 凹陷 消失 从下方浮现 (同理 down, left and right!) 浮现,下一步后消失 浮现,下一步聚焦模糊 颜色出现一次 高亮-红色 def main(): print(\"hello Python\") if __name__ == \"__main__\": main() This video will use up the remaining space on the slide 6. 部分快捷键以及事件 F(fullscreen)全屏 ESC全览 S speaker模式 # Overview mode Press »ESC« or »O« keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Copyright © AGou 2020 all right reserved，powered by Gitbook该文件修订时间： 2019-10-11 10:45:21 "}}